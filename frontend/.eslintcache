[{"/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/index.js":"1","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/reportWebVitals.js":"2","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/App.js":"3","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/Reducers/index.js":"4","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/themes.js":"5","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/Actions/loginActions.js":"6","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/components/Authentication/Login_material.js":"7","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/Views/PageContainer/PageContainer.js":"8","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/Reducers/loginReducer.js":"9","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/Reducers/appStateReducer.js":"10","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/components/Authentication/TextFieldStartAdornment.js":"11","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/Actions/menuActions.js":"12","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/components/Navbar/Navbar.js":"13","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/Views/Pages/error404.js":"14","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/Views/Pages/AlternativeSpeciesPage.js":"15","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/Views/Pages/InvasiveSpeciesPage.js":"16","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/Views/Pages/pl@ntNet.js":"17","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/Views/Pages/RegionsPage.js":"18","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/Views/Pages/downloadWebscrap.js":"19","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/Views/Pages/Theme.js":"20","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/components/SearchComponent.js":"21","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/components/LocationFilterComponent.js":"22","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/components/PaginationComponent.js":"23","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/functions/speciesToJSON.js":"24","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/functions/alternativePlants.js":"25","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/functions/helperFunctions.js":"26","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/functions/pipeline.js":"27","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/dialogs/AddRegionDialog.js":"28","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/dialogs/EditRegionsDialog.js":"29","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/dialogs/ConfirmDeleteDialog.js":"30","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/functions/webscrapeWiki.js":"31","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/functions/webscrape.js":"32","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/functions/RegionMap.js":"33","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/components/AlertComponent.js":"34","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/components/SnackbarComponent.js":"35","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/components/WarningComponent.js":"36","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/dialogs/AddInvasiveSpeciesDialog.js":"37","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/dialogs/EditInvasiveSpeciesDialog.js":"38","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/dialogs/AddAlternativeSpeciesDialog.js":"39","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/dialogs/EditAlternativeSpeciesDialog.js":"40"},{"size":1431,"mtime":1700778164766,"results":"41","hashOfConfig":"42"},{"size":362,"mtime":1700244664963,"results":"43","hashOfConfig":"42"},{"size":2481,"mtime":1701979725077,"results":"44","hashOfConfig":"42"},{"size":232,"mtime":1700244664930,"results":"45","hashOfConfig":"42"},{"size":457,"mtime":1700244664966,"results":"46","hashOfConfig":"42"},{"size":295,"mtime":1700244664927,"results":"47","hashOfConfig":"42"},{"size":41541,"mtime":1701473893648,"results":"48","hashOfConfig":"42"},{"size":4449,"mtime":1701979725077,"results":"49","hashOfConfig":"42"},{"size":385,"mtime":1700244664930,"results":"50","hashOfConfig":"42"},{"size":385,"mtime":1700244664929,"results":"51","hashOfConfig":"42"},{"size":1498,"mtime":1700244664951,"results":"52","hashOfConfig":"42"},{"size":303,"mtime":1700244664927,"results":"53","hashOfConfig":"42"},{"size":10769,"mtime":1701979725081,"results":"54","hashOfConfig":"42"},{"size":1655,"mtime":1701979725080,"results":"55","hashOfConfig":"42"},{"size":38139,"mtime":1701979767845,"results":"56","hashOfConfig":"42"},{"size":44224,"mtime":1701979725079,"results":"57","hashOfConfig":"42"},{"size":8391,"mtime":1701209831617,"results":"58","hashOfConfig":"42"},{"size":37825,"mtime":1701979725080,"results":"59","hashOfConfig":"42"},{"size":1288,"mtime":1701128260740,"results":"60","hashOfConfig":"42"},{"size":460,"mtime":1701474389550,"results":"61","hashOfConfig":"42"},{"size":1428,"mtime":1701979725082,"results":"62","hashOfConfig":"42"},{"size":1141,"mtime":1701979725081,"results":"63","hashOfConfig":"42"},{"size":1031,"mtime":1701979725082,"results":"64","hashOfConfig":"42"},{"size":1561,"mtime":1701979725090,"results":"65","hashOfConfig":"42"},{"size":9986,"mtime":1701979725089,"results":"66","hashOfConfig":"42"},{"size":1318,"mtime":1701979725089,"results":"67","hashOfConfig":"42"},{"size":8988,"mtime":1700244664961,"results":"68","hashOfConfig":"42"},{"size":6551,"mtime":1701979725085,"results":"69","hashOfConfig":"42"},{"size":5216,"mtime":1701979725088,"results":"70","hashOfConfig":"42"},{"size":1151,"mtime":1701979725085,"results":"71","hashOfConfig":"42"},{"size":4870,"mtime":1701209831630,"results":"72","hashOfConfig":"42"},{"size":12217,"mtime":1700778164765,"results":"73","hashOfConfig":"42"},{"size":913,"mtime":1701979725088,"results":"74","hashOfConfig":"42"},{"size":809,"mtime":1700244664950,"results":"75","hashOfConfig":"42"},{"size":477,"mtime":1701979725083,"results":"76","hashOfConfig":"42"},{"size":1185,"mtime":1701979725083,"results":"77","hashOfConfig":"42"},{"size":9723,"mtime":1701979725085,"results":"78","hashOfConfig":"42"},{"size":8158,"mtime":1701979725087,"results":"79","hashOfConfig":"42"},{"size":7586,"mtime":1701979725084,"results":"80","hashOfConfig":"42"},{"size":12560,"mtime":1701979725087,"results":"81","hashOfConfig":"42"},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},"112zn08",{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"84"},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"96","messages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"84"},{"filePath":"99","messages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"101","messages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"103","messages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"105","messages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"84"},{"filePath":"108","messages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"110","messages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"112","messages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"116","messages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"118","messages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"84"},{"filePath":"121","messages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"123","messages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"84"},{"filePath":"126","messages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"128","messages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"130","messages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"132","messages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"134","messages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"136","messages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"138","messages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"140","messages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"84"},{"filePath":"143","messages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"145","messages":"146","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"147","messages":"148","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"149","messages":"150","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"151","messages":"152","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"84"},{"filePath":"154","messages":"155","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"156","messages":"157","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"158","messages":"159","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"160","messages":"161","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"162","messages":"163","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"164","messages":"165","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"166","messages":"167","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"168","messages":"169","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/index.js",[],["170","171"],"/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/reportWebVitals.js",[],"/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/App.js",["172"],"/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/Reducers/index.js",[],"/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/themes.js",["173"],"import { createMuiTheme } from '@material-ui/core/styles';\nimport { createTheme } from '@material-ui/core/styles';\nimport orange from '@material-ui/core/colors/orange';\n\nconst theme = createTheme({\n    palette: {\n        primary: {\n            main: \"#012144\",\n        },\n        secondary: {\n            main: orange[500],\n        },\n        darkTheme: {\n            main: \"#282c34\",\n            card: \"#4a4f59\",\n        }\n    },\n});\n\nexport default theme;","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/Actions/loginActions.js",[],"/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/components/Authentication/Login_material.js",["174","175","176","177","178"],"import { Button, CircularProgress, Divider, Grid, List, ListItem, ListItemIcon, ListItemText } from '@mui/material';\nimport Alert from '@mui/material/Alert';\n\n// icons\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\nimport AlternateEmailIcon from '@mui/icons-material/AlternateEmail';\nimport LockIcon from '@mui/icons-material/Lock';\nimport DialpadIcon from '@mui/icons-material/Dialpad';\nimport CheckCircleRoundedIcon from '@mui/icons-material/CheckCircleRounded';\nimport CancelRoundedIcon from '@mui/icons-material/CancelRounded';\n\n// colors\nimport { green, red } from '@material-ui/core/colors';\n\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\nimport {Amplify, Auth} from 'aws-amplify';\nimport React, { useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { updateLoginState } from \"../../Actions/loginActions\";\nimport TextFieldStartAdornment from \"./TextFieldStartAdornment\";\nimport \"./Login.css\";\nimport Typography from '@material-ui/core/Typography';\n\nconst initialFormState = {\n    email: \"\", password: \"\", given_name: \"\", family_name: \"\", authCode: \"\", resetCode: \"\"\n}\n\nconst useStyles = makeStyles((theme) => ({\n    marginTop: {\n        margin: theme.spacing(2, 'auto', 'auto', 'auto')\n    },\n    marginHorizontal: {\n        margin: theme.spacing(4, 'auto')\n    },\n    padding: {\n        padding: theme.spacing(1.5)\n    },\n    textAlignCenter: {\n        textAlign: \"center\"\n    },\n    flexDisplay: {\n        display: \"flex\"\n    },\n    forgetPassword: {\n        justifyContent: \"flex-end\",\n        fontFamily: \"'Roboto', 'Helvetica', 'Arial', 'sans-serif'\",\n        fontWeight: 500,\n        lineHeight: 1.75,\n    },\n    activeButton: {\n        borderRadius: 50,\n        width: \"100%\",\n        fontSize: \"1em\"\n    },\n    themeColor: {\n        backgroundColor: \"#012144\",\n    },\n    errorMessage: {\n        color: \"red\",\n    },\n    cursor: {\n        cursor: \"pointer\"\n    },\n    underlineText: {\n        textDecoration: \"underline\",\n    },\n    passwordReq: {\n        backgroundColor: \"#ffc2c2\",\n        borderRadius: 5\n    },\n    centerBox: {\n        justifyContent: \"center\",\n        alignItems: \"center\"\n    }\n}));\n\nconst DefaultButton = withStyles((theme) => ({\n    root: {\n        borderRadius: 50,\n        width: \"100%\",\n        fontSize: \"1em\",\n        padding: theme.spacing(1.5),\n        margin: theme.spacing(2, 'auto')\n    },\n}))(Button);\n\nconst SubmitButton = withStyles((theme) => ({\n    root: {\n        color: theme.palette.getContrastText(\"#012144\"),\n        backgroundColor: \"#012144\",\n        '&:hover': {\n            backgroundColor: \"#012144\",\n        },\n    },\n}))(DefaultButton);\n\nfunction Login(props) {\n    const { loginState, updateLoginState, animateTitle, type, title, darkMode, logo, themeColor, disableSignUp } = props;\n    const [formState, updateFormState] = useState(initialFormState);\n    const [accountCreationEmailExistError, setAccountCreationEmailExistError] = useState(false);\n    const [accountCreationPasswordError, setAccountCreationPasswordError] = useState(false);\n    const [accountLoginError, setAccountLoginError] = useState(false);\n    const [accountLoginErrorMsg, setAccountLoginErrorMsg] = useState(undefined);\n    const [verificationError, setVerificationError] = useState(false);\n    const [newPasswordError, setNewPasswordError] = useState(false);\n    const [newVerification, setNewVerification] = useState(false);\n    const [loading, setLoading] = useState(false);\n    const [currentUser, setCurrentUser] = useState(null);\n    const [forgotPasswordError, setForgotPasswordError] = useState(false);\n    const [emptyInputError, setEmptyInputError] = useState(false);\n    const [invalidEmailError, setInvalidEmailError] = useState(false);\n    const [timeLimitError, setTimeLimitError] = useState(\"\");\n\n    // password check\n    const [passwordRequirements, setPasswordRequirements] = useState({\n        uppercase: { error: false, description: 'At least one uppercase letter' },\n        lowercase: { error: false, description: 'At least one lowercase letter' },\n        digit: { error: false, description: 'At least one digit' },\n        special: { error: false, description: 'At least one special character' },\n        minLength: { error: false, description: 'Should be more than 8 characters' },\n        maxLength: { error: false, description: 'Should be less than 16 characters' }\n    });\n    const [passwordUnmatchError, setPasswordUnmatchError] = useState(false);\n    const [confirmPasswordString, setConfirmPasswordString] = useState('');\n\n\n    const classes = useStyles();\n\n    useEffect(() => {\n        async function retrieveUser() {\n            try {\n                Auth.currentAuthenticatedUser().then(user => {\n                    updateLoginState(\"signedIn\");\n                }).catch(err => {\n                    updateLoginState(\"signIn\");\n                })\n            } catch (e) {\n                console.log(\"error authenticted user\", e);\n            }\n        }\n        retrieveUser();\n    }, []);\n\n    function clearErrors() {\n        setAccountCreationEmailExistError(false);\n        setAccountCreationPasswordError(false);\n        setAccountLoginError(false);\n        setVerificationError(false);\n        setNewVerification(false);\n        setNewPasswordError(false);\n        setInvalidEmailError(false);\n    }\n\n    function onChange(e) {\n        e.persist();\n        clearErrors()\n\n        updateFormState({ ...formState, [e.target.name]: e.target.value })\n    }\n\n    function onChangePassword(e) {\n        const currPW = e.target.value;\n        setPasswordRequirements(() => {\n            passwordRequirements.uppercase.error = /[A-Z]/.test(currPW)\n            passwordRequirements.lowercase.error = /[a-z]/.test(currPW)\n            passwordRequirements.digit.error = /[0-9]/.test(currPW)\n            passwordRequirements.special.error = /[^A-Za-z0-9]/.test(currPW)\n            passwordRequirements.minLength.error = currPW.length > 8\n            passwordRequirements.maxLength.error = currPW.length <= 16\n\n            return passwordRequirements;\n        })\n\n        onChange(e);\n\n        // check if \"password\" is the same as \"confirm-password\"\n        e.target.value === confirmPasswordString ? setPasswordUnmatchError(false) : setPasswordUnmatchError(true)\n    }\n\n    async function signUp() {\n        try {\n            console.log(\"try signup\");\n\n            // check if both passwords match first before signing up\n            checkMatchingPasswords();\n\n            const { email, password, given_name, family_name } = formState;\n            checkEmptyString(given_name);\n            checkEmptyString(family_name);\n\n            setLoading(true);\n            await Auth.signUp({\n                username: email,\n                password: password,\n                attributes: {\n                    given_name: given_name,\n                    family_name: family_name\n                }\n            });\n            updateFormState(() => ({ ...initialFormState, email }))\n            updateLoginState(\"confirmSignUp\");\n            setLoading(false);\n        } catch (e) {\n            setLoading(false);\n            setEmptyInputError(false);\n\n            const errorMsg = e.message;\n\n            if (errorMsg.includes(\"empty\")) {\n                setEmptyInputError(true);\n            } else if (errorMsg.includes(\"Username should be an email.\")) {\n                setInvalidEmailError(true);\n            } else if (errorMsg.includes(\"given email already exists\")) {\n                setAccountCreationEmailExistError(true);\n            } else if (errorMsg.includes(\"Passwords do not match\")) {\n                setPasswordUnmatchError(true)\n            } else {\n                setAccountCreationPasswordError(true);\n            }\n        }\n    }\n\n    // confirmSignUp shows after signUp page\n    async function confirmSignUp() {\n        // Verify Account with confirmation code after sign up page\n        try {\n            console.log(\"try confirm signup\");\n\n            setNewVerification(false);\n            const { email, authCode } = formState;\n            setLoading(true);\n            await Auth.confirmSignUp(email, authCode);\n            resetStates(\"signedIn\");\n            setLoading(false);\n        } catch (e) {\n            setVerificationError(true);\n            setLoading(false);\n\n            const errorMsg = e.message;\n            if (errorMsg.includes(\"time\")) {\n                setTimeLimitError(errorMsg);\n            }\n        }\n    }\n\n    async function resendConfirmationCode() {\n        try {\n            const { email } = formState;\n            setVerificationError(false);\n            await Auth.resendSignUp(email);\n            setNewVerification(true);\n        } catch (err) {\n            setNewVerification(false);\n\n            const errorMsg = err.message;\n            if (errorMsg.includes(\"time\")) {\n                setTimeLimitError(errorMsg);\n            }\n        }\n    }\n\n    async function signIn() {\n        try {\n            setLoading(true);\n            const { email, password } = formState;\n            let user = await Auth.signIn(email, password);\n            console.log(\"user: \", user);\n            if (user.challengeName === \"NEW_PASSWORD_REQUIRED\") {\n                // a new password needs to be set if account is created through Amazon Cognito for the user\n                resetStates(\"newUserPassword\")\n                setLoading(false);\n                setCurrentUser(user);\n            } else {\n                if(user.signInUserSession.idToken.payload[\"cognito:groups\"] != undefined && user.signInUserSession.idToken.payload[\"cognito:groups\"].some(element => element === \"ADMIN_USER\")){\n                    resetStates(\"signedIn\");\n                    setLoading(false);\n                } else {\n                    resetStates(\"signIn\");\n                    setLoading(false);\n                    await Auth.signOut();\n                    updateFormState(() => ({ ...initialFormState, email, password }));\n                    throw {message: \"Not enough permission\", code:\"DeniedPermission\"};\n                }\n            }\n        } catch (e) {\n            setLoading(false);\n            const errorMsg = e.code;\n\n            // if a password is requested through Amazon Cognito,\n            // need to jump to resetPassword page\n            if (errorMsg && errorMsg.includes(\"PasswordResetRequiredException\")) {\n                const { email } = formState;\n\n                updateFormState(() => ({ ...initialFormState, email }))\n                updateLoginState(\"resetPassword\")\n                setLoading(false);\n            } else {\n                setAccountLoginErrorMsg(e.message);\n                setAccountLoginError(true);\n            }\n        }\n    }\n\n    async function setNewPassword() {\n        try {\n            // check if both passwords match first before setting new password\n            checkMatchingPasswords();\n\n            const { password } = formState;\n            setLoading(true);\n            await Auth.completeNewPassword(currentUser, password);\n            resetStates(\"signedIn\");\n            setLoading(false);\n        } catch (e) {\n            setLoading(false);\n\n            const errorMsg = e.message;\n\n            if (errorMsg.includes(\"empty\")) {\n                setEmptyInputError(true);\n            } else if (errorMsg.includes(\"Passwords do not match\")) {\n                setPasswordUnmatchError(true);\n            } else if (errorMsg.includes(\"time\")) {\n                setTimeLimitError(errorMsg);\n            } else {\n                setNewPasswordError(true);\n            }\n        }\n    }\n\n    async function forgotPassword() {\n        try {\n            const { email } = formState;\n            setLoading(true);\n            await Auth.forgotPassword(email);\n            updateFormState(() => ({ ...initialFormState, email }))\n            updateLoginState(\"resetPassword\")\n            setLoading(false);\n        } catch (e) {\n            setLoading(false);\n            setForgotPasswordError(true);\n        }\n    }\n\n    // resetPassword after forgotPassword page\n    async function resetPassword() {\n        try {\n            // check if both passwords match first before resetting password\n            checkMatchingPasswords();\n\n            const { email, resetCode, password } = formState;\n            setLoading(true);\n            await Auth.forgotPasswordSubmit(email, resetCode, password);\n            resetStates(\"signIn\");\n            setLoading(false);\n        } catch (e) {\n            setLoading(false);\n            setEmptyInputError(false);\n\n            const errorMsg = e.message;\n\n            if (errorMsg.includes(\"empty\")) {\n                setEmptyInputError(true);\n            } else if (errorMsg.includes(\"verification code\")) {\n                setVerificationError(true);\n            } else if (errorMsg.includes(\"time\")) {\n                setTimeLimitError(errorMsg);\n            } else if (errorMsg.includes(\"Passwords do not match\")) {\n                setPasswordUnmatchError(true)\n            } else {\n                setNewPasswordError(true);\n            }\n        }\n    }\n\n    function checkMatchingPasswords() {\n        // check if both passwords match\n        if (!confirmPasswordString) {\n            // empty field\n            throw new Error(\"empty\");\n        } else if (passwordUnmatchError) {\n            throw new Error(\"Passwords do not match\");\n        }\n    }\n\n    function checkEmptyString(str) {\n        // check if string is empty after space trimmed\n        if (str.replace(/\\s+/g, '') === '') {\n            throw new Error(\"empty\");\n        }\n    }\n\n    function resetStates(state) {\n        // clear states when hitting the back button\n        updateFormState(() => (initialFormState))\n        clearErrors()\n\n        // the following were not removed during onChange() so need to be cleared here\n        setForgotPasswordError(false)\n        setEmptyInputError(false)\n        setPasswordUnmatchError(false);\n        setConfirmPasswordString('');\n        setTimeLimitError('');\n\n        // clear password requirement checks\n        setPasswordRequirements(() => {\n            passwordRequirements.uppercase.error = false\n            passwordRequirements.lowercase.error = false\n            passwordRequirements.digit.error = false\n            passwordRequirements.special.error = false\n            passwordRequirements.minLength.error = false\n            passwordRequirements.maxLength.error = false\n\n            return passwordRequirements;\n        })\n\n        updateLoginState(state)\n    }\n\n    let logoType = (darkMode) ? \"/Assets/Images/logo_inverse.png\" : \"/Assets/Images/logo.png\";\n\n    return (\n        <>\n            {/*  An example image is provided. Please use a royalty-free photo, a photo owned by you, or a photo owned by the CIC */}\n            <Grid container className={classes.centerBox} style={\n                (type === \"image\") ? (themeColor === \"standard\") ? { backgroundColor: \"#012144\", backgroundImage: \"url(./Assets/Images/background.jpg)\", backgroundSize: \"cover\", backgroundRepeat: \"no\", width: \"100%\", height: \"100vh\" } :\n                    { backgroundColor: themeColor, backgroundImage: \"url(./Assets/Images/background.jpg)\", backgroundSize: \"cover\", backgroundRepeat: \"no\", width: \"100%\", height: \"100vh\" } :\n                    (themeColor === \"standard\") ? { backgroundColor: \"#012144\", width: \"100%\", height: \"100vh\" } : { backgroundColor: themeColor, width: \"100%\", height: \"100vh\" }\n            }>\n                {/* Please use a royalty free video or a video that you or the CIC owns */}\n                {(type === \"video\") ?\n                    <video playsInline autoPlay muted loop>\n                        <source src={process.env.PUBLIC_URL + \"/Assets/Videos/video.mp4\"} type=\"video/mp4\" />\n                    </video>\n                    : null}\n                <Grid container item xs={12} md={6} className={`page-info ${classes.centerBox}`}>\n                    <Grid container item justify={\"space-evenly\"} alignItems={\"center\"} /*style={{height: \"60vh\"}}*/>\n                        <Grid xs item className={`typewriter ${classes.marginHorizontal}`}>\n                            <center>\n                                <Typography variant=\"h2\" style={{fontWeight:\"bold\", color: \"white\"}}>Invasive Plants</Typography>\n                            </center>\n                            \n                            <p className={`${classes.textAlignCenter} ${(animateTitle) ?\n                                (darkMode) ? \"line anim-typewriter\" : \"line anim-typewriter-light lightMode\"\n                                :\n                                (darkMode) ? \"line-static\" : \"line-static lightMode-static\"\n                                }`}\n                            >\n                                {title}\n                            </p>\n                        </Grid>\n                        <Grid container item xs={12} justify={\"center\"}>\n                            <Grid item xs={10}>\n                                {(logo !== \"none\") ? <img src={process.env.PUBLIC_URL + logoType} style={{ width: \"100%\", height: \"100%\" }} /> : null}\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                </Grid>\n                <Grid container item xs={12} sm={7} md={5} className={`login-container ${classes.centerBox}`}>\n                    <Grid container item direction={\"column\"} xs={12} sm={11} md={9} className={\"login-box\"}>\n                        <Grid className={\"login-wrapper-top\"}>\n                            <span className={\"login-wrapper-top-header\"}>\n                                {(loginState === \"signIn\") ?\n                                    <span>Sign In</span>\n                                    :\n                                    (loginState === \"signUp\") ? <span>Create an Account</span> :\n                                        (loginState === \"confirmSignUp\") ? <span>Verify Account</span> :\n                                            (loginState === \"forgotPassword\") ? <span>Forgot your password?</span> :\n                                                (loginState === \"resetPassword\") ? <span>Password Reset</span> :\n                                                    (loginState === \"newUserPassword\") ? <span>Set New Password</span> : <span>Welcome</span>\n                                }\n                            </span>\n                        </Grid>\n                        {\n                            loginState === \"signIn\" && (\n                                <Grid>\n                                    <BannerMessage type={\"error\"} typeCheck={accountLoginError}>{accountLoginErrorMsg}</BannerMessage>\n                                    {/* username */}\n                                    <TextFieldStartAdornment startIcon={<AlternateEmailIcon />} placeholder={\"Email\"} name={\"email\"} type={\"email\"} onChange={onChange} />\n                                    {/* password */}\n                                    <TextFieldStartAdornment startIcon={<LockIcon />} placeholder={\"Password\"} name={\"password\"} type={\"password\"} onChange={onChange} />\n\n                                    {/* forget */}\n                                    <Grid className={`${classes.flexDisplay} ${classes.forgetPassword} ${classes.cursor}`}\n                                        onClick={() => resetStates(\"forgotPassword\")}\n                                    >\n                                        <span style={{ textAlign: \"end\" }}>Forgot your password?</span>\n                                    </Grid>\n\n                                    <Grid className={`input-box ${classes.marginTop}`}> {/* sign in button */}\n                                        <SubmitButtonWithLoading submitAction={signIn} submitMessage={\"Sign In\"} loadingState={loading} />\n                                    </Grid>\n                                    {!(disableSignUp) && // if sign up is not disabled, then show the create an account option\n                                        <div>\n                                            {/* divider */}\n                                            <Grid container item alignItems=\"center\" xs={12}>\n                                                <Grid item xs>\n                                                    <Divider />\n                                                </Grid>\n                                                <Grid item className={classes.padding}>\n                                                    Or\n                                                </Grid>\n                                                <Grid item xs>\n                                                    <Divider />\n                                                </Grid>\n                                            </Grid>\n                                            {/* create an account button */}\n                                            <Grid className={`input-box`}>\n                                                <DefaultButton variant=\"contained\" type=\"button\" onClick={() => resetStates(\"signUp\")}>\n                                                    Create an Account\n                                                </DefaultButton>\n                                            </Grid>\n                                        </div>\n                                    }\n                                </Grid>\n                            )\n                        }\n                        {\n                            loginState === \"forgotPassword\" && (\n                                <Grid>\n                                    <Grid container item xs={12}>\n                                        <span>\n                                            Enter your email address and we'll send you a code to help you reset your password.\n                                        </span>\n                                    </Grid>\n                                    <TextFieldStartAdornment\n                                        startIcon={<AlternateEmailIcon />}\n                                        placeholder={\"Email\"}\n                                        name={\"email\"}\n                                        type=\"email\"\n                                        autoComplete={\"new-password\"}\n                                        variant=\"outlined\"\n                                        error={forgotPasswordError}\n                                        onChange={onChange}\n                                    />\n                                    {!!forgotPasswordError &&\n                                        <Grid container item xs={12} className={classes.errorMessage}>\n                                            <span>Please enter a valid email or create an account&nbsp;\n                                                <span className={`${classes.cursor} ${classes.underlineText}`} onClick={() => updateLoginState(\"signUp\")}><strong>here</strong></span>\n                                                <span>.</span>\n                                            </span>\n                                        </Grid>\n                                    }\n                                    <BackAndSubmitButtons backAction={() => resetStates(\"signIn\")} submitAction={forgotPassword} submitMessage={\"Send reset code\"} loadingState={loading} />\n                                </Grid>\n                            )\n                        }\n                        {\n                            loginState === \"resetPassword\" && (\n                                <Grid>\n                                    <Grid>\n                                        <span>\n                                            Please check your email&nbsp;\n                                            <strong>{formState.email}</strong><br />\n                                            for a reset code and create a new password.\n                                        </span>\n                                    </Grid>\n                                    <BannerMessage type={\"error\"} typeCheck={emptyInputError || timeLimitError}>\n                                        {(!!emptyInputError && \"Please fill in all fields.\") || (timeLimitError !== '' && timeLimitError)}\n                                    </BannerMessage>\n                                    <TextFieldStartAdornment\n                                        startIcon={<DialpadIcon />}\n                                        placeholder=\"Enter reset code\"\n                                        variant=\"outlined\"\n                                        name={\"resetCode\"}\n                                        type=\"text\"\n                                        error={verificationError}\n                                        helperText={\n                                            !!verificationError && \"Please enter correct reset code.\"\n                                        }\n                                        onChange={onChange}\n                                    />\n                                    <TextFieldStartAdornment\n                                        startIcon={<LockIcon />}\n                                        placeholder=\"Create new password\"\n                                        name={\"password\"}\n                                        type=\"password\"\n                                        error={newPasswordError}\n                                        helperText={\n                                            \"Your password must have the following:\"\n                                        }\n                                        autoComplete={\"new-password\"}\n                                        onChange={onChangePassword}\n                                    />\n                                    <Grid container item xs={12} className={!!newPasswordError ? classes.passwordReq : null}>\n                                        <PasswordRequirements requirements={passwordRequirements} />\n                                    </Grid>\n                                    <TextFieldStartAdornment\n                                        startIcon={<LockIcon />}\n                                        placeholder=\"Re-enter the password\"\n                                        name={\"confirm-password\"}\n                                        type=\"password\"\n                                        error={passwordUnmatchError}\n                                        helperText={!!passwordUnmatchError && \"Passwords do not match\"}\n                                        autoComplete={\"new-password\"}\n                                        value={confirmPasswordString}\n                                        onChange={(e) => {\n                                            setConfirmPasswordString(e.target.value); // update current input state\n                                            // check if \"password\" is the same as \"confirm-password\"\n                                            e.target.value === formState.password ? setPasswordUnmatchError(false) : setPasswordUnmatchError(true)\n                                        }}\n                                    />\n                                    <BackAndSubmitButtons\n                                        backAction={() => resetStates(\"signIn\")}\n                                        submitAction={resetPassword}\n                                        submitMessage={\"Update Password\"}\n                                        loadingState={loading}\n                                    />\n                                </Grid>\n                            )\n                        }\n                        {\n                            loginState === \"signUp\" && (\n                                <Grid>\n                                    <BannerMessage type={\"error\"} typeCheck={emptyInputError}>Please fill in all fields.</BannerMessage>\n                                    <TextFieldStartAdornment\n                                        startIcon={false}\n                                        label={\"First Name\"}\n                                        name={\"given_name\"}\n                                        type=\"text\"\n                                        autoComplete={\"new-password\"}\n                                        onChange={onChange}\n                                    />\n                                    <TextFieldStartAdornment\n                                        startIcon={false}\n                                        label={\"Last Name\"}\n                                        name={\"family_name\"}\n                                        type=\"text\"\n                                        autoComplete={\"new-password\"}\n                                        onChange={onChange}\n                                    />\n                                    <TextFieldStartAdornment\n                                        startIcon={false}\n                                        label={\"Email\"}\n                                        name={\"email\"}\n                                        type=\"email\"\n                                        autoComplete={\"new-password\"}\n                                        error={accountCreationEmailExistError || invalidEmailError}\n                                        helperText={\n                                            (!!accountCreationEmailExistError && \"An account with the given email already exists.\") ||\n                                            (!!invalidEmailError && \"Please enter a valid email.\")\n                                        }\n                                        onChange={onChange}\n                                    />\n                                    <TextFieldStartAdornment\n                                        startIcon={false}\n                                        label={\"Password\"}\n                                        name={\"password\"}\n                                        type=\"password\"\n                                        error={accountCreationPasswordError}\n                                        helperText={\n                                            \"Your password must have the following:\"\n                                        }\n                                        autoComplete={\"new-password\"}\n                                        onChange={onChangePassword}\n                                    />\n                                    <Grid container item xs={12} className={!!accountCreationPasswordError ? classes.passwordReq : null}>\n                                        <PasswordRequirements requirements={passwordRequirements} />\n                                    </Grid>\n                                    <TextFieldStartAdornment\n                                        startIcon={false}\n                                        label={\"Confirm Password\"}\n                                        name={\"confirm-password\"}\n                                        type=\"password\"\n                                        error={passwordUnmatchError}\n                                        helperText={!!passwordUnmatchError && \"Passwords do not match\"}\n                                        autoComplete={\"new-password\"}\n                                        value={confirmPasswordString}\n                                        onChange={(e) => {\n                                            setConfirmPasswordString(e.target.value); // update current input state\n                                            // check if \"password\" is the same as \"confirm-password\"\n                                            e.target.value === formState.password ? setPasswordUnmatchError(false) : setPasswordUnmatchError(true)\n                                        }}\n                                    />\n                                    <BackAndSubmitButtons backAction={() => resetStates(\"signIn\")}\n                                        submitAction={signUp} submitMessage={\"Sign Up\"}\n                                        loadingState={loading} />\n                                </Grid>\n                            )\n                        }\n                        {\n                            loginState === \"confirmSignUp\" && (\n                                <Grid>\n                                    <Grid container item xs={12}>\n                                        <span>Please check your email for a confirmation code. This may take several minutes.</span>\n                                    </Grid>\n                                    <BannerMessage type={\"error\"} typeCheck={verificationError}>Invalid verification code provided, please try again.</BannerMessage>\n                                    <BannerMessage type={\"error\"} typeCheck={timeLimitError !== ''}>{timeLimitError}</BannerMessage>\n                                    <BannerMessage type={\"success\"} typeCheck={newVerification}>New verification code sent successfully.</BannerMessage>\n                                    <Grid container item direction={\"column\"} xs={12} className={\"input-box\"}>\n                                        <TextFieldStartAdornment\n                                            startIcon={<DialpadIcon />}\n                                            placeholder=\"Enter your confirmation code.\"\n                                            name={\"authCode\"}\n                                            type=\"text\"\n                                            autoComplete={\"new-password\"}\n                                            onChange={onChange}\n                                        />\n                                    </Grid>\n                                    <Grid>\n                                        <span>Didn't receive your verification code?</span>\n                                        <Button onClick={resendConfirmationCode}>\n                                            <span className={classes.underlineText}>Resend Code</span>\n                                        </Button>\n                                    </Grid>\n                                    <BackAndSubmitButtons\n                                        backAction={() => resetStates(\"signUp\")}\n                                        submitAction={confirmSignUp}\n                                        submitMessage={\"Verify\"}\n                                        loadingState={loading}\n                                    />\n                                </Grid>\n                            )\n                        }\n                        {\n                            loginState === \"newUserPassword\" && (\n                                <Grid>\n                                    <Grid container item xs={12}>\n                                        <span>\n                                            Please replace your temporary password with a new password for <strong>{formState.email}</strong>.\n                                        </span>\n                                    </Grid>\n                                    <BannerMessage type={\"error\"} typeCheck={timeLimitError !== ''}>{timeLimitError}</BannerMessage>\n                                    <Grid className={`input-box`}>\n                                        <TextFieldStartAdornment\n                                            startIcon={false}\n                                            placeholder={\"Enter new password\"}\n                                            label={\"Password\"}\n                                            name={\"password\"}\n                                            type=\"password\"\n                                            autoComplete={\"new-password\"}\n                                            error={(newPasswordError || emptyInputError)}\n                                            helperText={\"Your password must have the following:\"}\n                                            onChange={onChangePassword}\n                                        />\n                                        <Grid container item xs={12} className={(!!newPasswordError || !!emptyInputError) ? classes.passwordReq : null}>\n                                            <PasswordRequirements requirements={passwordRequirements} />\n                                        </Grid>\n                                        <TextFieldStartAdornment\n                                            startIcon={false}\n                                            placeholder={\"Re-enter new password\"}\n                                            label={\"Confirm Password\"}\n                                            name={\"confirm-password\"}\n                                            type=\"password\"\n                                            error={passwordUnmatchError}\n                                            helperText={!!passwordUnmatchError && \"Passwords do not match\"}\n                                            autoComplete={\"new-password\"}\n                                            value={confirmPasswordString}\n                                            onChange={(e) => {\n                                                setConfirmPasswordString(e.target.value); // update current input state\n                                                // check if \"password\" is the same as \"confirm-password\"\n                                                e.target.value === formState.password ? setPasswordUnmatchError(false) : setPasswordUnmatchError(true)\n                                            }}\n                                        />\n                                    </Grid>\n                                    <BackAndSubmitButtons\n                                        backAction={() => resetStates(\"signIn\")}\n                                        submitAction={setNewPassword}\n                                        submitMessage={\"Set Password\"}\n                                        loadingState={loading}\n                                    />\n                                </Grid>\n                            )\n                        }\n                    </Grid>\n                </Grid>\n            </Grid>\n        </>\n    );\n}\n\n/* helper components */\n\nconst BannerMessage = (props) => {\n    const { type, typeCheck, children } = props\n\n    const styles = makeStyles((theme) => ({\n        root: {\n            width: \"100%\",\n            margin: theme.spacing(2, 'auto')\n        },\n    }));\n\n    const localStyles = styles();\n\n    return (\n        <Grid>\n            {\n                (!!typeCheck) &&\n                <Grid container item xs={12}>\n                    <Alert\n                        className={localStyles.root}\n                        variant=\"filled\"\n                        severity={type}\n                        elevation={3}\n                    >\n                        {children}\n                    </Alert>\n                </Grid>\n            }\n        </Grid>\n    )\n};\n\nconst SubmitButtonWithLoading = (props) => {\n    const styles = makeStyles((theme) => ({\n        progress: {\n            display: \"flex\",\n            padding: theme.spacing(0, 1)\n        }\n    }));\n\n    const { submitAction, submitMessage, loadingState } = props;\n    const localStyles = styles();\n\n\n    return (\n        <SubmitButton variant=\"contained\" disabled={!!loadingState} onClick={submitAction}>\n            {submitMessage}\n            {/* if it is loading, show the loading indicator */}\n            {!!loadingState && <Grid className={localStyles.progress}><CircularProgress size={15} /></Grid>}\n        </SubmitButton>\n    )\n}\n\nconst BackAndSubmitButtons = ({ backAction, ...others }) => {\n    return (\n        <Grid container item xs={12} justify=\"space-between\" spacing={1}>\n            <Grid container item xs>\n                <DefaultButton variant=\"contained\" startIcon={<ArrowBackIcon />} onClick={backAction}>\n                    Back\n                </DefaultButton>\n            </Grid>\n            <Grid container item md={7} justify={\"flex-end\"}>\n                <SubmitButtonWithLoading {...others} />\n            </Grid>\n        </Grid>\n    )\n};\n\nconst PasswordRequirements = ({ requirements }) => {\n    const styles = makeStyles((theme) => ({\n        valid: {\n            color: green[500]\n        },\n        invalid: {\n            color: red[500]\n        },\n        fontSize: {\n            fontSize: \"0.9rem\",\n        }\n    }));\n\n    const localStyles = styles();\n\n    return (\n        <List dense={true} className={localStyles.root}>\n            {Object.entries(requirements).map((req) => {\n                return (\n                    <ListItem key={req[0]}>\n                        <ListItemIcon>\n                            {req[1].error ? <CheckCircleRoundedIcon className={localStyles.valid} /> : <CancelRoundedIcon className={localStyles.invalid} />}\n                        </ListItemIcon>\n                        <ListItemText\n                            className={localStyles.fontSize}\n                            primary={req[1].description}\n                        />\n                    </ListItem>\n                )\n            })}\n        </List>\n    )\n}\nconst mapStateToProps = (state) => {\n    return {\n        loginState: state.loginState.currentState,\n    };\n};\n\nconst mapDispatchToProps = {\n    updateLoginState,\n};\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\n","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/Views/PageContainer/PageContainer.js",["179","180","181"],"/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/Reducers/loginReducer.js",[],"/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/Reducers/appStateReducer.js",[],"/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/components/Authentication/TextFieldStartAdornment.js",["182"],"import React from 'react';\nimport { Grid, TextField } from '@mui/material';\nimport { InputAdornment } from '@mui/material';\nimport { makeStyles, withStyles } from '@mui/styles';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        fontSize: \"1rem\"\n    },\n    form: {\n        '& .MuiOutlinedInput-root': {\n            '& fieldset': {\n                borderRadius: 0,\n            },\n        },\n    },\n    contained: {\n        marginLeft: 0,\n    }\n}));\n\nexport default function TextFieldStartAdornment(props) {\n    const { startIcon, placeholder, ...other } = props;\n    const classes = useStyles();\n\n    return (\n        <Grid container item direction={\"column\"} className={`input-box ${!startIcon && classes.form}`}>\n            <TextField\n                {...other}\n                required\n                placeholder={placeholder}\n                fullWidth={true}\n                variant=\"outlined\"\n                FormHelperTextProps={{\n                    classes: {\n                        root: classes.root,\n                        contained: classes.contained,\n                    }\n                }}\n                InputProps={{\n                    startAdornment: startIcon && (\n                        <InputAdornment position=\"start\" disablePointerEvents>\n                            {startIcon}\n                        </InputAdornment>\n                    )\n                }}\n                size={startIcon ? \"medium\" : \"small\"}\n            />\n        </Grid>\n    );\n};","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/Actions/menuActions.js",[],"/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/components/Navbar/Navbar.js",["183","184","185","186","187","188"],"/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/Views/Pages/error404.js",[],"/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/Views/Pages/AlternativeSpeciesPage.js",["189","190","191","192","193","194"],"/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/Views/Pages/InvasiveSpeciesPage.js",["195","196","197","198","199","200","201"],"/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/Views/Pages/pl@ntNet.js",["202","203","204","205","206","207","208","209","210","211","212"],"import React, { useState, useCallback, useEffect, useRef } from 'react';\nimport axios from 'axios';\nimport { saveAs } from 'file-saver';\nimport { webscrapeBCInvasive, webscrapeONInvasive } from '../../functions/webscrape';\nimport { webscrapeWikipedia } from '../../functions/webscrapeWiki';\nimport { webscrapeInvasiveSpecies, flagedSpeciesToPlanetAPI, fullIntegrationOfFlaggingSpecies, dataPipelineForDB } from '../../functions/pipeline';\n\n// const FormData = require('form-data');\nimport { speciesDataToJSON } from '../../functions/speciesToJSON';\n\nfunction PlantNet() {\n    const [selectedLanguage, setSelectedLanguage] = useState('en');\n    const [selectedLocation, setSelectedLocation] = useState('ON');\n    const [selectedFile, setSelectedFile] = useState(null);\n    const [modelResult, setModelResult] = useState(undefined);\n    const [modelObjResult, setModelResultObj] = useState([]);\n    const [numImages, setNumImages] = useState(0);\n    const [isFileSaved, setIsFileSaved] = useState(false);\n    const formRef = useRef(null);\n\n    // Handle for submiting the form\n    const handleSubmit = (event) => {\n        event.preventDefault();\n\n        const formData = new FormData(formRef.current);\n        const formDataPlantNet = new FormData();\n        let acceptedImage = 0;\n\n        // Add all organ into one\n        for (let i = 0; i <= numImages; i++) {\n            const image = formData.get('images' + i.toString());\n            const organ = formData.get('organs' + i.toString());\n\n            if (image && image.name) {\n                formDataPlantNet.append('organs', organ);\n                formDataPlantNet.append('images', image);\n\n                console.log(\"organs: \", organ, \"images:\", image);\n                acceptedImage++;\n            }\n        }\n\n        // Submit form to Pl@ntNet API\n        const project = 'all';\n        const url = 'https://my-api.plantnet.org/v2/identify/' + project + `?api-key=${process.env.REACT_APP_PLANTNET_API_KEY}&include-related-images=true&lang=${selectedLanguage}`;\n        axios.post(url, formDataPlantNet, {\n            headers: {\n                'Content-Type': `multipart/form-data`\n            }\n        })\n            .then((response) => {\n                // Handle success, e.g., show a success message to the user.\n                console.log('File uploaded successfully: ', response.data);\n                setModelResultObj(response.data);\n                setModelResult(JSON.stringify(response.data, null, 2));\n            })\n            .catch((error) => {\n                const keyWord = \"not found\";\n                if (error.response.status === 404 && error.response.data.message.toString().includes(keyWord)) {\n                    setModelResult(error.response.data.message.toString());\n                }\n                console.error('Error uploading file:', error);\n                // Handle error, e.g., show an error message to the user.\n            });\n    }\n\n    const handleLanguageSelection = (event) => {\n        console.log(\"language: \", event.target.value)\n        setSelectedLanguage(event.target.value);\n    }\n\n    const handleLocationSelection = (event) => {\n        console.log(\"location: \", event.target.value)\n        setSelectedLocation(event.target.value);\n    }\n\n    // get top 3 results\n    const getSpeciesResultInfo = useCallback(async (results) => {\n        let speciesInfoArray = [];\n        let count = 0;\n\n        for (let i = 0; i < results.length; i++) {\n            if (count < 3) {\n                let res = results[i];\n                let commonName = res.species.commonNames;\n                let scientificName = res.species.scientificNameWithoutAuthor;\n                let score = res.score;\n                let info = await speciesDataToJSON(commonName, scientificName, score, selectedLocation);\n                speciesInfoArray.push(info);\n                count++;\n                console.log(speciesInfoArray.length);\n            } else {\n                break;\n            }\n        }\n        return speciesInfoArray;\n    }, [selectedLocation]);\n\n\n    useEffect(() => {\n        // mapInvasiveToAlternativeBC();\n        // mapInvasiveToAlternativeON();\n\n        // fullIntegrationOfFlaggingSpecies();\n        // draftFunction();\n\n        // getAlternativePlantsForDB(\"clematis_x_jackmanii\");\n\n        // dataPipelineForDB();\n\n        // TESTING WEBSCRAPE\n        // webscrapeWikipedia(\"perovskia_atriplicifolia\");\n        // webscrapeWikipedia(\"rose\");\n        // webscrapeWikipedia(\"Hemerocallis_fulva\");\n        // webscrapeWikipedia(\"clematis_x_jackmanii\");\n        // webscrapeWikipedia(\"bamboo\");\n\n        // const input = 'gypsophila_paniculata';\n\n        // const capitalizeWords = (str) => {\n        //     return str.split('_').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ');\n        // };\n\n        // const formattedString = capitalizeWords(input);\n        // console.log(formattedString); // Output: Gypsophila Paniculata\n\n        // const fetchData = async () => {\n        //     try {\n        //         if (!isFileSaved && modelObjResult && modelObjResult.results) {\n        //             const speciesInfoArray = await getSpeciesResultInfo(modelObjResult.results);\n        //             console.log(\"species info: \", speciesInfoArray);\n\n        //             if (speciesInfoArray.length === Math.min(modelObjResult.results.length, 3)) {\n        //                 const data = JSON.stringify(speciesInfoArray, null, 2);\n        //                 const blob = new Blob([data], { type: 'application/json' });\n\n        //                 const fileName = 'speciesData.json';\n\n        //                 saveAs(blob, fileName);\n        //                 setIsFileSaved(true);\n        //             }\n        //         }\n        //     } catch (error) {\n        //         console.log(\"error getting species info: \", error);\n        //     }\n        // };\n        // fetchData();\n    }, [isFileSaved, modelObjResult, getSpeciesResultInfo, selectedLocation]);\n\n\n    return (\n        <React.Fragment>\n            <p>Experiment on Pl@ntNet</p>\n            <h1>Image Upload</h1>\n            <div>\n                <select onChange={handleLanguageSelection}>\n                    <option value=\"en\">-- Choose a language --</option>\n                    <option value=\"en\">English</option>\n                    <option value=\"fr\">French</option>\n                    <option value=\"de\">German</option>\n                </select>\n\n                <select onChange={handleLocationSelection}>\n                    <option>-- Choose a Location --</option>\n                    <option>BC</option>\n                    <option>ON</option>\n                </select>\n            </div>\n\n            <div>\n                {numImages < 4 && <button onClick={() => { setNumImages(numImages + 1) }}>Add more organ</button>}\n            </div>\n\n            <form ref={formRef} onSubmit={handleSubmit}>\n                {[...Array(numImages).keys()].map((index) => (\n                    <div key={index}>\n                        <input type=\"file\" accept=\"image/*\" name={`images${index}`} />\n\n                        <select name={`organs${index}`}>\n                            <option value=\"auto\">-- Choose an organ --</option>\n                            <option value=\"flower\">Flower</option>\n                            <option value=\"fruit\">Fruit</option>\n                            <option value=\"leaf\">Leaf</option>\n                            <option value=\"bark\">Bark</option>\n                            <option value=\"auto\">Auto</option>\n                        </select>\n                    </div>\n                ))}\n                <button type=\"submit\">Submit</button>\n            </form>\n\n            <div style={{\n                display: 'flex',\n                flexDirection: 'column',\n                alignItems: 'center'\n            }}>\n                {selectedFile && <img src={URL.createObjectURL(selectedFile)} alt=\"\" style={{\n                    maxWidth: '500px',\n                    padding: '2%'\n                }} />}\n\n                {modelResult && (\n                    <pre style={{ textAlign: 'left' }}>{modelResult}</pre>\n                )}\n            </div>\n        </React.Fragment>\n    );\n};\n\nconst FormDataExport = typeof window.self === 'object' ? window.self.FormData : window.FormData;\n\nexport { FormDataExport, PlantNet };","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/Views/Pages/RegionsPage.js",["213","214","215","216","217"],"/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/Views/Pages/downloadWebscrap.js",["218","219","220","221","222"],"import React, { useState, useCallback, useEffect, useRef } from 'react';\n\n// Import components\nimport { webscrapeInvasiveSpecies } from '../../functions/pipeline';\nimport { dataPipelineForDB } from '../../functions/pipeline';\nimport { getAlternativePlantsForDB } from '../../functions/alternativePlants';\n\n\nexport default function DownloadWebscrap() {\n    const saveToFile = (data, filename) => {\n        const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });\n        const link = document.createElement('a');\n        link.href = URL.createObjectURL(blob);\n        link.download = filename; // 'webscrapedInvasive.json';\n        link.click();\n        URL.revokeObjectURL(link.href);\n    };\n\n    useEffect(() => {\n        const getData = async () => {\n            const data = await dataPipelineForDB();\n            saveToFile(data.regions_tb, \"regions_tb.json\");\n            saveToFile(data.invasive_species_tb, \"invasive_species_tb.json\");\n            saveToFile(data.alternative_species_tb, \"alternative_species_tb.json\");\n            saveToFile(data.flaggedSpecies, \"flaggedSpecies.json\");\n            \n            console.log(\"Data ready!\");\n\n        }\n\n        getData();\n    }, []);\n\n    return (\n        <p>Webscrape and prapare a file.</p>\n    );\n}\n","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/Views/Pages/Theme.js",[],"/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/components/SearchComponent.js",["223"],"/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/components/LocationFilterComponent.js",[],"/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/components/PaginationComponent.js",[],"/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/functions/speciesToJSON.js",[],"/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/functions/alternativePlants.js",[],"/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/functions/helperFunctions.js",[],"/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/functions/pipeline.js",["224"],"import { webscrapeBCInvasive, webscrapeONInvasive } from \"./webscrape\";\nimport axios from 'axios';\nimport { mapInvasiveToAlternativeBC, mapInvasiveToAlternativeON, getAlternativePlantsForDB } from \"./alternativePlants\"\n\nconst webscrapeInvasiveSpecies = async () => {\n    const region = [];\n    const res = await Promise.all([webscrapeBCInvasive(), webscrapeONInvasive()]);\n\n    res.forEach((result) => {\n        if (result.BCInvasiveSpeciesPlants) {\n            region.push({\n                region_code_name: \"BC\",\n                region_fullname: \"british_columbia\",\n                country_fullname: \"canada\",\n                geographic_coordinate: \"(53.726669, -127.647621)\",\n                invasive_species_list: result.BCInvasiveSpeciesPlants\n            });\n        } else if (result.ONInvasiveSpeciesPlants) {\n            region.push({\n                region_code_name: \"ON\",\n                region_fullname: \"ontario\",\n                country_fullname: \"canada\",\n                geographic_coordinate: \"(50.000000, -85.000000)\",\n                invasive_species_list: result.ONInvasiveSpeciesPlants\n            });\n        }\n    });\n\n    // Map the alternative species in\n    await mapInvasiveToAlternative(region);\n\n    return region;\n}\n\n// returns list of scientific names of invasive BC species\nconst getInvasiveSpeciesScientificNamesBC = async () => {\n    let region = await webscrapeInvasiveSpecies();\n    return await getInvasiveSpeciesScientificNames(region[0]);\n};\n\n// returns list of scientific names of invasive ON species\nconst getInvasiveSpeciesScientificNamesON = async () => {\n    let region = await webscrapeInvasiveSpecies();\n    let res = await getInvasiveSpeciesScientificNames(region[1]);\n    let moreONInvasive = await mapInvasiveToAlternativeON();\n\n    const moreONKeys = Object.keys(moreONInvasive);\n\n    for (const key of moreONKeys) {\n        if (!res.includes(key)) {\n            res.push(key);\n        }\n    }\n\n    return res;\n};\n\n// helper function to get scientific names of invasive species\nconst getInvasiveSpeciesScientificNames = async (region) => {\n    const scientific_names = [];\n\n    for (const species of region.invasiveSpeciesList) {\n        if (species && species.scientificName) {\n            const formattedName = species.scientificName.toLowerCase().replace(/ /g, '_');\n            scientific_names.push(formattedName);\n        } else {\n            console.log(\"Scientific name not found for:\", species);\n        }\n    }\n    return scientific_names;\n};\n\n// helper function to get list of alternative species\nconst getListOfAlternativeSpecies = (speciesDataXRegion)=>{\n    const listAlternativeSpecies = new Set();\n    speciesDataXRegion.forEach((region)=>{\n        region.invasive_species_list.forEach((species)=>{\n            if(species.alternative_species.length > 0) \n                species.alternative_species.forEach(speciesItem => {\n                    listAlternativeSpecies.add(speciesItem);\n                });              \n        });\n    });\n\n    return Array.from(listAlternativeSpecies);\n}\n\n// checks if species is invasive given location\nconst isInvasive = async (scientificName, location) => {\n    scientificName = scientificName.toLowerCase().replace(/ /g, '_');\n    console.log(\"isInvasive: \", scientificName);\n\n    if (location === \"BC\") {\n        let invasiveListBC = await getInvasiveSpeciesScientificNamesBC();\n        console.log(\"BC invasive list: \", invasiveListBC);\n        return invasiveListBC.includes(scientificName);\n    } else if (location === \"ON\") {\n        let invasiveListON = await getInvasiveSpeciesScientificNamesON();\n        console.log(\"ON invasive list: \", invasiveListON);\n        return invasiveListON.includes(scientificName);\n    }\n};\n\n/**\n * \n * @param speciesList - list of species to check against PlantNet API require to follow Invasive Species data structure\n * @returns - list of species that are invalid and species that could not detect by PlantNet API asynchronously\n */\nconst flagedSpeciesToPlanetAPI = async (speciesList) => {\n    const speciesFlagged = [];\n\n    // Make request to Pl@ntNet API for list of species\n    const url = `https://my-api.plantnet.org/v2/species?api-key=${process.env.REACT_APP_PLANTNET_API_KEY}`;\n    await axios.get(url)\n        .then((response) => {\n            speciesList.map((species) => {\n                if(species.scientific_name.length > 0){\n\n                    // Check scientific name against Pl@ntNet API\n                    for(let i = 0; i < species.scientific_name.length; i++){\n                        if(!response.data.find(s => s.scientificNameWithoutAuthor.toLowerCase().includes(species.scientific_name[i].replace(/_/g, ' ').trim()))){\n                            speciesFlagged.push(species);\n                            break;\n                        }\n                    }\n                } else {\n                    speciesFlagged.push(species);\n                }\n            });\n        })\n        .catch((error) => {\n            console.error('Error requesting species list:', error);\n            // Handle error, e.g., show an error message to the user.\n        });\n\n    return speciesFlagged;\n}\n\n// Populate invasive species with its alternatives\nconst mapInvasiveToAlternative = async (speciesDataXRegion)=>{\n    // Get list of alternative  speices\n    const alternativeSpeciesList = await Promise.all([mapInvasiveToAlternativeBC(), mapInvasiveToAlternativeON()]);\n    speciesDataXRegion.forEach((region)=>{\n        const alternativeSpeciesList_ = (region.region_code_name === \"BC\") ? alternativeSpeciesList[0] : alternativeSpeciesList[1];\n        region.invasive_species_list.forEach((species)=>{\n            for(let i = 0; i < species.scientific_name.length; i++){\n                const modifiedSciName = species.scientific_name[i].toLowerCase().replace(/\\s+/g, '_').trim();\n                const alternative = alternativeSpeciesList_[modifiedSciName];\n\n                if(alternative){\n                    species.alternative_species = alternative;\n                    break;\n                }\n            }\n        });\n    });\n}\n\n// Full integration of flagging species\nconst fullIntegrationOfFlaggingSpecies = async (speciesData)=>{\n    const flaggedSpecies = [];\n    // const speciesData = await webscrapeInvasiveSpecies();\n\n    const flaggedRegions = [];\n    speciesData.forEach((region)=>{\n        flaggedRegions.push(flagedSpeciesToPlanetAPI(region.invasive_species_list));\n    });\n\n    const flagged = await Promise.all(flaggedRegions);\n    flagged.forEach((data) => {\n        flaggedSpecies.push(...data);\n    });\n\n    console.log(\"Flagged species:\", flaggedSpecies);\n\n    return flaggedSpecies;\n}\n\n// Return an array of records for alternative species\nconst getAllAlternativePlantsForDB = async (speciesDataXRegion) => {\n    try {\n        const listAlternativeSpecies = await getListOfAlternativeSpecies(speciesDataXRegion);\n        const requestCalls = [];\n\n        listAlternativeSpecies.forEach(async (alternativeSpecies) => {\n            requestCalls.push(getAlternativePlantsForDB(alternativeSpecies));\n        });\n\n        const listAlternativeSpeciesForDB = await Promise.all(requestCalls);\n\n        return listAlternativeSpeciesForDB;\n    } catch (error) {\n        console.log(error);\n    }\n\n    return [];\n}\n\nconst dataPipelineForDB = async () => {\n    const regions_tb = [];\n    const invasive_species_tb = [];\n    const alternative_species_tb = [];\n\n    // Get all data across region\n    const speciesDataXRegion = await webscrapeInvasiveSpecies();\n    const flaggedSpecies = await fullIntegrationOfFlaggingSpecies(speciesDataXRegion);\n\n    speciesDataXRegion.forEach((region) => {\n        const scienceName = region.invasive_species_list.map((species)=> species.scientific_name[0]);\n\n        regions_tb.push({\n            region_code_name: region.region_code_name,\n            region_fullname: region.region_fullname,\n            country_fullname: region.country_fullname,\n            geographic_coordinate: region.geographic_coordinate,\n            invasive_species_list: scienceName\n        });\n\n        invasive_species_tb.push(...region.invasive_species_list);\n    });\n\n    // Get all alternative species\n    const listAlternativeSpeciesForDB = await getAllAlternativePlantsForDB(speciesDataXRegion);\n    alternative_species_tb.push(...listAlternativeSpeciesForDB);\n\n    console.log(\"regions_tb: \", regions_tb);\n    console.log(\"invasive_species_tb: \", invasive_species_tb);\n    console.log(\"alternative_species_tb: \", alternative_species_tb);\n\n    // The flagged species should not be added, they need to be fixed first.\n    console.log(\"Flagged species: \", flaggedSpecies);\n\n    return {regions_tb, invasive_species_tb, alternative_species_tb, flaggedSpecies};\n}\n\nexport {\n    webscrapeInvasiveSpecies, flagedSpeciesToPlanetAPI,\n    getInvasiveSpeciesScientificNamesBC,\n    getInvasiveSpeciesScientificNamesON,\n    isInvasive,\n    fullIntegrationOfFlaggingSpecies,\n    dataPipelineForDB\n};","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/dialogs/AddRegionDialog.js",["225","226","227","228","229"],"/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/dialogs/EditRegionsDialog.js",[],"/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/dialogs/ConfirmDeleteDialog.js",[],"/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/functions/webscrapeWiki.js",[],"/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/functions/webscrape.js",["230","231","232"],"import * as cheerio from \"cheerio\";\nimport axios from \"axios\";\nimport { jsonrepair } from \"jsonrepair\";\n// import { getDocument } from \"pdfjs-dist\";\n// import \"pdfjs-dist/build/pdf.worker.entry\"; // Attach pdfJsworker to window\n\n// List of website to links to invasive species website\nconst BC_INVASIVE_URL = \"https://bcinvasives.ca/take-action/identify/\";\nconst ON_INVASIVE_URL = \"https://www.ontarioinvasiveplants.ca/invasive-plants/species/\";\nconst ON_INVASIVE_URL_AQUATIC_PLANTS = \"https://www.invadingspecies.com/invaders/aquatic-plants/\";\nconst ON_INVASIVE_URL_TERRESTRIAL_PLANTS = \"https://www.invadingspecies.com/invaders/terrestrial-plants/\";\n\n/**\n *\n * This function only webscrape on the https://bcinvasives.ca/ and collect the following:\n *  - List of invasive species\n *  - Each species about section\n *  - How to identrify section\n */\nconst webscrapeBCInvasive = async () => {\n\t// Get the list of invasive species\n\tconst speciesList = await getListOfSpeciesFromBCInvasive(BC_INVASIVE_URL);\n\n  // Go to each subpage and webscrapee the about section and how to identify section\n  // .invansive-about\n  // .invasive-identify > .font-base\n  /** We might not need this **/\n//   Promise.all(\n//     speciesList.BCInvasiveSpeciesPlants.map(async (species, index) => {\n//       if (species.links.length > 0)\n//         axios\n//           .get(species.links[0])\n//           .then(async (response) => {\n//             const $ = await cheerio.load(response.data);\n\n//             // Get About section of the species\n//             let aboutSection = \"\";\n//             await $(\"div.invansive-about >p\").each((i, ele) => {\n//               aboutSection += $(ele).text() + \"\\n\";\n//             });\n\n//             // Get How to identify section of the species\n//             let howToIdentifySection = \"\";\n//             await $(\"div.invasive-identify div.font-base > p\").each(\n//               (i, ele) => {\n//                 howToIdentifySection += $(ele).text() + \"\\n\";\n//               }\n//             );\n\n//             speciesList.BCInvasiveSpeciesPlants[index].info.push({\n//               header: \"About\",\n//               description: aboutSection.trim(),\n//             });\n\n//             speciesList.BCInvasiveSpeciesPlants[index].info.push({\n//               header: \"How To Identify\",\n//               description: howToIdentifySection.trim(),\n//             });\n//           })\n//           .catch((err) => {\n//             console.log(err);\n//           });\n//     })\n//   );\n\n\treturn speciesList;\n};\n\n// Helper Function to get a list of invasive species\nconst getListOfSpeciesFromBCInvasive = async (url) => {\n  const output = {\n    BCInvasiveSpeciesPlants: [],\n  };\n\n\t// Scraping list of all species\n\tawait axios\n\t\t.get(url)\n\t\t.then(async (response) => {\n\t\t\tconst $ = await cheerio.load(response.data);\n\n\t\t\t// Get species links\n\t\t\tconst speciesLinks = {};\n\t\t\tawait $(\"header.invasive-header > a\").each((i, ele) => {\n\t\t\t\tconst link = $(ele).attr(\"href\");\n\t\t\t\tconst scienceName = $(ele).children(\"div\").text();\n\n\t\t\t\tspeciesLinks[scienceName] = link;\n\t\t\t});\n\n\t\t\t// Get species data summary\n\t\t\tconst regex =\n\t\t\t\t/window\\.__invasivesList\\.push\\(JSON\\.parse\\(\\'(.*?)\\'\\)\\);/;\n\t\t\tawait $('script:contains(\"window.__invasivesList.push\")').each(\n\t\t\t\t(i, ele) => {\n\t\t\t\t\tconst stringFormat = $(ele).text();\n\t\t\t\t\tconst match = stringFormat.match(regex);\n\n\t\t\t\t\tif (match && match[1]) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t// Repaire JSON formate before parse it.\n\t\t\t\t\t\t\tconst repairedJSON = jsonrepair(match[1]);\n\t\t\t\t\t\t\tconst paredJSON = JSON.parse(repairedJSON);\n\n\t\t\t\t\t\t\t// Add link to species\n\t\t\t\t\t\t\tparedJSON.link = speciesLinks[paredJSON.species];\n\n\t\t\t\t\t\t\t\n\n              if (paredJSON.animal_type === \"\") {\n\t\t\t\t// Fix scientific name if needed\n\t\t\t\tconst sciName = paredJSON.species.split('&').map(name => name.toLowerCase().replace(/ /g, '_').trim());\n\n                output.BCInvasiveSpeciesPlants.push({\n                  scientific_name: sciName,\n                  resource_links: [paredJSON.link.trim()],\n                  species_description: paredJSON.summary.trim(),\n                  alternative_species: [],\n\t\t\t\t  region_id: \"BC\"\n                });\n              }\n            } catch (error) {\n              console.log(error);\n              return;\n            }\n          }\n        }\n      );\n    })\n    .catch((err) => {\n      console.log(err);\n    });\n\n\treturn output;\n};\n\n/**\n *\n * This function only webscrape on the https://www.ontarioinvasiveplants.ca/ and collect the following:\n *  - List of invasive species\n *  - Each species about section\n *  - Link to PDFs ...\n */\n// const webscrapeONInvasive_ONInvasivePlantCouncil = async () => {\n// \t// Get the list of invasive species\n// \tconst speciesList = await getListOfSpeciesFromONInvasive(ON_INVASIVE_URL);\n\n// \t// Configuration on web scraping\n// \tconst scientificName_FontSize = 14;\n// \tconst torlerance = 1;\n// \tconst stringIndicatorForDocument = \"for more information\";\n// \tconst documentNameToLook = \"best management practices\";\n\n// \tawait Promise.all(\n// \t\tspeciesList.ONInvasiveSpeciesPlants.map(async (specie, index) => {\n// \t\t\t// Go to each subpage and webscrapee the about section and references on the species\n// \t\t\t// Get about section of the species and related documents\n// \t\t\tlet aboutSection = \"\";\n// \t\t\tconst relatedDocuments = [];\n// \t\t\tawait axios\n// \t\t\t\t.get(specie.link)\n// \t\t\t\t.then(async (response) => {\n// \t\t\t\t\tconst $ = await cheerio.load(response.data);\n\n// \t\t\t\t\t// web scraping data for about section and related documents\n// \t\t\t\t\tawait $(\"div.entry-content\")\n// \t\t\t\t\t\t.contents()\n// \t\t\t\t\t\t.each((i, ele) => {\n// \t\t\t\t\t\t\tif ($(ele).is(\"p\")) {\n// \t\t\t\t\t\t\t\t// Potential about section\n// \t\t\t\t\t\t\t\tconst pString = $(ele).text();\n\n// \t\t\t\t\t\t\t\t// Regx for this format to get scientific name in the middle\n// \t\t\t\t\t\t\t\tif (\n// \t\t\t\t\t\t\t\t\t!pString.toLowerCase().includes(stringIndicatorForDocument) &&\n// \t\t\t\t\t\t\t\t\t!pString.toLowerCase().includes(\"download\")\n// \t\t\t\t\t\t\t\t) {\n// \t\t\t\t\t\t\t\t\taboutSection += $(ele).text();\n// \t\t\t\t\t\t\t\t}\n// \t\t\t\t\t\t\t} else if ($(ele).is(\"ul\")) {\n// \t\t\t\t\t\t\t\t// Potential block for list of related about section\n// \t\t\t\t\t\t\t\t$(ele)\n// \t\t\t\t\t\t\t\t\t.children(\"li\")\n// \t\t\t\t\t\t\t\t\t.each((i, ele) => {\n// \t\t\t\t\t\t\t\t\t\taboutSection += \"\\n* \" + $(ele).text();\n// \t\t\t\t\t\t\t\t\t});\n// \t\t\t\t\t\t\t} else if ($(ele).is(\"div\")) {\n// \t\t\t\t\t\t\t\t// Potential block for PDF\n// \t\t\t\t\t\t\t\t$(ele)\n// \t\t\t\t\t\t\t\t\t.children(\"a\")\n// \t\t\t\t\t\t\t\t\t.each((i, ele) => {\n// \t\t\t\t\t\t\t\t\t\tif (!$(ele).text().toLowerCase().includes(\"download\")) {\n// \t\t\t\t\t\t\t\t\t\t\trelatedDocuments.push({\n// \t\t\t\t\t\t\t\t\t\t\t\ttitle: $(ele).text(),\n// \t\t\t\t\t\t\t\t\t\t\t\tlink: $(ele).attr(\"href\"),\n// \t\t\t\t\t\t\t\t\t\t\t});\n// \t\t\t\t\t\t\t\t\t\t}\n// \t\t\t\t\t\t\t\t\t});\n// \t\t\t\t\t\t\t}\n// \t\t\t\t\t\t});\n// \t\t\t\t})\n// \t\t\t\t.catch((err) => {\n// \t\t\t\t\tconsole.log(err);\n// \t\t\t\t});\n\n// \t\t\t// web scraping data for scientific name and common name based on front size\n// \t\t\tlet scienceName = \"\";\n// \t\t\tif (relatedDocuments.length !== 0) {\n// \t\t\t\t// Select the right document\n// \t\t\t\tlet pdfURL = undefined;\n// \t\t\t\trelatedDocuments.forEach((ele) => {\n// \t\t\t\t\tif (ele.title.toLowerCase().includes(documentNameToLook)) {\n// \t\t\t\t\t\tpdfURL = ele.link;\n// \t\t\t\t\t}\n// \t\t\t\t});\n\n// \t\t\t\t// Just use the first one if no PDF is found.\n// \t\t\t\tif (pdfURL === undefined) {\n// \t\t\t\t\tpdfURL = relatedDocuments[0].link;\n// \t\t\t\t}\n\n// \t\t\t\t// Request PDF document\n// \t\t\t\tawait axios\n// \t\t\t\t\t.get(pdfURL, { responseType: \"arraybuffer\" })\n// \t\t\t\t\t.then(async (response) => {\n// \t\t\t\t\t\tconst pdf = await getDocument({ data: response.data }).promise;\n// \t\t\t\t\t\tconst firstPage = await pdf.getPage(1);\n// \t\t\t\t\t\tconst content = await firstPage.getTextContent();\n\n// \t\t\t\t\t\tcontent.items.forEach((res, index) => {\n// \t\t\t\t\t\t\tif (\n// \t\t\t\t\t\t\t\tscientificName_FontSize - torlerance <= res.height &&\n// \t\t\t\t\t\t\t\tres.height <= scientificName_FontSize + torlerance\n// \t\t\t\t\t\t\t) {\n// \t\t\t\t\t\t\t\t// Assume species name uses the Binomial nomenclature which the common naming convention.\n// \t\t\t\t\t\t\t\tconst potentialScientificName = res.str\n// \t\t\t\t\t\t\t\t\t.trim()\n// \t\t\t\t\t\t\t\t\t.replace(/\\(|\\)/g, \"\");\n// \t\t\t\t\t\t\t\tif (potentialScientificName.split(\" \").length === 2) {\n// \t\t\t\t\t\t\t\t\tscienceName = potentialScientificName;\n// \t\t\t\t\t\t\t\t}\n// \t\t\t\t\t\t\t}\n// \t\t\t\t\t\t});\n// \t\t\t\t\t})\n// \t\t\t\t\t.catch((err) => {\n// \t\t\t\t\t\tconsole.log(err);\n// \t\t\t\t\t});\n// \t\t\t}\n\n// \t\t\t// Assign data to global variables\n// \t\t\tspeciesList.ONInvasiveSpeciesPlants[index].aboutSection = aboutSection;\n// \t\t\tif (relatedDocuments)\n// \t\t\t\tspeciesList.ONInvasiveSpeciesPlants[index].relatedDocuments =\n// \t\t\t\t\trelatedDocuments;\n// \t\t\tif (scienceName !== \"\") {\n// \t\t\t\tconst parsedScienceName = scienceName.trim().replace(/\\(|\\)/g, \"\");\n// \t\t\t\tspeciesList.ONInvasiveSpeciesPlants[index].species = parsedScienceName;\n// \t\t\t}\n// \t\t})\n// \t);\n\n// \t// Grabing other data\n// \t// Library to get data from wiki: https://github.com/Requarks/wiki\n\n// \tconsole.log(speciesList);\n// };\n\n// Helper Function to get a list of invasive species\n// const getListOfSpeciesFromONInvasive_ONInvasivePlantCouncil = async (url) => {\n//   const output = {\n//     ONInvasiveSpeciesPlants: [],\n//   };\n\n// \t// Scraping list of all species\n// \tawait axios\n// \t\t.get(url)\n// \t\t.then(async (response) => {\n// \t\t\tconst $ = await cheerio.load(response.data);\n\n// \t\t\t// Get species links\n// \t\t\tawait $(\"div.entry-content li > a\").each((i, ele) => {\n// \t\t\t\tconst link = $(ele).attr(\"href\");\n// \t\t\t\tconst commonName = $(ele).text();\n// \t\t\t\toutput.ONInvasiveSpeciesPlants.push({\n// \t\t\t\t\tname: commonName,\n// \t\t\t\t\tlink: link,\n// \t\t\t\t});\n// \t\t\t});\n// \t\t})\n// \t\t.catch((err) => {\n// \t\t\tconsole.log(err);\n// \t\t});\n\n// \treturn output;\n// };\n\n/**\n *\n * This function only webscrap on the https://www.ontarioinvasiveplants.ca/ and collect the following:\n *  - List of invasive species\n *  - Each species about section\n *  - Link to PDFs ...\n */\nconst webscrapeONInvasive = async () => {\n\tconst speciesList = {\n\t\tONInvasiveSpeciesPlants: [],\n\t};\n\tawait getListOfSpeciesFromONInvasive(speciesList, ON_INVASIVE_URL_AQUATIC_PLANTS);\n\tawait getListOfSpeciesFromONInvasive(speciesList, ON_INVASIVE_URL_TERRESTRIAL_PLANTS);\n\n\t// Go to each subpage and webscrape the about section and how to identify section\n\t// .invasive-about\n\t// .invasive-identify > .font-base\n\tawait Promise.all(speciesList.ONInvasiveSpeciesPlants.map(async (specie, index) => {\n\t\tif(specie.resource_links.length > 0) {\n\t\t\ttry {\n\t\t\t\tconst response = await axios.get(specie.resource_links[0]);\n\t\t\t\tconst $ = await cheerio.load(response.data);\n\n\t\t\t\tconst scienceName = $(\"div.header-content span\").text();\n\n\t\t\t\t// Fix scientific name if needed\n\t\t\t\tconst sciName = scienceName.split('&').map(name => name.toLowerCase().replace(/ /g, '_').trim());\n\n\t\t\t\t// Grab other sections\t\t\t\t\n\t\t\t\tconst sectionList = $(\"div.et_pb_text_inner\");\n\t\t\n\t\t\t\tlet backgroundInfo = \"\";\n\t\t\t\tlet impactOf = \"\";\n\n\t\t\t\t// Searching for background info and impact of the species\n\t\t\t\tsectionList.each((i, ele) => {\n\t\t\t\t\tconst header = $(ele).children(\"h2\").text();\n\n\t\t\t\t\tif(header.toLowerCase().includes(\"background\")){\n\t\t\t\t\t\tbackgroundInfo = $(ele).text();\n\t\t\t\t\t} else if(header.toLowerCase().includes(\"impacts of\")){\n\t\t\t\t\t\timpactOf = $(ele).text();\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\t// Load data into speciesList\n\t\t\t\tspeciesList.ONInvasiveSpeciesPlants[index].scientific_name = sciName;\n\t\t\t\tspeciesList.ONInvasiveSpeciesPlants[index].species_description = (impactOf !== \"\") ? impactOf : backgroundInfo;\n\t\t\t} catch (err) {\n\t\t\t\tconsole.log(err);\n\t\t\t}\n\t\t}\n\t}));\n\n\treturn speciesList;\n};\n\n\nconst getListOfSpeciesFromONInvasive = async (output, url) => {\n  // Scraping list of all species\n  await axios\n    .get(url)\n    .then(async (response) => {\n      const $ = await cheerio.load(response.data);\n\n\t\t// Get species links\n\t\tawait $('div[data-id=\"pt-cv-page-1\"] > div').each((i, ele) => {\n\t\t\t// There are a list of child of div\n\t\t\t// Each child has div > div a h3\n\n\t\t\tconst child = $(ele).children(\"div\");\n\t\t\tconst link = $(child).children(\"a\").attr(\"href\");\n\n\t\t\toutput.ONInvasiveSpeciesPlants.push({\n\t\t\t\tscientific_name: undefined,\n\t\t\t\tresource_links: [link.trim()],\n\t\t\t\tspecies_description: undefined,\n\t\t\t\talternative_species: [],\n\t\t\t\tregion_id: \"ON\"\n\t\t\t});\n      });\n    })\n    .catch((err) => {\n      console.log(err);\n    });\n};\n\nexport { webscrapeBCInvasive, webscrapeONInvasive};","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/functions/RegionMap.js",[],"/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/components/AlertComponent.js",[],"/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/components/SnackbarComponent.js",[],"/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/components/WarningComponent.js",[],"/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/dialogs/AddInvasiveSpeciesDialog.js",[],"/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/dialogs/EditInvasiveSpeciesDialog.js",[],"/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/dialogs/AddAlternativeSpeciesDialog.js",[],"/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/dialogs/EditAlternativeSpeciesDialog.js",[],{"ruleId":"233","replacedBy":"234"},{"ruleId":"235","replacedBy":"236"},{"ruleId":"237","severity":1,"message":"238","line":18,"column":6,"nodeType":"239","endLine":18,"endColumn":8,"suggestions":"240"},{"ruleId":"241","severity":1,"message":"242","line":1,"column":10,"nodeType":"243","messageId":"244","endLine":1,"endColumn":24},{"ruleId":"241","severity":1,"message":"245","line":16,"column":9,"nodeType":"243","messageId":"244","endLine":16,"endColumn":16},{"ruleId":"237","severity":1,"message":"246","line":142,"column":8,"nodeType":"239","endLine":142,"endColumn":10,"suggestions":"247"},{"ruleId":"248","severity":1,"message":"249","line":274,"column":77,"nodeType":"250","messageId":"251","endLine":274,"endColumn":79},{"ruleId":"252","severity":1,"message":"253","line":282,"column":21,"nodeType":"254","messageId":"255","endLine":282,"endColumn":87},{"ruleId":"256","severity":1,"message":"257","line":454,"column":54,"nodeType":"258","endLine":454,"endColumn":143},{"ruleId":"241","severity":1,"message":"259","line":56,"column":13,"nodeType":"243","messageId":"244","endLine":56,"endColumn":24},{"ruleId":"260","severity":1,"message":"261","line":70,"column":5,"nodeType":"262","messageId":"263","endLine":70,"endColumn":49},{"ruleId":"241","severity":1,"message":"264","line":71,"column":11,"nodeType":"243","messageId":"244","endLine":71,"endColumn":15},{"ruleId":"241","severity":1,"message":"265","line":4,"column":22,"nodeType":"243","messageId":"244","endLine":4,"endColumn":32},{"ruleId":"241","severity":1,"message":"266","line":91,"column":73,"nodeType":"243","messageId":"244","endLine":91,"endColumn":91},{"ruleId":"241","severity":1,"message":"267","line":105,"column":11,"nodeType":"243","messageId":"244","endLine":105,"endColumn":32},{"ruleId":"241","severity":1,"message":"268","line":131,"column":11,"nodeType":"243","messageId":"244","endLine":131,"endColumn":21},{"ruleId":"241","severity":1,"message":"269","line":156,"column":12,"nodeType":"243","messageId":"244","endLine":156,"endColumn":22},{"ruleId":"241","severity":1,"message":"270","line":156,"column":24,"nodeType":"243","messageId":"244","endLine":156,"endColumn":37},{"ruleId":"241","severity":1,"message":"271","line":204,"column":11,"nodeType":"243","messageId":"244","endLine":204,"endColumn":25},{"ruleId":"237","severity":1,"message":"272","line":60,"column":6,"nodeType":"239","endLine":60,"endColumn":8,"suggestions":"273"},{"ruleId":"237","severity":1,"message":"274","line":221,"column":6,"nodeType":"239","endLine":221,"endColumn":18,"suggestions":"275"},{"ruleId":"237","severity":1,"message":"276","line":495,"column":6,"nodeType":"239","endLine":495,"endColumn":19,"suggestions":"277"},{"ruleId":"237","severity":1,"message":"278","line":520,"column":6,"nodeType":"239","endLine":520,"endColumn":38,"suggestions":"279"},{"ruleId":"237","severity":1,"message":"276","line":531,"column":6,"nodeType":"239","endLine":531,"endColumn":12,"suggestions":"280"},{"ruleId":"256","severity":1,"message":"257","line":779,"column":39,"nodeType":"258","endLine":782,"endColumn":41},{"ruleId":"241","severity":1,"message":"281","line":45,"column":20,"nodeType":"243","messageId":"244","endLine":45,"endColumn":31},{"ruleId":"237","severity":1,"message":"282","line":68,"column":6,"nodeType":"239","endLine":68,"endColumn":8,"suggestions":"283"},{"ruleId":"237","severity":1,"message":"284","line":292,"column":6,"nodeType":"239","endLine":292,"endColumn":18,"suggestions":"285"},{"ruleId":"237","severity":1,"message":"286","line":493,"column":6,"nodeType":"239","endLine":493,"endColumn":19,"suggestions":"287"},{"ruleId":"237","severity":1,"message":"278","line":540,"column":6,"nodeType":"239","endLine":540,"endColumn":38,"suggestions":"288"},{"ruleId":"237","severity":1,"message":"286","line":550,"column":6,"nodeType":"239","endLine":550,"endColumn":12,"suggestions":"289"},{"ruleId":"290","severity":1,"message":"291","line":684,"column":32,"nodeType":"292","messageId":"293","endLine":684,"endColumn":34},{"ruleId":"241","severity":1,"message":"294","line":3,"column":10,"nodeType":"243","messageId":"244","endLine":3,"endColumn":16},{"ruleId":"241","severity":1,"message":"295","line":4,"column":10,"nodeType":"243","messageId":"244","endLine":4,"endColumn":29},{"ruleId":"241","severity":1,"message":"296","line":4,"column":31,"nodeType":"243","messageId":"244","endLine":4,"endColumn":50},{"ruleId":"241","severity":1,"message":"297","line":5,"column":10,"nodeType":"243","messageId":"244","endLine":5,"endColumn":28},{"ruleId":"241","severity":1,"message":"298","line":6,"column":10,"nodeType":"243","messageId":"244","endLine":6,"endColumn":34},{"ruleId":"241","severity":1,"message":"299","line":6,"column":36,"nodeType":"243","messageId":"244","endLine":6,"endColumn":60},{"ruleId":"241","severity":1,"message":"300","line":6,"column":62,"nodeType":"243","messageId":"244","endLine":6,"endColumn":94},{"ruleId":"241","severity":1,"message":"301","line":6,"column":96,"nodeType":"243","messageId":"244","endLine":6,"endColumn":113},{"ruleId":"241","severity":1,"message":"302","line":14,"column":26,"nodeType":"243","messageId":"244","endLine":14,"endColumn":41},{"ruleId":"241","severity":1,"message":"303","line":18,"column":25,"nodeType":"243","messageId":"244","endLine":18,"endColumn":39},{"ruleId":"241","severity":1,"message":"304","line":39,"column":17,"nodeType":"243","messageId":"244","endLine":39,"endColumn":30},{"ruleId":"237","severity":1,"message":"305","line":62,"column":8,"nodeType":"239","endLine":62,"endColumn":10,"suggestions":"306"},{"ruleId":"237","severity":1,"message":"307","line":211,"column":8,"nodeType":"239","endLine":211,"endColumn":20,"suggestions":"308"},{"ruleId":"237","severity":1,"message":"309","line":367,"column":8,"nodeType":"239","endLine":367,"endColumn":21,"suggestions":"310"},{"ruleId":"237","severity":1,"message":"278","line":417,"column":8,"nodeType":"239","endLine":417,"endColumn":40,"suggestions":"311"},{"ruleId":"237","severity":1,"message":"309","line":428,"column":8,"nodeType":"239","endLine":428,"endColumn":14,"suggestions":"312"},{"ruleId":"241","severity":1,"message":"313","line":1,"column":17,"nodeType":"243","messageId":"244","endLine":1,"endColumn":25},{"ruleId":"241","severity":1,"message":"314","line":1,"column":27,"nodeType":"243","messageId":"244","endLine":1,"endColumn":38},{"ruleId":"241","severity":1,"message":"315","line":1,"column":51,"nodeType":"243","messageId":"244","endLine":1,"endColumn":57},{"ruleId":"241","severity":1,"message":"298","line":4,"column":10,"nodeType":"243","messageId":"244","endLine":4,"endColumn":34},{"ruleId":"241","severity":1,"message":"316","line":6,"column":10,"nodeType":"243","messageId":"244","endLine":6,"endColumn":35},{"ruleId":"241","severity":1,"message":"317","line":1,"column":29,"nodeType":"243","messageId":"244","endLine":1,"endColumn":35},{"ruleId":"290","severity":1,"message":"318","line":116,"column":39,"nodeType":"292","messageId":"293","endLine":116,"endColumn":41},{"ruleId":"241","severity":1,"message":"319","line":2,"column":85,"nodeType":"243","messageId":"244","endLine":2,"endColumn":96},{"ruleId":"241","severity":1,"message":"320","line":2,"column":98,"nodeType":"243","messageId":"244","endLine":2,"endColumn":108},{"ruleId":"241","severity":1,"message":"321","line":2,"column":110,"nodeType":"243","messageId":"244","endLine":2,"endColumn":116},{"ruleId":"241","severity":1,"message":"322","line":2,"column":118,"nodeType":"243","messageId":"244","endLine":2,"endColumn":126},{"ruleId":"241","severity":1,"message":"323","line":20,"column":12,"nodeType":"243","messageId":"244","endLine":20,"endColumn":27},{"ruleId":"241","severity":1,"message":"324","line":9,"column":7,"nodeType":"243","messageId":"244","endLine":9,"endColumn":22},{"ruleId":"325","severity":1,"message":"326","line":92,"column":50,"nodeType":"327","messageId":"328","endLine":92,"endColumn":51,"suggestions":"329"},{"ruleId":"325","severity":1,"message":"326","line":92,"column":57,"nodeType":"327","messageId":"328","endLine":92,"endColumn":58,"suggestions":"330"},"no-native-reassign",["331"],"no-negated-in-lhs",["332"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setAuthListener'. Either include it or remove the dependency array.","ArrayExpression",["333"],"no-unused-vars","'createMuiTheme' is defined but never used.","Identifier","unusedVar","'Amplify' is defined but never used.","React Hook useEffect has a missing dependency: 'updateLoginState'. Either include it or remove the dependency array.",["334"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-throw-literal","Expected an error object to be thrown.","ThrowStatement","object","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'menuEnabled' is assigned a value but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","'list' is assigned a value but never used.","'withStyles' is defined but never used.","'showSideMenuButton' is assigned a value but never used.","'handleProfileMenuOpen' is assigned a value but never used.","'renderMenu' is assigned a value but never used.","'activeMenu' is assigned a value but never used.","'setActiveMenu' is assigned a value but never used.","'handleSideMenu' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetchAllAlternativeSpecies'. Either include it or remove the dependency array.",["335"],"React Hook useEffect has missing dependencies: 'API_BASE_URL', 'currOffset', and 'rowsPerPage'. Either include them or remove the dependency array.",["336"],"React Hook useEffect has a missing dependency: 'handleGetAlternativeSpecies'. Either include it or remove the dependency array.",["337"],"React Hook useEffect has a missing dependency: 'calculateStartAndEnd'. Either include it or remove the dependency array.",["338"],["339"],"'setRegionId' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'fetchAllAlternativeSpecies' and 'fetchAllInvasiveSpecies'. Either include them or remove the dependency array.",["340"],"React Hook useEffect has missing dependencies: 'API_BASE_URL', 'currLastSpeciesId', and 'rowsPerPage'. Either include them or remove the dependency array.",["341"],"React Hook useEffect has a missing dependency: 'handleGetInvasiveSpecies'. Either include it or remove the dependency array.",["342"],["343"],["344"],"array-callback-return","Array.prototype.filter() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'saveAs' is defined but never used.","'webscrapeBCInvasive' is defined but never used.","'webscrapeONInvasive' is defined but never used.","'webscrapeWikipedia' is defined but never used.","'webscrapeInvasiveSpecies' is defined but never used.","'flagedSpeciesToPlanetAPI' is defined but never used.","'fullIntegrationOfFlaggingSpecies' is defined but never used.","'dataPipelineForDB' is defined but never used.","'setSelectedFile' is assigned a value but never used.","'setIsFileSaved' is assigned a value but never used.","'acceptedImage' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetchAllRegions'. Either include it or remove the dependency array.",["345"],"React Hook useEffect has missing dependencies: 'API_BASE_URL', 'currLastRegionId', and 'rowsPerPage'. Either include them or remove the dependency array.",["346"],"React Hook useEffect has a missing dependency: 'handleGetRegions'. Either include it or remove the dependency array.",["347"],["348"],["349"],"'useState' is defined but never used.","'useCallback' is defined but never used.","'useRef' is defined but never used.","'getAlternativePlantsForDB' is defined but never used.","'Button' is defined but never used.","Array.prototype.map() expects a return value from arrow function.","'FormControl' is defined but never used.","'InputLabel' is defined but never used.","'Select' is defined but never used.","'MenuItem' is defined but never used.","'selectedCountry' is assigned a value but never used.","'ON_INVASIVE_URL' is assigned a value but never used.","no-useless-escape","Unnecessary escape character: \\'.","Literal","unnecessaryEscape",["350","351"],["352","353"],"no-global-assign","no-unsafe-negation",{"desc":"354","fix":"355"},{"desc":"356","fix":"357"},{"desc":"358","fix":"359"},{"desc":"360","fix":"361"},{"desc":"362","fix":"363"},{"desc":"364","fix":"365"},{"desc":"366","fix":"367"},{"desc":"368","fix":"369"},{"desc":"370","fix":"371"},{"desc":"372","fix":"373"},{"desc":"374","fix":"375"},{"desc":"376","fix":"377"},{"desc":"378","fix":"379"},{"desc":"380","fix":"381"},{"desc":"382","fix":"383"},{"desc":"364","fix":"384"},{"desc":"385","fix":"386"},{"messageId":"387","fix":"388","desc":"389"},{"messageId":"390","fix":"391","desc":"392"},{"messageId":"387","fix":"393","desc":"389"},{"messageId":"390","fix":"394","desc":"392"},"Update the dependencies array to be: [setAuthListener]",{"range":"395","text":"396"},"Update the dependencies array to be: [updateLoginState]",{"range":"397","text":"398"},"Update the dependencies array to be: [fetchAllAlternativeSpecies]",{"range":"399","text":"400"},"Update the dependencies array to be: [API_BASE_URL, currOffset, rowsPerPage, shouldSave]",{"range":"401","text":"402"},"Update the dependencies array to be: [handleGetAlternativeSpecies, shouldReset]",{"range":"403","text":"404"},"Update the dependencies array to be: [rowsPerPage, page, displayData, calculateStartAndEnd]",{"range":"405","text":"406"},"Update the dependencies array to be: [handleGetAlternativeSpecies, page]",{"range":"407","text":"408"},"Update the dependencies array to be: [fetchAllAlternativeSpecies, fetchAllInvasiveSpecies]",{"range":"409","text":"410"},"Update the dependencies array to be: [API_BASE_URL, currLastSpeciesId, rowsPerPage, shouldSave]",{"range":"411","text":"412"},"Update the dependencies array to be: [handleGetInvasiveSpecies, shouldReset]",{"range":"413","text":"414"},"Update the dependencies array to be: [page, rowsPerPage, displayData, calculateStartAndEnd]",{"range":"415","text":"416"},"Update the dependencies array to be: [handleGetInvasiveSpecies, page]",{"range":"417","text":"418"},"Update the dependencies array to be: [fetchAllRegions]",{"range":"419","text":"420"},"Update the dependencies array to be: [API_BASE_URL, currLastRegionId, rowsPerPage, shouldSave]",{"range":"421","text":"422"},"Update the dependencies array to be: [handleGetRegions, shouldReset]",{"range":"423","text":"424"},{"range":"425","text":"406"},"Update the dependencies array to be: [handleGetRegions, page]",{"range":"426","text":"427"},"removeEscape",{"range":"428","text":"429"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"430","text":"431"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"432","text":"429"},{"range":"433","text":"431"},[687,689],"[setAuthListener]",[5028,5030],"[updateLoginState]",[3469,3471],"[fetchAllAlternativeSpecies]",[9190,9202],"[API_BASE_URL, currOffset, rowsPerPage, shouldSave]",[18891,18904],"[handleGetAlternativeSpecies, shouldReset]",[19651,19683],"[rowsPerPage, page, displayData, calculateStartAndEnd]",[19928,19934],"[handleGetAlternativeSpecies, page]",[3990,3992],"[fetchAllAlternativeSpecies, fetchAllInvasiveSpecies]",[11580,11592],"[API_BASE_URL, currLastSpeciesId, rowsPerPage, shouldSave]",[18081,18094],"[handleGetInvasiveSpecies, shouldReset]",[19550,19582],"[page, rowsPerPage, displayData, calculateStartAndEnd]",[19823,19829],"[handleGetInvasiveSpecies, page]",[3406,3408],"[fetchAllRegions]",[9222,9234],"[API_BASE_URL, currLastRegionId, rowsPerPage, shouldSave]",[14732,14745],"[handleGetRegions, shouldReset]",[16666,16698],[16952,16958],"[handleGetRegions, page]",[3175,3176],"",[3175,3175],"\\",[3182,3183],[3182,3182]]
[{"/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/index.js":"1","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/reportWebVitals.js":"2","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/App.js":"3","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/Reducers/index.js":"4","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/themes.js":"5","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/Actions/loginActions.js":"6","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/components/Authentication/Login_material.js":"7","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/Views/PageContainer/PageContainer.js":"8","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/Reducers/loginReducer.js":"9","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/Reducers/appStateReducer.js":"10","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/components/Authentication/TextFieldStartAdornment.js":"11","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/Actions/menuActions.js":"12","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/components/Navbar/Navbar.js":"13","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/Views/Pages/error404.js":"14","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/Views/Pages/AlternativeSpeciesPage.js":"15","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/Views/Pages/InvasiveSpeciesPage.js":"16","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/Views/Pages/pl@ntNet.js":"17","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/Views/Pages/RegionsPage.js":"18","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/Views/Pages/downloadWebscrap.js":"19","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/Views/Pages/Theme.js":"20","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/components/SearchComponent.js":"21","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/components/LocationFilterComponent.js":"22","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/components/PaginationComponent.js":"23","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/functions/speciesToJSON.js":"24","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/functions/alternativePlants.js":"25","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/functions/helperFunctions.js":"26","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/functions/pipeline.js":"27","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/dialogs/AddRegionDialog.js":"28","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/dialogs/EditRegionsDialog.js":"29","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/dialogs/ConfirmDeleteDialog.js":"30","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/functions/webscrapeWiki.js":"31","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/functions/webscrape.js":"32","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/functions/RegionMap.js":"33","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/components/AlertComponent.js":"34","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/components/SnackbarComponent.js":"35","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/components/WarningComponent.js":"36","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/dialogs/AddInvasiveSpeciesDialog.js":"37","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/dialogs/EditInvasiveSpeciesDialog.js":"38","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/dialogs/AddAlternativeSpeciesDialog.js":"39","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/dialogs/EditAlternativeSpeciesDialog.js":"40"},{"size":1431,"mtime":1700778164766,"results":"41","hashOfConfig":"42"},{"size":362,"mtime":1700244664963,"results":"43","hashOfConfig":"42"},{"size":2481,"mtime":1701711455902,"results":"44","hashOfConfig":"42"},{"size":232,"mtime":1700244664930,"results":"45","hashOfConfig":"42"},{"size":457,"mtime":1700244664966,"results":"46","hashOfConfig":"42"},{"size":295,"mtime":1700244664927,"results":"47","hashOfConfig":"42"},{"size":41541,"mtime":1701473893648,"results":"48","hashOfConfig":"42"},{"size":4453,"mtime":1701474483600,"results":"49","hashOfConfig":"42"},{"size":385,"mtime":1700244664930,"results":"50","hashOfConfig":"42"},{"size":385,"mtime":1700244664929,"results":"51","hashOfConfig":"42"},{"size":1498,"mtime":1700244664951,"results":"52","hashOfConfig":"42"},{"size":303,"mtime":1700244664927,"results":"53","hashOfConfig":"42"},{"size":10468,"mtime":1701474483606,"results":"54","hashOfConfig":"42"},{"size":1649,"mtime":1701474483605,"results":"55","hashOfConfig":"42"},{"size":39193,"mtime":1701805147986,"results":"56","hashOfConfig":"42"},{"size":44948,"mtime":1701802349469,"results":"57","hashOfConfig":"42"},{"size":8391,"mtime":1701209831617,"results":"58","hashOfConfig":"42"},{"size":35842,"mtime":1701802632562,"results":"59","hashOfConfig":"42"},{"size":1288,"mtime":1701128260740,"results":"60","hashOfConfig":"42"},{"size":460,"mtime":1701474389550,"results":"61","hashOfConfig":"42"},{"size":1428,"mtime":1701804043847,"results":"62","hashOfConfig":"42"},{"size":1141,"mtime":1701474483605,"results":"63","hashOfConfig":"42"},{"size":1031,"mtime":1701474483607,"results":"64","hashOfConfig":"42"},{"size":1561,"mtime":1701474483624,"results":"65","hashOfConfig":"42"},{"size":9986,"mtime":1701474483621,"results":"66","hashOfConfig":"42"},{"size":1268,"mtime":1701474483623,"results":"67","hashOfConfig":"42"},{"size":8988,"mtime":1700244664961,"results":"68","hashOfConfig":"42"},{"size":6551,"mtime":1701474483613,"results":"69","hashOfConfig":"42"},{"size":5216,"mtime":1701801515787,"results":"70","hashOfConfig":"42"},{"size":1151,"mtime":1701474483614,"results":"71","hashOfConfig":"42"},{"size":4870,"mtime":1701209831630,"results":"72","hashOfConfig":"42"},{"size":12217,"mtime":1700778164765,"results":"73","hashOfConfig":"42"},{"size":913,"mtime":1701734876185,"results":"74","hashOfConfig":"42"},{"size":809,"mtime":1700244664950,"results":"75","hashOfConfig":"42"},{"size":477,"mtime":1701474483608,"results":"76","hashOfConfig":"42"},{"size":1185,"mtime":1701474483609,"results":"77","hashOfConfig":"42"},{"size":9373,"mtime":1701731480754,"results":"78","hashOfConfig":"42"},{"size":7646,"mtime":1701801470690,"results":"79","hashOfConfig":"42"},{"size":7107,"mtime":1701801166728,"results":"80","hashOfConfig":"42"},{"size":11955,"mtime":1701801460711,"results":"81","hashOfConfig":"42"},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},"112zn08",{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"84"},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"84"},{"filePath":"95","messages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"97","messages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"84"},{"filePath":"100","messages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"84"},{"filePath":"103","messages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"105","messages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"107","messages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"84"},{"filePath":"110","messages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"112","messages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"84"},{"filePath":"115","messages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"117","messages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"119","messages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"84"},{"filePath":"122","messages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"84"},{"filePath":"125","messages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"84"},{"filePath":"128","messages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"84"},{"filePath":"131","messages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"133","messages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"135","messages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"137","messages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"139","messages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"141","messages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"143","messages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"145","messages":"146","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"84"},{"filePath":"148","messages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"84"},{"filePath":"151","messages":"152","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"153","messages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"155","messages":"156","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"157","messages":"158","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"84"},{"filePath":"160","messages":"161","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"162","messages":"163","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"164","messages":"165","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"166","messages":"167","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"168","messages":"169","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"170","messages":"171","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"172","messages":"173","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"174","messages":"175","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176","usedDeprecatedRules":"84"},"/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/index.js",[],["177","178"],"/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/reportWebVitals.js",[],"/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/App.js",["179"],"import './App.css';\nimport { BrowserRouter } from \"react-router-dom\";\nimport { StylesProvider, ThemeProvider } from '@material-ui/core/styles';\nimport Login from \"./components/Authentication/Login_material\";\nimport PageContainer from \"./Views/PageContainer/PageContainer\";\nimport { Hub } from \"aws-amplify\";\nimport React, { useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { updateLoginState } from \"./Actions/loginActions\";\nimport theme from \"./themes\";\n\nfunction App(props) {\n  const { loginState, updateLoginState } = props;\n  const [currentLoginState, updateCurrentLoginState] = useState(loginState);\n\n  useEffect(() => {\n    setAuthListener();\n  }, []);\n\n  useEffect(() => {\n    updateCurrentLoginState(loginState);\n  }, [loginState]);\n\n\n  async function setAuthListener() {\n    Hub.listen('auth', (data) => {\n      switch (data.payload.event) {\n        case \"signOut\":\n          updateLoginState(\"signIn\");\n          break;\n        default:\n          break;\n      }\n    })\n  }\n  return (\n    <StylesProvider injectFirst>\n      <ThemeProvider theme={theme}>\n        <div style={{ width: \"100vw\", height: \"100vh\" }}>\n          {\n            currentLoginState !== \"signedIn\" && (\n\n              // /* Login component options:\n              // *\n              // * [logo: \"custom\", \"none\"]\n              // * [type: \"video\", \"image\", \"static\"]\n              // * [themeColor: \"standard\", \"#012144\" (color hex value in quotes) ]\n              // *  Suggested alternative theme colors: #037dad, #5f8696, #495c4e, #4f2828, #ba8106, #965f94\n              // * [animateTitle: true, false]\n              // * [title: string]\n              // * [darkMode (changes font/logo color): true, false]\n              // * [disableSignUp: true, false]\n\n              <Login logo={\"none\"} type={\"image\"} themeColor={\"standard\"} animateTitle={false}\n                title={\"Management System\"} darkMode={true}\n                disableSignUp={true}\n              />\n            )\n          }\n          {\n            currentLoginState === \"signedIn\" && (\n              <BrowserRouter>\n                <PageContainer />\n              </BrowserRouter>\n            )\n          }\n        </div>\n      </ThemeProvider>\n    </StylesProvider>\n  );\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    loginState: state.loginState.currentState,\n  };\n};\n\nconst mapDispatchToProps = {\n  updateLoginState,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/Reducers/index.js",[],"/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/themes.js",["180"],"import { createMuiTheme } from '@material-ui/core/styles';\nimport { createTheme } from '@material-ui/core/styles';\nimport orange from '@material-ui/core/colors/orange';\n\nconst theme = createTheme({\n    palette: {\n        primary: {\n            main: \"#012144\",\n        },\n        secondary: {\n            main: orange[500],\n        },\n        darkTheme: {\n            main: \"#282c34\",\n            card: \"#4a4f59\",\n        }\n    },\n});\n\nexport default theme;","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/Actions/loginActions.js",[],"/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/components/Authentication/Login_material.js",["181","182","183","184","185"],"import { Button, CircularProgress, Divider, Grid, List, ListItem, ListItemIcon, ListItemText } from '@mui/material';\nimport Alert from '@mui/material/Alert';\n\n// icons\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\nimport AlternateEmailIcon from '@mui/icons-material/AlternateEmail';\nimport LockIcon from '@mui/icons-material/Lock';\nimport DialpadIcon from '@mui/icons-material/Dialpad';\nimport CheckCircleRoundedIcon from '@mui/icons-material/CheckCircleRounded';\nimport CancelRoundedIcon from '@mui/icons-material/CancelRounded';\n\n// colors\nimport { green, red } from '@material-ui/core/colors';\n\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\nimport {Amplify, Auth} from 'aws-amplify';\nimport React, { useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { updateLoginState } from \"../../Actions/loginActions\";\nimport TextFieldStartAdornment from \"./TextFieldStartAdornment\";\nimport \"./Login.css\";\nimport Typography from '@material-ui/core/Typography';\n\nconst initialFormState = {\n    email: \"\", password: \"\", given_name: \"\", family_name: \"\", authCode: \"\", resetCode: \"\"\n}\n\nconst useStyles = makeStyles((theme) => ({\n    marginTop: {\n        margin: theme.spacing(2, 'auto', 'auto', 'auto')\n    },\n    marginHorizontal: {\n        margin: theme.spacing(4, 'auto')\n    },\n    padding: {\n        padding: theme.spacing(1.5)\n    },\n    textAlignCenter: {\n        textAlign: \"center\"\n    },\n    flexDisplay: {\n        display: \"flex\"\n    },\n    forgetPassword: {\n        justifyContent: \"flex-end\",\n        fontFamily: \"'Roboto', 'Helvetica', 'Arial', 'sans-serif'\",\n        fontWeight: 500,\n        lineHeight: 1.75,\n    },\n    activeButton: {\n        borderRadius: 50,\n        width: \"100%\",\n        fontSize: \"1em\"\n    },\n    themeColor: {\n        backgroundColor: \"#012144\",\n    },\n    errorMessage: {\n        color: \"red\",\n    },\n    cursor: {\n        cursor: \"pointer\"\n    },\n    underlineText: {\n        textDecoration: \"underline\",\n    },\n    passwordReq: {\n        backgroundColor: \"#ffc2c2\",\n        borderRadius: 5\n    },\n    centerBox: {\n        justifyContent: \"center\",\n        alignItems: \"center\"\n    }\n}));\n\nconst DefaultButton = withStyles((theme) => ({\n    root: {\n        borderRadius: 50,\n        width: \"100%\",\n        fontSize: \"1em\",\n        padding: theme.spacing(1.5),\n        margin: theme.spacing(2, 'auto')\n    },\n}))(Button);\n\nconst SubmitButton = withStyles((theme) => ({\n    root: {\n        color: theme.palette.getContrastText(\"#012144\"),\n        backgroundColor: \"#012144\",\n        '&:hover': {\n            backgroundColor: \"#012144\",\n        },\n    },\n}))(DefaultButton);\n\nfunction Login(props) {\n    const { loginState, updateLoginState, animateTitle, type, title, darkMode, logo, themeColor, disableSignUp } = props;\n    const [formState, updateFormState] = useState(initialFormState);\n    const [accountCreationEmailExistError, setAccountCreationEmailExistError] = useState(false);\n    const [accountCreationPasswordError, setAccountCreationPasswordError] = useState(false);\n    const [accountLoginError, setAccountLoginError] = useState(false);\n    const [accountLoginErrorMsg, setAccountLoginErrorMsg] = useState(undefined);\n    const [verificationError, setVerificationError] = useState(false);\n    const [newPasswordError, setNewPasswordError] = useState(false);\n    const [newVerification, setNewVerification] = useState(false);\n    const [loading, setLoading] = useState(false);\n    const [currentUser, setCurrentUser] = useState(null);\n    const [forgotPasswordError, setForgotPasswordError] = useState(false);\n    const [emptyInputError, setEmptyInputError] = useState(false);\n    const [invalidEmailError, setInvalidEmailError] = useState(false);\n    const [timeLimitError, setTimeLimitError] = useState(\"\");\n\n    // password check\n    const [passwordRequirements, setPasswordRequirements] = useState({\n        uppercase: { error: false, description: 'At least one uppercase letter' },\n        lowercase: { error: false, description: 'At least one lowercase letter' },\n        digit: { error: false, description: 'At least one digit' },\n        special: { error: false, description: 'At least one special character' },\n        minLength: { error: false, description: 'Should be more than 8 characters' },\n        maxLength: { error: false, description: 'Should be less than 16 characters' }\n    });\n    const [passwordUnmatchError, setPasswordUnmatchError] = useState(false);\n    const [confirmPasswordString, setConfirmPasswordString] = useState('');\n\n\n    const classes = useStyles();\n\n    useEffect(() => {\n        async function retrieveUser() {\n            try {\n                Auth.currentAuthenticatedUser().then(user => {\n                    updateLoginState(\"signedIn\");\n                }).catch(err => {\n                    updateLoginState(\"signIn\");\n                })\n            } catch (e) {\n                console.log(\"error authenticted user\", e);\n            }\n        }\n        retrieveUser();\n    }, []);\n\n    function clearErrors() {\n        setAccountCreationEmailExistError(false);\n        setAccountCreationPasswordError(false);\n        setAccountLoginError(false);\n        setVerificationError(false);\n        setNewVerification(false);\n        setNewPasswordError(false);\n        setInvalidEmailError(false);\n    }\n\n    function onChange(e) {\n        e.persist();\n        clearErrors()\n\n        updateFormState({ ...formState, [e.target.name]: e.target.value })\n    }\n\n    function onChangePassword(e) {\n        const currPW = e.target.value;\n        setPasswordRequirements(() => {\n            passwordRequirements.uppercase.error = /[A-Z]/.test(currPW)\n            passwordRequirements.lowercase.error = /[a-z]/.test(currPW)\n            passwordRequirements.digit.error = /[0-9]/.test(currPW)\n            passwordRequirements.special.error = /[^A-Za-z0-9]/.test(currPW)\n            passwordRequirements.minLength.error = currPW.length > 8\n            passwordRequirements.maxLength.error = currPW.length <= 16\n\n            return passwordRequirements;\n        })\n\n        onChange(e);\n\n        // check if \"password\" is the same as \"confirm-password\"\n        e.target.value === confirmPasswordString ? setPasswordUnmatchError(false) : setPasswordUnmatchError(true)\n    }\n\n    async function signUp() {\n        try {\n            console.log(\"try signup\");\n\n            // check if both passwords match first before signing up\n            checkMatchingPasswords();\n\n            const { email, password, given_name, family_name } = formState;\n            checkEmptyString(given_name);\n            checkEmptyString(family_name);\n\n            setLoading(true);\n            await Auth.signUp({\n                username: email,\n                password: password,\n                attributes: {\n                    given_name: given_name,\n                    family_name: family_name\n                }\n            });\n            updateFormState(() => ({ ...initialFormState, email }))\n            updateLoginState(\"confirmSignUp\");\n            setLoading(false);\n        } catch (e) {\n            setLoading(false);\n            setEmptyInputError(false);\n\n            const errorMsg = e.message;\n\n            if (errorMsg.includes(\"empty\")) {\n                setEmptyInputError(true);\n            } else if (errorMsg.includes(\"Username should be an email.\")) {\n                setInvalidEmailError(true);\n            } else if (errorMsg.includes(\"given email already exists\")) {\n                setAccountCreationEmailExistError(true);\n            } else if (errorMsg.includes(\"Passwords do not match\")) {\n                setPasswordUnmatchError(true)\n            } else {\n                setAccountCreationPasswordError(true);\n            }\n        }\n    }\n\n    // confirmSignUp shows after signUp page\n    async function confirmSignUp() {\n        // Verify Account with confirmation code after sign up page\n        try {\n            console.log(\"try confirm signup\");\n\n            setNewVerification(false);\n            const { email, authCode } = formState;\n            setLoading(true);\n            await Auth.confirmSignUp(email, authCode);\n            resetStates(\"signedIn\");\n            setLoading(false);\n        } catch (e) {\n            setVerificationError(true);\n            setLoading(false);\n\n            const errorMsg = e.message;\n            if (errorMsg.includes(\"time\")) {\n                setTimeLimitError(errorMsg);\n            }\n        }\n    }\n\n    async function resendConfirmationCode() {\n        try {\n            const { email } = formState;\n            setVerificationError(false);\n            await Auth.resendSignUp(email);\n            setNewVerification(true);\n        } catch (err) {\n            setNewVerification(false);\n\n            const errorMsg = err.message;\n            if (errorMsg.includes(\"time\")) {\n                setTimeLimitError(errorMsg);\n            }\n        }\n    }\n\n    async function signIn() {\n        try {\n            setLoading(true);\n            const { email, password } = formState;\n            let user = await Auth.signIn(email, password);\n            console.log(\"user: \", user);\n            if (user.challengeName === \"NEW_PASSWORD_REQUIRED\") {\n                // a new password needs to be set if account is created through Amazon Cognito for the user\n                resetStates(\"newUserPassword\")\n                setLoading(false);\n                setCurrentUser(user);\n            } else {\n                if(user.signInUserSession.idToken.payload[\"cognito:groups\"] != undefined && user.signInUserSession.idToken.payload[\"cognito:groups\"].some(element => element === \"ADMIN_USER\")){\n                    resetStates(\"signedIn\");\n                    setLoading(false);\n                } else {\n                    resetStates(\"signIn\");\n                    setLoading(false);\n                    await Auth.signOut();\n                    updateFormState(() => ({ ...initialFormState, email, password }));\n                    throw {message: \"Not enough permission\", code:\"DeniedPermission\"};\n                }\n            }\n        } catch (e) {\n            setLoading(false);\n            const errorMsg = e.code;\n\n            // if a password is requested through Amazon Cognito,\n            // need to jump to resetPassword page\n            if (errorMsg && errorMsg.includes(\"PasswordResetRequiredException\")) {\n                const { email } = formState;\n\n                updateFormState(() => ({ ...initialFormState, email }))\n                updateLoginState(\"resetPassword\")\n                setLoading(false);\n            } else {\n                setAccountLoginErrorMsg(e.message);\n                setAccountLoginError(true);\n            }\n        }\n    }\n\n    async function setNewPassword() {\n        try {\n            // check if both passwords match first before setting new password\n            checkMatchingPasswords();\n\n            const { password } = formState;\n            setLoading(true);\n            await Auth.completeNewPassword(currentUser, password);\n            resetStates(\"signedIn\");\n            setLoading(false);\n        } catch (e) {\n            setLoading(false);\n\n            const errorMsg = e.message;\n\n            if (errorMsg.includes(\"empty\")) {\n                setEmptyInputError(true);\n            } else if (errorMsg.includes(\"Passwords do not match\")) {\n                setPasswordUnmatchError(true);\n            } else if (errorMsg.includes(\"time\")) {\n                setTimeLimitError(errorMsg);\n            } else {\n                setNewPasswordError(true);\n            }\n        }\n    }\n\n    async function forgotPassword() {\n        try {\n            const { email } = formState;\n            setLoading(true);\n            await Auth.forgotPassword(email);\n            updateFormState(() => ({ ...initialFormState, email }))\n            updateLoginState(\"resetPassword\")\n            setLoading(false);\n        } catch (e) {\n            setLoading(false);\n            setForgotPasswordError(true);\n        }\n    }\n\n    // resetPassword after forgotPassword page\n    async function resetPassword() {\n        try {\n            // check if both passwords match first before resetting password\n            checkMatchingPasswords();\n\n            const { email, resetCode, password } = formState;\n            setLoading(true);\n            await Auth.forgotPasswordSubmit(email, resetCode, password);\n            resetStates(\"signIn\");\n            setLoading(false);\n        } catch (e) {\n            setLoading(false);\n            setEmptyInputError(false);\n\n            const errorMsg = e.message;\n\n            if (errorMsg.includes(\"empty\")) {\n                setEmptyInputError(true);\n            } else if (errorMsg.includes(\"verification code\")) {\n                setVerificationError(true);\n            } else if (errorMsg.includes(\"time\")) {\n                setTimeLimitError(errorMsg);\n            } else if (errorMsg.includes(\"Passwords do not match\")) {\n                setPasswordUnmatchError(true)\n            } else {\n                setNewPasswordError(true);\n            }\n        }\n    }\n\n    function checkMatchingPasswords() {\n        // check if both passwords match\n        if (!confirmPasswordString) {\n            // empty field\n            throw new Error(\"empty\");\n        } else if (passwordUnmatchError) {\n            throw new Error(\"Passwords do not match\");\n        }\n    }\n\n    function checkEmptyString(str) {\n        // check if string is empty after space trimmed\n        if (str.replace(/\\s+/g, '') === '') {\n            throw new Error(\"empty\");\n        }\n    }\n\n    function resetStates(state) {\n        // clear states when hitting the back button\n        updateFormState(() => (initialFormState))\n        clearErrors()\n\n        // the following were not removed during onChange() so need to be cleared here\n        setForgotPasswordError(false)\n        setEmptyInputError(false)\n        setPasswordUnmatchError(false);\n        setConfirmPasswordString('');\n        setTimeLimitError('');\n\n        // clear password requirement checks\n        setPasswordRequirements(() => {\n            passwordRequirements.uppercase.error = false\n            passwordRequirements.lowercase.error = false\n            passwordRequirements.digit.error = false\n            passwordRequirements.special.error = false\n            passwordRequirements.minLength.error = false\n            passwordRequirements.maxLength.error = false\n\n            return passwordRequirements;\n        })\n\n        updateLoginState(state)\n    }\n\n    let logoType = (darkMode) ? \"/Assets/Images/logo_inverse.png\" : \"/Assets/Images/logo.png\";\n\n    return (\n        <>\n            {/*  An example image is provided. Please use a royalty-free photo, a photo owned by you, or a photo owned by the CIC */}\n            <Grid container className={classes.centerBox} style={\n                (type === \"image\") ? (themeColor === \"standard\") ? { backgroundColor: \"#012144\", backgroundImage: \"url(./Assets/Images/background.jpg)\", backgroundSize: \"cover\", backgroundRepeat: \"no\", width: \"100%\", height: \"100vh\" } :\n                    { backgroundColor: themeColor, backgroundImage: \"url(./Assets/Images/background.jpg)\", backgroundSize: \"cover\", backgroundRepeat: \"no\", width: \"100%\", height: \"100vh\" } :\n                    (themeColor === \"standard\") ? { backgroundColor: \"#012144\", width: \"100%\", height: \"100vh\" } : { backgroundColor: themeColor, width: \"100%\", height: \"100vh\" }\n            }>\n                {/* Please use a royalty free video or a video that you or the CIC owns */}\n                {(type === \"video\") ?\n                    <video playsInline autoPlay muted loop>\n                        <source src={process.env.PUBLIC_URL + \"/Assets/Videos/video.mp4\"} type=\"video/mp4\" />\n                    </video>\n                    : null}\n                <Grid container item xs={12} md={6} className={`page-info ${classes.centerBox}`}>\n                    <Grid container item justify={\"space-evenly\"} alignItems={\"center\"} /*style={{height: \"60vh\"}}*/>\n                        <Grid xs item className={`typewriter ${classes.marginHorizontal}`}>\n                            <center>\n                                <Typography variant=\"h2\" style={{fontWeight:\"bold\", color: \"white\"}}>Invasive Plants</Typography>\n                            </center>\n                            \n                            <p className={`${classes.textAlignCenter} ${(animateTitle) ?\n                                (darkMode) ? \"line anim-typewriter\" : \"line anim-typewriter-light lightMode\"\n                                :\n                                (darkMode) ? \"line-static\" : \"line-static lightMode-static\"\n                                }`}\n                            >\n                                {title}\n                            </p>\n                        </Grid>\n                        <Grid container item xs={12} justify={\"center\"}>\n                            <Grid item xs={10}>\n                                {(logo !== \"none\") ? <img src={process.env.PUBLIC_URL + logoType} style={{ width: \"100%\", height: \"100%\" }} /> : null}\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                </Grid>\n                <Grid container item xs={12} sm={7} md={5} className={`login-container ${classes.centerBox}`}>\n                    <Grid container item direction={\"column\"} xs={12} sm={11} md={9} className={\"login-box\"}>\n                        <Grid className={\"login-wrapper-top\"}>\n                            <span className={\"login-wrapper-top-header\"}>\n                                {(loginState === \"signIn\") ?\n                                    <span>Sign In</span>\n                                    :\n                                    (loginState === \"signUp\") ? <span>Create an Account</span> :\n                                        (loginState === \"confirmSignUp\") ? <span>Verify Account</span> :\n                                            (loginState === \"forgotPassword\") ? <span>Forgot your password?</span> :\n                                                (loginState === \"resetPassword\") ? <span>Password Reset</span> :\n                                                    (loginState === \"newUserPassword\") ? <span>Set New Password</span> : <span>Welcome</span>\n                                }\n                            </span>\n                        </Grid>\n                        {\n                            loginState === \"signIn\" && (\n                                <Grid>\n                                    <BannerMessage type={\"error\"} typeCheck={accountLoginError}>{accountLoginErrorMsg}</BannerMessage>\n                                    {/* username */}\n                                    <TextFieldStartAdornment startIcon={<AlternateEmailIcon />} placeholder={\"Email\"} name={\"email\"} type={\"email\"} onChange={onChange} />\n                                    {/* password */}\n                                    <TextFieldStartAdornment startIcon={<LockIcon />} placeholder={\"Password\"} name={\"password\"} type={\"password\"} onChange={onChange} />\n\n                                    {/* forget */}\n                                    <Grid className={`${classes.flexDisplay} ${classes.forgetPassword} ${classes.cursor}`}\n                                        onClick={() => resetStates(\"forgotPassword\")}\n                                    >\n                                        <span style={{ textAlign: \"end\" }}>Forgot your password?</span>\n                                    </Grid>\n\n                                    <Grid className={`input-box ${classes.marginTop}`}> {/* sign in button */}\n                                        <SubmitButtonWithLoading submitAction={signIn} submitMessage={\"Sign In\"} loadingState={loading} />\n                                    </Grid>\n                                    {!(disableSignUp) && // if sign up is not disabled, then show the create an account option\n                                        <div>\n                                            {/* divider */}\n                                            <Grid container item alignItems=\"center\" xs={12}>\n                                                <Grid item xs>\n                                                    <Divider />\n                                                </Grid>\n                                                <Grid item className={classes.padding}>\n                                                    Or\n                                                </Grid>\n                                                <Grid item xs>\n                                                    <Divider />\n                                                </Grid>\n                                            </Grid>\n                                            {/* create an account button */}\n                                            <Grid className={`input-box`}>\n                                                <DefaultButton variant=\"contained\" type=\"button\" onClick={() => resetStates(\"signUp\")}>\n                                                    Create an Account\n                                                </DefaultButton>\n                                            </Grid>\n                                        </div>\n                                    }\n                                </Grid>\n                            )\n                        }\n                        {\n                            loginState === \"forgotPassword\" && (\n                                <Grid>\n                                    <Grid container item xs={12}>\n                                        <span>\n                                            Enter your email address and we'll send you a code to help you reset your password.\n                                        </span>\n                                    </Grid>\n                                    <TextFieldStartAdornment\n                                        startIcon={<AlternateEmailIcon />}\n                                        placeholder={\"Email\"}\n                                        name={\"email\"}\n                                        type=\"email\"\n                                        autoComplete={\"new-password\"}\n                                        variant=\"outlined\"\n                                        error={forgotPasswordError}\n                                        onChange={onChange}\n                                    />\n                                    {!!forgotPasswordError &&\n                                        <Grid container item xs={12} className={classes.errorMessage}>\n                                            <span>Please enter a valid email or create an account&nbsp;\n                                                <span className={`${classes.cursor} ${classes.underlineText}`} onClick={() => updateLoginState(\"signUp\")}><strong>here</strong></span>\n                                                <span>.</span>\n                                            </span>\n                                        </Grid>\n                                    }\n                                    <BackAndSubmitButtons backAction={() => resetStates(\"signIn\")} submitAction={forgotPassword} submitMessage={\"Send reset code\"} loadingState={loading} />\n                                </Grid>\n                            )\n                        }\n                        {\n                            loginState === \"resetPassword\" && (\n                                <Grid>\n                                    <Grid>\n                                        <span>\n                                            Please check your email&nbsp;\n                                            <strong>{formState.email}</strong><br />\n                                            for a reset code and create a new password.\n                                        </span>\n                                    </Grid>\n                                    <BannerMessage type={\"error\"} typeCheck={emptyInputError || timeLimitError}>\n                                        {(!!emptyInputError && \"Please fill in all fields.\") || (timeLimitError !== '' && timeLimitError)}\n                                    </BannerMessage>\n                                    <TextFieldStartAdornment\n                                        startIcon={<DialpadIcon />}\n                                        placeholder=\"Enter reset code\"\n                                        variant=\"outlined\"\n                                        name={\"resetCode\"}\n                                        type=\"text\"\n                                        error={verificationError}\n                                        helperText={\n                                            !!verificationError && \"Please enter correct reset code.\"\n                                        }\n                                        onChange={onChange}\n                                    />\n                                    <TextFieldStartAdornment\n                                        startIcon={<LockIcon />}\n                                        placeholder=\"Create new password\"\n                                        name={\"password\"}\n                                        type=\"password\"\n                                        error={newPasswordError}\n                                        helperText={\n                                            \"Your password must have the following:\"\n                                        }\n                                        autoComplete={\"new-password\"}\n                                        onChange={onChangePassword}\n                                    />\n                                    <Grid container item xs={12} className={!!newPasswordError ? classes.passwordReq : null}>\n                                        <PasswordRequirements requirements={passwordRequirements} />\n                                    </Grid>\n                                    <TextFieldStartAdornment\n                                        startIcon={<LockIcon />}\n                                        placeholder=\"Re-enter the password\"\n                                        name={\"confirm-password\"}\n                                        type=\"password\"\n                                        error={passwordUnmatchError}\n                                        helperText={!!passwordUnmatchError && \"Passwords do not match\"}\n                                        autoComplete={\"new-password\"}\n                                        value={confirmPasswordString}\n                                        onChange={(e) => {\n                                            setConfirmPasswordString(e.target.value); // update current input state\n                                            // check if \"password\" is the same as \"confirm-password\"\n                                            e.target.value === formState.password ? setPasswordUnmatchError(false) : setPasswordUnmatchError(true)\n                                        }}\n                                    />\n                                    <BackAndSubmitButtons\n                                        backAction={() => resetStates(\"signIn\")}\n                                        submitAction={resetPassword}\n                                        submitMessage={\"Update Password\"}\n                                        loadingState={loading}\n                                    />\n                                </Grid>\n                            )\n                        }\n                        {\n                            loginState === \"signUp\" && (\n                                <Grid>\n                                    <BannerMessage type={\"error\"} typeCheck={emptyInputError}>Please fill in all fields.</BannerMessage>\n                                    <TextFieldStartAdornment\n                                        startIcon={false}\n                                        label={\"First Name\"}\n                                        name={\"given_name\"}\n                                        type=\"text\"\n                                        autoComplete={\"new-password\"}\n                                        onChange={onChange}\n                                    />\n                                    <TextFieldStartAdornment\n                                        startIcon={false}\n                                        label={\"Last Name\"}\n                                        name={\"family_name\"}\n                                        type=\"text\"\n                                        autoComplete={\"new-password\"}\n                                        onChange={onChange}\n                                    />\n                                    <TextFieldStartAdornment\n                                        startIcon={false}\n                                        label={\"Email\"}\n                                        name={\"email\"}\n                                        type=\"email\"\n                                        autoComplete={\"new-password\"}\n                                        error={accountCreationEmailExistError || invalidEmailError}\n                                        helperText={\n                                            (!!accountCreationEmailExistError && \"An account with the given email already exists.\") ||\n                                            (!!invalidEmailError && \"Please enter a valid email.\")\n                                        }\n                                        onChange={onChange}\n                                    />\n                                    <TextFieldStartAdornment\n                                        startIcon={false}\n                                        label={\"Password\"}\n                                        name={\"password\"}\n                                        type=\"password\"\n                                        error={accountCreationPasswordError}\n                                        helperText={\n                                            \"Your password must have the following:\"\n                                        }\n                                        autoComplete={\"new-password\"}\n                                        onChange={onChangePassword}\n                                    />\n                                    <Grid container item xs={12} className={!!accountCreationPasswordError ? classes.passwordReq : null}>\n                                        <PasswordRequirements requirements={passwordRequirements} />\n                                    </Grid>\n                                    <TextFieldStartAdornment\n                                        startIcon={false}\n                                        label={\"Confirm Password\"}\n                                        name={\"confirm-password\"}\n                                        type=\"password\"\n                                        error={passwordUnmatchError}\n                                        helperText={!!passwordUnmatchError && \"Passwords do not match\"}\n                                        autoComplete={\"new-password\"}\n                                        value={confirmPasswordString}\n                                        onChange={(e) => {\n                                            setConfirmPasswordString(e.target.value); // update current input state\n                                            // check if \"password\" is the same as \"confirm-password\"\n                                            e.target.value === formState.password ? setPasswordUnmatchError(false) : setPasswordUnmatchError(true)\n                                        }}\n                                    />\n                                    <BackAndSubmitButtons backAction={() => resetStates(\"signIn\")}\n                                        submitAction={signUp} submitMessage={\"Sign Up\"}\n                                        loadingState={loading} />\n                                </Grid>\n                            )\n                        }\n                        {\n                            loginState === \"confirmSignUp\" && (\n                                <Grid>\n                                    <Grid container item xs={12}>\n                                        <span>Please check your email for a confirmation code. This may take several minutes.</span>\n                                    </Grid>\n                                    <BannerMessage type={\"error\"} typeCheck={verificationError}>Invalid verification code provided, please try again.</BannerMessage>\n                                    <BannerMessage type={\"error\"} typeCheck={timeLimitError !== ''}>{timeLimitError}</BannerMessage>\n                                    <BannerMessage type={\"success\"} typeCheck={newVerification}>New verification code sent successfully.</BannerMessage>\n                                    <Grid container item direction={\"column\"} xs={12} className={\"input-box\"}>\n                                        <TextFieldStartAdornment\n                                            startIcon={<DialpadIcon />}\n                                            placeholder=\"Enter your confirmation code.\"\n                                            name={\"authCode\"}\n                                            type=\"text\"\n                                            autoComplete={\"new-password\"}\n                                            onChange={onChange}\n                                        />\n                                    </Grid>\n                                    <Grid>\n                                        <span>Didn't receive your verification code?</span>\n                                        <Button onClick={resendConfirmationCode}>\n                                            <span className={classes.underlineText}>Resend Code</span>\n                                        </Button>\n                                    </Grid>\n                                    <BackAndSubmitButtons\n                                        backAction={() => resetStates(\"signUp\")}\n                                        submitAction={confirmSignUp}\n                                        submitMessage={\"Verify\"}\n                                        loadingState={loading}\n                                    />\n                                </Grid>\n                            )\n                        }\n                        {\n                            loginState === \"newUserPassword\" && (\n                                <Grid>\n                                    <Grid container item xs={12}>\n                                        <span>\n                                            Please replace your temporary password with a new password for <strong>{formState.email}</strong>.\n                                        </span>\n                                    </Grid>\n                                    <BannerMessage type={\"error\"} typeCheck={timeLimitError !== ''}>{timeLimitError}</BannerMessage>\n                                    <Grid className={`input-box`}>\n                                        <TextFieldStartAdornment\n                                            startIcon={false}\n                                            placeholder={\"Enter new password\"}\n                                            label={\"Password\"}\n                                            name={\"password\"}\n                                            type=\"password\"\n                                            autoComplete={\"new-password\"}\n                                            error={(newPasswordError || emptyInputError)}\n                                            helperText={\"Your password must have the following:\"}\n                                            onChange={onChangePassword}\n                                        />\n                                        <Grid container item xs={12} className={(!!newPasswordError || !!emptyInputError) ? classes.passwordReq : null}>\n                                            <PasswordRequirements requirements={passwordRequirements} />\n                                        </Grid>\n                                        <TextFieldStartAdornment\n                                            startIcon={false}\n                                            placeholder={\"Re-enter new password\"}\n                                            label={\"Confirm Password\"}\n                                            name={\"confirm-password\"}\n                                            type=\"password\"\n                                            error={passwordUnmatchError}\n                                            helperText={!!passwordUnmatchError && \"Passwords do not match\"}\n                                            autoComplete={\"new-password\"}\n                                            value={confirmPasswordString}\n                                            onChange={(e) => {\n                                                setConfirmPasswordString(e.target.value); // update current input state\n                                                // check if \"password\" is the same as \"confirm-password\"\n                                                e.target.value === formState.password ? setPasswordUnmatchError(false) : setPasswordUnmatchError(true)\n                                            }}\n                                        />\n                                    </Grid>\n                                    <BackAndSubmitButtons\n                                        backAction={() => resetStates(\"signIn\")}\n                                        submitAction={setNewPassword}\n                                        submitMessage={\"Set Password\"}\n                                        loadingState={loading}\n                                    />\n                                </Grid>\n                            )\n                        }\n                    </Grid>\n                </Grid>\n            </Grid>\n        </>\n    );\n}\n\n/* helper components */\n\nconst BannerMessage = (props) => {\n    const { type, typeCheck, children } = props\n\n    const styles = makeStyles((theme) => ({\n        root: {\n            width: \"100%\",\n            margin: theme.spacing(2, 'auto')\n        },\n    }));\n\n    const localStyles = styles();\n\n    return (\n        <Grid>\n            {\n                (!!typeCheck) &&\n                <Grid container item xs={12}>\n                    <Alert\n                        className={localStyles.root}\n                        variant=\"filled\"\n                        severity={type}\n                        elevation={3}\n                    >\n                        {children}\n                    </Alert>\n                </Grid>\n            }\n        </Grid>\n    )\n};\n\nconst SubmitButtonWithLoading = (props) => {\n    const styles = makeStyles((theme) => ({\n        progress: {\n            display: \"flex\",\n            padding: theme.spacing(0, 1)\n        }\n    }));\n\n    const { submitAction, submitMessage, loadingState } = props;\n    const localStyles = styles();\n\n\n    return (\n        <SubmitButton variant=\"contained\" disabled={!!loadingState} onClick={submitAction}>\n            {submitMessage}\n            {/* if it is loading, show the loading indicator */}\n            {!!loadingState && <Grid className={localStyles.progress}><CircularProgress size={15} /></Grid>}\n        </SubmitButton>\n    )\n}\n\nconst BackAndSubmitButtons = ({ backAction, ...others }) => {\n    return (\n        <Grid container item xs={12} justify=\"space-between\" spacing={1}>\n            <Grid container item xs>\n                <DefaultButton variant=\"contained\" startIcon={<ArrowBackIcon />} onClick={backAction}>\n                    Back\n                </DefaultButton>\n            </Grid>\n            <Grid container item md={7} justify={\"flex-end\"}>\n                <SubmitButtonWithLoading {...others} />\n            </Grid>\n        </Grid>\n    )\n};\n\nconst PasswordRequirements = ({ requirements }) => {\n    const styles = makeStyles((theme) => ({\n        valid: {\n            color: green[500]\n        },\n        invalid: {\n            color: red[500]\n        },\n        fontSize: {\n            fontSize: \"0.9rem\",\n        }\n    }));\n\n    const localStyles = styles();\n\n    return (\n        <List dense={true} className={localStyles.root}>\n            {Object.entries(requirements).map((req) => {\n                return (\n                    <ListItem key={req[0]}>\n                        <ListItemIcon>\n                            {req[1].error ? <CheckCircleRoundedIcon className={localStyles.valid} /> : <CancelRoundedIcon className={localStyles.invalid} />}\n                        </ListItemIcon>\n                        <ListItemText\n                            className={localStyles.fontSize}\n                            primary={req[1].description}\n                        />\n                    </ListItem>\n                )\n            })}\n        </List>\n    )\n}\nconst mapStateToProps = (state) => {\n    return {\n        loginState: state.loginState.currentState,\n    };\n};\n\nconst mapDispatchToProps = {\n    updateLoginState,\n};\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\n","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/Views/PageContainer/PageContainer.js",["186","187","188"],"import React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport { Route, Routes, useNavigate, Navigate } from 'react-router-dom';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { connect } from \"react-redux\";\nimport { updateMenuState } from \"../../Actions/menuActions\";\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\n\n// icons\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Divider from '@material-ui/core/Divider';\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\nimport MailIcon from '@material-ui/icons/Mail';\nimport HomeIcon from '@material-ui/icons/Home';\nimport DashboardIcon from '@material-ui/icons/Dashboard';\n\n/** Import Pages **/\nimport Navbar from \"../../components/Navbar/Navbar\";\nimport Error404 from '../Pages/error404';\nimport InvasiveSpeciesPage from '../Pages/InvasiveSpeciesPage';\nimport AlternativeSpeciesPage from '../Pages/AlternativeSpeciesPage';\nimport RegionPage from '../Pages/RegionsPage';\nimport { PlantNet } from '../Pages/pl@ntNet';\nimport DownloadWebscrap from '../Pages/downloadWebscrap';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        display: 'flex',\n    },\n    list: {\n        width: 250,\n    },\n    fullList: {\n        width: 'auto',\n    },\n    drawer: {\n        width: 240,\n        flexShrink: 0,\n    },\n    drawerContainer: {\n        overflow: 'auto',\n    },\n    drawerPaper: {\n        width: 240,\n    },\n    content: {\n        flexGrow: 1,\n        padding: theme.spacing(3),\n    },\n}));\n\n\nfunction PageContainer(props) {\n    const { menuEnabled, updateMenuState } = props;\n    const classes = useStyles();\n    const history = useNavigate();\n\n    /*\n    * Handles closing side menu if an event occurs\n    * */\n    const handleSideMenuClose = () => (event) => {\n        if (event.type === 'keydown' && (event.key === 'Tab' || event.key === 'Shift')) {\n            return;\n        }\n        updateMenuState(false);\n    }\n\n    {/* Example side menu is provided below */ }\n    const list = () => (\n        <div\n            className={classes.drawerContainer}\n            onClick={handleSideMenuClose(false)}\n            onKeyDown={handleSideMenuClose(false)}\n        >\n            <List>\n                <ListItem button key={\"home\"} onClick={() => history.push(\"/home\")}>\n                    <ListItemIcon><HomeIcon /></ListItemIcon>\n                    <ListItemText primary={\"Home\"} />\n                </ListItem>\n                <ListItem button key={\"controlPanel\"} onClick={() => history.push(\"/controlPanel\")}>\n                    <ListItemIcon><DashboardIcon /></ListItemIcon>\n                    <ListItemText primary={\"Control Panel\"} />\n                </ListItem>\n            </List>\n            <Divider />\n            <List>\n                {['Inactive', 'Inactive', 'Inactive'].map((text, index) => (\n                    <ListItem button key={text}>\n                        <ListItemIcon>{index % 2 === 0 ? <InboxIcon /> : <MailIcon />}</ListItemIcon>\n                        <ListItemText primary={text} />\n                    </ListItem>\n                ))}\n            </List>\n        </div>\n    );\n\n    return (<Grid container direction=\"column\">\n        {/* Navbar component, set side menu button parameter -->\n        button updates redux state to show/hide left sidebar */}\n        <Navbar showSideMenuButton={true} />\n        {/* <Header /> */}\n\n        <main className={classes.content}>\n            <Routes>\n                <Route path=\"/\" element={<Navigate to=\"/invasive species\" />} />\n                <Route path=\"/login\" element={<Navigate to=\"/invasive species\" />} />\n                <Route path=\"/invasive species\" element={<InvasiveSpeciesPage />} />\n                <Route path=\"/alternative species\" element={<AlternativeSpeciesPage />} />\n                <Route path=\"/regions\" element={<RegionPage />} />\n\n                <Route path=\"/test\" element={<PlantNet />} />\n                <Route path=\"/download\" element={<DownloadWebscrap />} />\n                <Route path=\"*\" element={<Error404 />} />\n            </Routes>           \n        </main>\n    </Grid>)\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        menuEnabled: state.appState.showSideBar,\n    };\n};\n\nconst mapDispatchToProps = {\n    updateMenuState,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PageContainer);","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/Reducers/loginReducer.js",[],"/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/Reducers/appStateReducer.js",[],"/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/components/Authentication/TextFieldStartAdornment.js",["189"],"import React from 'react';\nimport { Grid, TextField } from '@mui/material';\nimport { InputAdornment } from '@mui/material';\nimport { makeStyles, withStyles } from '@mui/styles';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        fontSize: \"1rem\"\n    },\n    form: {\n        '& .MuiOutlinedInput-root': {\n            '& fieldset': {\n                borderRadius: 0,\n            },\n        },\n    },\n    contained: {\n        marginLeft: 0,\n    }\n}));\n\nexport default function TextFieldStartAdornment(props) {\n    const { startIcon, placeholder, ...other } = props;\n    const classes = useStyles();\n\n    return (\n        <Grid container item direction={\"column\"} className={`input-box ${!startIcon && classes.form}`}>\n            <TextField\n                {...other}\n                required\n                placeholder={placeholder}\n                fullWidth={true}\n                variant=\"outlined\"\n                FormHelperTextProps={{\n                    classes: {\n                        root: classes.root,\n                        contained: classes.contained,\n                    }\n                }}\n                InputProps={{\n                    startAdornment: startIcon && (\n                        <InputAdornment position=\"start\" disablePointerEvents>\n                            {startIcon}\n                        </InputAdornment>\n                    )\n                }}\n                size={startIcon ? \"medium\" : \"small\"}\n            />\n        </Grid>\n    );\n};","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/Actions/menuActions.js",[],"/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/components/Navbar/Navbar.js",["190","191","192","193","194","195"],"import React, { useEffect, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useTheme } from '@material-ui/core/styles';\nimport { useNavigate } from 'react-router-dom';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport AccountBoxIcon from '@material-ui/icons/AccountBox';\nimport MoreIcon from '@material-ui/icons/MoreVert';\nimport Backdrop from '@material-ui/core/Backdrop';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { Auth } from \"aws-amplify\";\nimport { connect } from \"react-redux\";\nimport { updateLoginState } from \"../../Actions/loginActions\";\nimport { updateMenuState } from \"../../Actions/menuActions\";\nimport LogoutIcon from '@mui/icons-material/Logout';\nimport { NavLink, useLocation } from 'react-router-dom';\n\n/* List of tabs for the header */\nconst pages = ['Invasive Species', 'Alternative Species', 'Regions'];\n\nconst useStyles = makeStyles((theme) => ({\n    bold: {\n        fontWeight: 'bold', // Add more styles here if needed\n    },\n    grow: {\n        flexGrow: 1,\n    },\n    appBar: {\n        zIndex: theme.zIndex.drawer + 1,\n    },\n    menuButton: {\n        marginRight: theme.spacing(2),\n    },\n    title: {\n        [theme.breakpoints.up('sm')]: {\n            display: 'block',\n        },\n    },\n    logo: {\n        display: 'none',\n        [theme.breakpoints.up('sm')]: {\n            display: 'block',\n        },\n        paddingLeft: '15px',\n    },\n    sectionDesktop: {\n        display: 'none',\n        [theme.breakpoints.up('md')]: {\n            display: 'flex',\n        },\n    },\n    sectionMobile: {\n        display: 'flex',\n        [theme.breakpoints.up('md')]: {\n            display: 'none',\n        },\n    },\n    backdrop: {\n        zIndex: theme.zIndex.drawer + 1,\n        color: '#fff',\n    },\n    inactiveLink: {\n        fontWeight: 'normal',\n        color: 'white',\n        textDecoration: 'none',\n        '&:hover': {\n            color: '#bccccf',\n        },\n    },\n    inactiveLinkMobile: {\n        fontWeight: 'normal',\n        color: 'black',\n        textDecoration: 'none',\n        '&:hover': {\n            color: '#bccccf',\n        },\n    },\n    activeLink: {\n        color: 'white',\n        textDecoration: 'underline'\n    },\n}));\n\nfunction Navbar(props) {\n    const { updateLoginState, updateMenuState, loginState, menuEnabled, showSideMenuButton } = props;\n    const classes = useStyles();\n    const theme = useTheme();\n    const navigate = useNavigate();\n\n    const [user, setUser] = useState(\"\");\n    const [loadingBackdrop, setLoadingBackdrop] = React.useState(false);\n\n    const [anchorEl, setAnchorEl] = React.useState(null);\n    const [mobileMoreAnchorEl, setMobileMoreAnchorEl] = React.useState(null);\n\n    const isMenuOpen = Boolean(anchorEl);\n    const isMobileMenuOpen = Boolean(mobileMoreAnchorEl);\n\n    const handleProfileMenuOpen = (event) => {\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleMobileMenuClose = () => {\n        setMobileMoreAnchorEl(null);\n    };\n\n    const handleMenuClose = () => {\n        setAnchorEl(null);\n        handleMobileMenuClose();\n    };\n\n    const handleLogout = async () => {\n        setLoadingBackdrop(true);\n        handleMenuClose();\n        await new Promise(r => setTimeout(r, 1000));\n        await onSignOut();\n        setLoadingBackdrop(false);\n    }\n\n    const handleMobileMenuOpen = (event) => {\n        setMobileMoreAnchorEl(event.currentTarget);\n    };\n\n    const menuId = 'primary-search-account-menu';\n    const renderMenu = (\n        <Menu\n            anchorEl={anchorEl}\n            anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\n            id={menuId}\n            keepMounted\n            transformOrigin={{ vertical: 'top', horizontal: 'right' }}\n            open={isMenuOpen}\n            onClose={handleMenuClose}\n        >\n            <MenuItem onClick={handleLogout}><span>Logout  </span><ExitToAppIcon color={\"secondary\"} /></MenuItem>\n        </Menu>\n    );\n\n    const mobileMenuId = 'primary-search-account-menu-mobile';\n    const [activeMenu, setActiveMenu] = useState('');\n    const renderMobileMenu = (\n        <Menu\n            anchorEl={mobileMoreAnchorEl}\n            anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\n            id={mobileMenuId}\n            keepMounted\n            transformOrigin={{ vertical: 'top', horizontal: 'right' }}\n            open={isMobileMenuOpen}\n            onClose={handleMobileMenuClose}\n        >\n            <MenuItem disabled>\n                <AccountBoxIcon /><Typography variant={\"subtitle1\"} noWrap>{user}</Typography>\n            </MenuItem>\n            {/* Page Navigation Menu */}\n            {pages.map((page) => (\n                /* Creates a URL path and button for each page */\n                <NavLink to={\"/\" + page.toLowerCase()} activeStyle={{\n                    color: `${theme.palette.secondary.main}`,\n                    borderRadius: 5,\n                }} className={classes.inactiveLinkMobile} >\n                    <MenuItem>\n                        <span style={{\n                            textTransform: 'capitalize',\n                        }}> {page} </span>\n                    </MenuItem>\n                </NavLink>\n            ))\n            }\n            <MenuItem onClick={handleLogout}><span>Logout  </span><ExitToAppIcon color={\"secondary\"} /></MenuItem>\n        </Menu>\n    );\n\n    useEffect(() => { \n        async function retrieveUser() {\n            try {\n                const returnedUser = await Auth.currentAuthenticatedUser();\n                setUser(returnedUser.attributes.email);\n                // setCurrUser(returnedUser);\n                console.log(\"returned user: \", returnedUser);\n            } catch (e) {\n                console.log(e);\n            }\n        }\n        retrieveUser();\n    }, [loginState])\n\n\n    const handleSideMenu = () => {\n        updateMenuState(!menuEnabled);\n    }\n\n    async function onSignOut() {\n        updateLoginState(\"signIn\");\n        navigate('/');\n        await Auth.signOut();\n    }\n\n    const location = useLocation();\n    const currentPath = decodeURIComponent(location.pathname);\n    const currentPage = currentPath.substring(1);\n\n    return (\n        <Grid item xs={12} className={classes.appBar}>\n            <AppBar position=\"static\" style={{ backgroundColor: '#3f5f70' }}>\n                <Toolbar >\n                    <Typography className={`${classes.title} ${classes.bold}`} variant=\"h6\" component={\"h1\"} noWrap>\n                        Invasive Plants Management System\n                    </Typography>\n                    <div style={{ flex: 1 }} />\n                    <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\n                        {pages.map((page) => (\n                            /* Creates a URL path and button for each page */\n                            <NavLink\n                                to={\"/\" + page.toLowerCase()}\n                                className={`${classes.inactiveLink} ${currentPage === page.toLowerCase() ? classes.activeLink : ''}`}\n                            >\n                                <Typography className={classes.title} variant=\"h6\" component={\"h1\"}>\n                                    <span\n                                        style={{\n                                            paddingLeft: 12,\n                                            paddingRight: 12,\n                                            textTransform: 'capitalize',\n                                        }}\n                                    >\n                                        {page}\n                                    </span>\n                                </Typography>\n                            </NavLink>\n                        ))}\n                    </div>\n                    <div style={{ flex: 1 }} />\n                    <div className={classes.sectionMobile}>\n\n                    </div>\n                    <div className={classes.grow} />\n                    <div className={classes.sectionDesktop}>\n\n                        <div\n                            color=\"inherit\"\n                            style={{ display: \"flex\", alignItems: \"flex-end\", flexDirection: 'column', justifyContent: \"center\" }}>\n                            <Typography variant={\"subtitle2\"} style={{ color: `${theme.palette.secondary.main}` }}>Logged in as </Typography>\n                            <Typography variant={\"subtitle2\"} >{user}</Typography>\n                        </div>\n                        <IconButton\n                            edge=\"end\"\n                            aria-label=\"account of current user\"\n                            aria-controls={menuId}\n                            aria-haspopup=\"true\"\n                            onClick={handleLogout}\n                            color=\"inherit\"\n                        >\n                            <LogoutIcon fontSize={\"large\"} />\n                        </IconButton>\n                    </div>\n                    <div className={classes.sectionMobile}>\n                        <IconButton\n                            aria-label=\"show more\"\n                            aria-controls={mobileMenuId}\n                            aria-haspopup=\"true\"\n                            onClick={handleMobileMenuOpen}\n                            color=\"inherit\"\n                        >\n                            <MoreIcon />\n                        </IconButton>\n                        {renderMobileMenu}\n                        {/* {renderMenu} */}\n                    </div>\n                </Toolbar>\n            </AppBar >\n            <Backdrop className={classes.backdrop} open={loadingBackdrop}>\n                <CircularProgress color=\"inherit\" />\n            </Backdrop>\n        </Grid >\n    )\n\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        loginState: state.loginState.currentState,\n        menuEnabled: state.appState.showSideBar,\n    };\n};\n\nconst mapDispatchToProps = {\n    updateLoginState,\n    updateMenuState,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Navbar);","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/Views/Pages/error404.js",[],"/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/Views/Pages/AlternativeSpeciesPage.js",["196","197","198","199","200","201"],"/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/Views/Pages/InvasiveSpeciesPage.js",["202","203","204","205","206","207","208","209","210","211","212"],"import React, { useState, useEffect } from \"react\";\nimport {\n  InputAdornment, Tooltip, IconButton, Table, TableBody, TableCell, TableHead, TableRow,\n  Button, TextField, Typography, ThemeProvider\n} from \"@mui/material\";\nimport Theme from './Theme';\nimport { Auth } from \"aws-amplify\";\n\n// components\nimport LocationFilterComponent from '../../components/LocationFilterComponent';\nimport SearchComponent from '../../components/SearchComponent';\nimport PaginationComponent from '../../components/PaginationComponent';\nimport EditInvasiveSpeciesDialog from \"../../dialogs/EditInvasiveSpeciesDialog\";\nimport AddInvasiveSpeciesDialog from \"../../dialogs/AddInvasiveSpeciesDialog\";\nimport DeleteDialog from \"../../dialogs/ConfirmDeleteDialog\";\nimport handleGetRegions from \"../../functions/RegionMap\"\n\n// icons\nimport EditIcon from '@mui/icons-material/Edit';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport AddCircleOutlineIcon from '@mui/icons-material/AddCircleOutline';\nimport SearchIcon from '@mui/icons-material/Search';\n\nimport axios from \"axios\";\nimport { boldText, formatString, capitalizeFirstWord } from '../../functions/helperFunctions';\n\n\nfunction InvasiveSpeciesPage() {\n  const API_BASE_URL = process.env.REACT_APP_API_BASE_URL;\n\n  const [allInvasiveSpecies, setAllInvasiveSpecies] = useState([]); // all invasive species in database\n  const [allAlternativeSpecies, setAllAlternativeSpecies] = useState([]); // array of all alternative species\n  const [speciesCount, setSpeciesCount] = useState(0); // number of invasive species\n  const [data, setData] = useState([]);\n  const [displayData, setDisplayData] = useState([]);\n  const [editingSpeciesId, setEditingSpeciesId] = useState(null);\n  const [tempEditingData, setTempEditingData] = useState({});\n  const [openEditSpeciesDialog, setOpenEditSpeciesDialog] = useState(false);\n  const [openAddSpeciesDialog, setOpenAddSpeciesDialog] = useState(false);\n  const [searchInput, setSearchInput] = useState(\"\");\n  const [searchBarResults, setSearchBarResults] = useState(displayData.map((item) => ({\n    label: item.scientific_name,\n    value: item.scientific_name\n  })));\n  const [regionCodeName, setRegionCodeName] = useState([]);\n  const [regionMap, setRegionsMap] = useState({});\n  const [deleteId, setDeleteId] = useState(null);\n  const [openDeleteConfirmation, setOpenDeleteConfirmation] = useState(false);\n  const [region_id, setRegionId] = useState(\"\");\n\n  const [currLastSpeciesId, setCurrLastSpeciesId] = useState(\"\"); // current last species\n  const [lastSpeciesIdHistory, setLastSpeciesIdHistory] = useState(new Set(\"\")); // history of lastSpeciesIds seen for each page\n  const [shouldReset, setShouldReset] = useState(false); // reset above values\n  const [shouldSave, setShouldSave] = useState(false); // reset above values\n\n  const rowsPerPageOptions = [10, 20, 50]; // user selects number of species to display\n  const [rowsPerPage, setRowsPerPage] = useState(rowsPerPageOptions[1]); // start with default 20 rows per page\n  const [page, setPage] = useState(0); // Start with page 0\n  const [disabled, setDisabled] = useState(false); // disabled next button or not\n  const [start, setStart] = useState(0);\n  const [end, setEnd] = useState(0);\n\n  const [user, setUser] = useState(\"\");\n\n\n  // gets current authorized user\n  const retrieveUser = async () => {\n    try {\n      const returnedUser = await Auth.currentAuthenticatedUser();\n      setUser(returnedUser);\n      console.log(\"current user: \", returnedUser);\n    } catch (e) {\n      console.log(\"error getting user: \", e);\n    }\n  }\n\n  // GET regions once\n  useEffect(() => {\n    const fetchRegionData = async () => {\n      try {\n        const regionMap = await handleGetRegions();\n        setRegionsMap(regionMap);\n        // console.log(\"set regions map: \", regionMap)\n      } catch (error) {\n        console.error('error fetching regions', error);\n      }\n    };\n    fetchRegionData();\n  }, []);\n\n  // retriever user on and alternative species on load\n  useEffect(() => {\n    // console.log(\"retrieved user!!! + loading all species\")\n    retrieveUser()\n    loadSpeciesInBackground()\n    console.log(\"finished loading species\")\n  }, [])\n\n  // gets all alternative species in the database\n  const fetchAllInvasiveSpecies = async (lastSpeciesId = null) => {\n    try {\n      const response = await axios.get(`${API_BASE_URL}invasiveSpecies`, {\n        params: {\n          last_species_id: lastSpeciesId,\n          rows_per_page: rowsPerPage\n        },\n        headers: {\n          'x-api-key': process.env.REACT_APP_X_API_KEY\n        }\n      });\n\n      const formattedData = response.data.flatMap(item => {\n        return item.scientific_name.map(name => {\n          const capitalizedScientificName = capitalizeFirstWord(name);\n          return {\n            ...item,\n            scientific_name: capitalizedScientificName\n          };\n        });\n      });\n\n      setAllInvasiveSpecies(prevSpecies => [...prevSpecies, ...formattedData]);\n      setSpeciesCount(prevCount => prevCount + response.data.length)\n\n      // recursively gets species if more exists\n      if (response.data.length === rowsPerPage) {\n        const newLastSpeciesId = response.data[response.data.length - 1].species_id;\n        await fetchAllInvasiveSpecies(newLastSpeciesId);\n      }\n    } catch (error) {\n      console.error(\"Error retrieving invasive species\", error);\n    }\n  };\n\n  // gets all alternative species in the database\n  const fetchAllAlternativeSpecies = async (lastSpeciesId = null) => {\n    try {\n      const response = await axios.get(`${API_BASE_URL}alternativeSpecies`, {\n        params: {\n          last_species_id: lastSpeciesId,\n          rows_per_page: rowsPerPage\n        },\n        headers: {\n          'x-api-key': process.env.REACT_APP_X_API_KEY\n        }\n      });\n\n      const formattedData = response.data.flatMap(item => {\n        return item.scientific_name.map(name => {\n          const capitalizedScientificName = capitalizeFirstWord(name);\n          return {\n            ...item,\n            scientific_name: capitalizedScientificName\n          };\n        });\n      });\n\n      setAllAlternativeSpecies(prevSpecies => [...prevSpecies, ...formattedData]);\n\n      // recursively gets species if more exists\n      if (response.data.length === rowsPerPage) {\n        const newLastSpeciesId = response.data[response.data.length - 1].species_id;\n        await fetchAllAlternativeSpecies(newLastSpeciesId);\n      }\n    } catch (error) {\n      console.error(\"Error retrieving invasive species\", error);\n    }\n  };\n\n  const loadSpeciesInBackground = () => {\n    fetchAllInvasiveSpecies();\n    fetchAllAlternativeSpecies();\n\n  };\n\n  const invasiveSpeciesNames = allInvasiveSpecies.map(species => ({\n    label: species.scientific_name,\n    value: species.scientific_name\n  }));\n\n  // request to GET invasive species in the database\n  const handleGetInvasiveSpecies = () => {\n\n    console.log(\"should reset?: \", shouldReset);\n    console.log(\"rows per page get\", rowsPerPage);\n\n    // request to GET invasive species\n    axios\n      .get(`${API_BASE_URL}invasiveSpecies`, {\n        params: {\n          last_species_id: shouldReset ? null : currLastSpeciesId, // default first page\n          rows_per_page: rowsPerPage // default 20\n        },\n        headers: {\n          'x-api-key': process.env.REACT_APP_X_API_KEY\n        }\n      })\n      .then((response) => {\n\n        const promises = response.data.flatMap(item =>\n          item.region_id.map(regionId =>\n            axios.get(`${API_BASE_URL}region/${regionId}`, {\n              headers: {\n                'x-api-key': process.env.REACT_APP_X_API_KEY\n              }\n            })\n          )\n        );\n\n        return Promise.all(promises)\n          .then(regionResponses => {\n            const formattedData = response.data.map((item, index) => {\n              return {\n                ...item,\n                scientific_name: item.scientific_name.map(name => capitalizeFirstWord(name))\n              };\n            });\n\n            console.log(\"Invasive species retrieved successfully\", formattedData);\n\n            // reset pagination details\n            if (shouldReset) {\n              setLastSpeciesIdHistory(new Set())\n              // setLastSpeciesNameHistory(new Set())\n              setPage(0);\n              setStart(0);\n              setEnd(0);\n              setShouldReset(false);\n              console.log(\"reset pagination details\")\n            }\n\n            setDisplayData(formattedData);\n            setData(formattedData);\n\n            // update lastSpeciesId with the species_id of the last row displayed in the table\n            if (formattedData.length > 0) {\n              const newLastSpeciesId = formattedData[formattedData.length - 1].species_id;\n\n              setCurrLastSpeciesId(newLastSpeciesId);\n              setLastSpeciesIdHistory(history => new Set([...history, newLastSpeciesId]));\n            }\n          });\n      }).catch((error) => {\n        console.error(\"Error retrieving invasive species\", error);\n      });\n  };\n\n\n  useEffect(() => {\n    if (shouldSave) {\n      // request to GET invasive species\n      axios\n        .get(`${API_BASE_URL}invasiveSpecies`, {\n          params: {\n            last_species_id: currLastSpeciesId ? currLastSpeciesId : null, // default first page\n            rows_per_page: rowsPerPage // default 20\n          },\n          headers: {\n            'x-api-key': process.env.REACT_APP_X_API_KEY\n          }\n        })\n        .then((response) => {\n          const formattedData = response.data.map((item, index) => {\n            return {\n              ...item,\n              scientific_name: item.scientific_name.map(name => capitalizeFirstWord(name))\n            };\n          });\n\n          console.log(\"Invasive species retrieved successfully\", formattedData);\n\n          // update states\n          setDisplayData(formattedData);\n          // update lastSpeciesId with the species_id of the last row displayed in the table\n          if (formattedData.length > 0) {\n            const newLastSpeciesId = formattedData[formattedData.length - 1].species_id;\n\n            setCurrLastSpeciesId(newLastSpeciesId);\n            setLastSpeciesIdHistory(history => new Set([...history, newLastSpeciesId]));\n          }\n        })\n        .catch((error) => {\n          console.error(\"Error getting invasive species\", error);\n        })\n        .finally(() => {\n          setShouldSave(false);\n        });\n      // });\n    }\n  }, [shouldSave]);\n\n  // fetches alternative species data \n  const handleGetInvasiveSpeciesAfterSave = () => {\n    console.log(\"curr:\", currLastSpeciesId, \"history:\", lastSpeciesIdHistory);\n\n    if (lastSpeciesIdHistory.size > 1) {\n      const updatedIdHistory = Array.from(lastSpeciesIdHistory);\n      updatedIdHistory.pop(); // Remove the last element\n\n      setLastSpeciesIdHistory(new Set(updatedIdHistory));\n\n      const prevSpeciesId = updatedIdHistory[updatedIdHistory.length - 1];\n      setCurrLastSpeciesId(prevSpeciesId);\n\n      setShouldSave(true)\n    }\n  };\n\n  // GET invasive species in the database that matches user search\n  const handleGetInvasiveSpeciesAfterSearch = () => {\n    const formattedSearchInput = searchInput.toLowerCase().replace(/ /g, '_'); \n    console.log(\"formatted search input: \", formattedSearchInput);\n\n    axios\n      .get(`${API_BASE_URL}invasiveSpecies`, {\n        params: {\n          scientific_name: formattedSearchInput,\n        },\n        headers: {\n          'x-api-key': process.env.REACT_APP_X_API_KEY\n        }\n      })\n      .then((response) => {\n        const promises = response.data.flatMap(item =>\n          item.region_id.map(regionId =>\n            axios\n              .get(`${API_BASE_URL}region/${regionId}`, {\n                headers: {\n                  'x-api-key': process.env.REACT_APP_X_API_KEY\n                }\n              })\n          )\n        );\n\n        return Promise.all(promises)\n          .then(regionResponses => {\n            const formattedData = response.data.map((item, index) => {\n              return {\n                ...item,\n                scientific_name: item.scientific_name.map(name => capitalizeFirstWord(name))\n              };\n            });\n\n            console.log(\"Invasive species retrieved successfully\", formattedData);\n\n            setDisplayData(formattedData);\n          });\n      }).catch((error) => {\n        console.error(\"Error searching up invasive species\", error);\n      });\n  };\n\n  const handleReset = () => {\n    console.log(\"reset data\");\n    setShouldReset(true);\n    setSearchInput(\"\");\n    handleGetInvasiveSpecies();\n  }\n\n  // filters data of current page that matches search input and region id\n  useEffect(() => {\n    const filteredData = data.filter((item) => {\n      const matchesSearchInput = searchInput === \"\" ||\n        item.scientific_name.some((name) => name.toLowerCase().includes(searchInput.toLowerCase())\n      );\n\n      const matchesRegionID = region_id === \"\" ||\n        item.region_id.includes(region_id);\n\n      return matchesSearchInput && matchesRegionID;\n    });\n\n    if (searchInput === \"\") {\n      // do nothing\n    } else {\n      setDisplayData(filteredData);\n    }\n\n    // Update search results based on filtered data\n    const results = filteredData.map((item) => ({\n      label: item.scientific_name,\n      value: item.scientific_name,\n    }));\n\n    setSearchBarResults(results);\n  }, [searchInput, data, regionMap, region_id]);\n\n\n  // edit species row\n  const startEdit = (id, rowData) => {\n    setEditingSpeciesId(id);\n    setTempEditingData(rowData);\n    setOpenEditSpeciesDialog(true);\n  };\n\n  // helper function after saving \n  const handleFinishEditingRow = () => {\n    setOpenEditSpeciesDialog(false);\n    setEditingSpeciesId(null);\n  };\n\n  // saves edited row\n  const handleSave = (confirmed) => {\n    retrieveUser();\n    const jwtToken = user.signInUserSession.accessToken.jwtToken\n\n    console.log(\"got here\");\n    const splitByCommaWithSpaces = (value) => value.split(/,\\s*|\\s*,\\s*/);\n\n    if (confirmed) {\n      // make sure that fields are proper data structure\n      let scientificNames = [];\n      if (typeof tempEditingData.scientific_name === 'string') {\n        scientificNames = formatString(tempEditingData.scientific_name)\n          .map(name => name.toLowerCase().replace(/\\s+/g, '_'));\n      } else if (Array.isArray(tempEditingData.scientific_name)) {\n        scientificNames = tempEditingData.scientific_name.map(name => name.toLowerCase().replace(/\\s+/g, '_'));\n      }\n\n      let updatedTempData = {\n        ...tempEditingData,\n        scientific_name: scientificNames\n      };\n\n      console.log(\"updated temp data: \", updatedTempData)\n      const { region_code_name, alternative_species, ...rest } = updatedTempData;\n\n      // get just the ids of alt species\n      const alternativeSpeciesIds = alternative_species.map(species => species.species_id);\n\n      const updatedTempDataWithoutRegionCode = {\n        ...rest,\n        alternative_species: alternativeSpeciesIds,\n      };\n\n      console.log(\"saved invasive species data: \", updatedTempDataWithoutRegionCode);\n\n      // request to PUT updated invasive species to the database\n      axios\n        .put(`${API_BASE_URL}invasiveSpecies/${tempEditingData.species_id}`,\n          updatedTempDataWithoutRegionCode,\n          {\n            headers: {\n              'Authorization': `${jwtToken}`\n            }\n          })\n        .then((response) => {\n          console.log(\"invasive species updated successfully\", response.data);\n          if (start > rowsPerPage) {\n            handleGetInvasiveSpeciesAfterSave();\n          } else {\n            setShouldReset(true);\n          }\n          handleFinishEditingRow();\n        })\n        .catch((error) => {\n          console.error(\"Error updating species\", error);\n        });\n  };\n  };\n\n  // delete row with confirmation before deletion\n  const handleDeleteRow = (species_id) => {\n    setDeleteId(species_id);\n    setOpenDeleteConfirmation(true);\n  };\n\n  // confirm delete of species\n  const handleConfirmDelete = () => {\n    console.log(\"invasive species id to delete: \", deleteId);\n\n    retrieveUser();\n    const jwtToken = user.signInUserSession.accessToken.jwtToken\n    console.log(\"token: \", jwtToken)\n\n    // request to DELETE species from the database\n    if (deleteId) {\n      axios\n        .delete(`${API_BASE_URL}invasiveSpecies/${deleteId}`,\n          {\n            headers: {\n              'Authorization': `${jwtToken}`\n            }\n          })\n        .then((response) => {\n          setShouldReset(true);\n          console.log(\"Species deleted successfully\", response.data);\n        })\n        .catch((error) => {\n          console.error(\"Error deleting species\", error);\n        })\n        .finally(() => {\n          setOpenDeleteConfirmation(false);\n        });\n    } else {\n      setOpenDeleteConfirmation(false);\n    }\n  };\n\n  // add species\n  const handleAddSpecies = (newSpeciesData) => {\n    retrieveUser();\n    const jwtToken = user.signInUserSession.accessToken.jwtToken\n\n    // format scientific names\n    newSpeciesData = {\n      ...newSpeciesData,\n      scientific_name: newSpeciesData.scientific_name.map(name =>\n        name.toLowerCase().replace(/\\s+/g, '_')\n      )\n    }\n    console.log(\"new invasive species: \", newSpeciesData);\n\n    // POST new species to database\n    axios\n      .post(API_BASE_URL + \"invasiveSpecies\", newSpeciesData,\n        {\n          headers: {\n            'Authorization': `${jwtToken}`\n          }\n        })\n      .then((response) => {\n        console.log(\"Invasive Species added successfully\", response.data);\n        setShouldReset(true);\n        // handleGetInvasiveSpecies();\n        setOpenAddSpeciesDialog(false);\n      })\n      .catch((error) => {\n        console.error(\"Error adding invasive species\", error);\n      });\n  };\n\n  // execute handleGetInvasiveSpecies after shouldReset state update\n  useEffect(() => {\n    if (shouldReset) {\n      handleGetInvasiveSpecies();\n    }\n  }, [shouldReset]);\n\n  // Updates temporary row data when field inputs change\n  const handleInputChange = (field, value) => {\n    console.log(\"value: \", value);\n\n    if (field === \"region_code_name\") {\n      const selectedRegionCodes = value.map((region_id) => regionMap[region_id]);\n      setTempEditingData((prev) => ({ ...prev, region_id: value, region_code_name: selectedRegionCodes }));\n    }\n    else {\n      setTempEditingData((prev) => ({ ...prev, [field]: value }));\n    }\n  };\n\n  // search species\n  const handleSearch = (searchInput) => {\n    console.log(\"search input: \", searchInput);\n\n    if (searchInput === \"\") {\n      setDisplayData(data);\n    } else {\n      const terms = searchInput.toLowerCase().split(\" \");\n      const results = data.filter((item) => {\n        const scientificNameMatch = Array.isArray(item.scientific_name)\n          ? item.scientific_name.some((name) =>\n            terms.every((term) => name.toLowerCase().includes(term))\n          )\n          : terms.every((term) =>\n          item.scientific_name.toLowerCase().includes(term)\n        );\n\n        return scientificNameMatch || searchInput === item.scientific_name.join(\", \");\n      });\n\n      setDisplayData(results);\n    }\n  };\n\n  // search location\n  const handleLocationSearch = (locationInput) => {\n    if (locationInput === \"\") {\n      setDisplayData(data);\n    } else {\n      const results = data.filter((item) =>\n        item.region_id.some(\n          (id) =>\n            regionMap[id] &&\n            regionMap[id].toLowerCase().trim() === locationInput.toLowerCase().trim()\n        )\n      );\n      setDisplayData(results);\n    }\n  }\n\n  // calculates start and end indices of the current displayed data in the entire data\n  const calculateStartAndEnd = () => {\n    const newStart = page * rowsPerPage + 1;\n    const newEnd = Math.min((page + 1) * rowsPerPage, (page * rowsPerPage) + displayData.length);\n    setStart(newStart);\n    setEnd(newEnd);\n  };\n\n  useEffect(() => {\n    calculateStartAndEnd();\n  }, [page, rowsPerPage, displayData]);\n\n  useEffect(() => {\n    console.log(\"rows per page changed!!: \", rowsPerPage);\n    setShouldReset(true);\n    handleGetInvasiveSpecies()\n  }, [rowsPerPage]);\n\n  // updates page count\n  const handleNextPage = () => {\n    setPage(page + 1); // Increment the page by 1 on \"Next\" button click\n  };\n\n  // updates page count and history of species seen\n  const handlePreviousPage = () => {\n    if (lastSpeciesIdHistory.size > 1) {\n      const updatedIdHistory = new Set([...lastSpeciesIdHistory]);\n      updatedIdHistory.delete([...updatedIdHistory].pop()); // remove last item from the Set\n      setLastSpeciesIdHistory(updatedIdHistory);\n\n      // gets the previous species id\n      const prevSpeciesId = [...updatedIdHistory][[...updatedIdHistory].length - 2];\n      setCurrLastSpeciesId(prevSpeciesId);\n      setPage(page - 1);\n    }\n  };\n\n  // gets next/previous set of species on page change\n  useEffect(() => {\n    handleGetInvasiveSpecies();\n  }, [page]);\n\n\n  // disables the next button if there are no species left to query\n  useEffect(() => {\n    console.log(\"displayDataCount: \", displayData.length);\n    console.log(\"rows per page: \", rowsPerPage);\n\n    if (displayData.length === 0 || displayData.length < rowsPerPage) {\n      setDisabled(true);\n    } else {\n      setDisabled(false);\n    }\n  }, [displayData, rowsPerPage]);\n\n  return (\n    <div style={{ width: \"100%\", display: \"flex\", flexDirection: \"column\", alignItems: \"center\" }}>\n\n      {/* location and search bars*/}\n      <div style={{ display: \"flex\", justifyContent: \"center\", width: \"90%\" }}>\n        <LocationFilterComponent\n          text={\"Search by region\"}\n          inputData={regionMap}\n          handleLocationSearch={handleLocationSearch}\n          location={regionCodeName}\n          setLocation={setRegionCodeName}\n        />\n\n        <SearchComponent\n          text={\"Search invasive species (scientific name)\"}\n          handleSearch={handleSearch}\n          searchResults={invasiveSpeciesNames}\n          searchTerm={searchInput}\n          setSearchTerm={setSearchInput}\n        />\n\n        <ThemeProvider theme={Theme}>\n          <Button variant=\"contained\" onClick={() => handleGetInvasiveSpeciesAfterSearch()} style={{ marginLeft: \"20px\", marginTop: \"27px\", width: \"10%\", height: \"53px\", alignItems: \"center\" }}>\n            <SearchIcon sx={{ marginRight: '0.8rem' }} />Search\n          </Button>\n        </ThemeProvider>\n      </div>\n\n      {/* button to add species */}\n      <div style={{ display: 'flex', justifyContent: 'center', marginTop: '20px' }}>\n        <ThemeProvider theme={Theme}>\n          <Button variant=\"contained\" onClick={() => setOpenAddSpeciesDialog(true)} startIcon={<AddCircleOutlineIcon />}>\n            Add Invasive Species\n          </Button>\n        </ThemeProvider>\n      </div>\n\n      {/* pagination selections*/}\n      <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'flex-end', marginTop: '10px', marginBottom: '10px', marginLeft: \"67%\" }}>\n        {/* Dropdown for selecting rows per page */}\n        <span style={{ marginRight: '10px' }}>Rows per page:</span>\n        <select value={rowsPerPage} onChange={(e) => setRowsPerPage(Number(e.target.value))}>\n          {rowsPerPageOptions.map((option) => (\n            <option key={option} value={option}>\n              {option}\n            </option>\n          ))}\n        </select>\n\n        <PaginationComponent\n          start={start}\n          end={end}\n          count={speciesCount}\n          page={page}\n          handlePreviousPage={handlePreviousPage}\n          handleNextPage={handleNextPage}\n          disabled={disabled}\n        />\n      </div>\n\n      {/* table */}\n      <div style={{ width: \"90%\", display: \"flex\", justifyContent: \"center\" }}>\n        <Table style={{ width: \"100%\", tableLayout: \"fixed\" }}>\n          {/* table header */}\n          <TableHead>\n            <TableRow>\n              <TableCell style={{ width: \"10%\" }}>\n                <Typography variant=\"subtitle1\" fontWeight=\"bold\">\n                  Scientific Name\n                </Typography>\n              </TableCell>\n              <TableCell style={{ width: \"35%\" }}>\n                <Typography variant=\"subtitle1\" fontWeight=\"bold\">\n                  Description\n                </Typography>\n              </TableCell>\n              <TableCell style={{ width: \"13%\" }}>\n                <Typography variant=\"subtitle1\" fontWeight=\"bold\">\n                  Alternative Species\n                </Typography>\n              </TableCell>\n              <TableCell style={{ width: \"12%\", whiteSpace: 'normal', wordWrap: 'break-word' }}>\n                <Typography variant=\"subtitle1\" fontWeight=\"bold\">\n                  Resources\n                </Typography>\n              </TableCell>\n              <TableCell style={{ width: \"7%\" }}>\n                <Typography variant=\"subtitle1\" fontWeight=\"bold\">\n                  Region(s)\n                </Typography>\n              </TableCell>\n              <TableCell style={{ width: \"7%\" }}>\n                <Typography variant=\"subtitle1\" fontWeight=\"bold\">\n                  Actions\n                </Typography>\n              </TableCell>\n            </TableRow>\n          </TableHead>\n\n          {/* table body: display species */}\n          <TableBody>\n            {displayData &&\n              (region_id !== \"\"\n                ? displayData\n                .filter((item) => {\n                  item.region_id.some((id) => regionMap[id] === region_id)\n                })\n                // .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                .map((row) => (\n                    <TableRow key={row.species_id}>\n                      {/* editing the row */}\n                    {editingSpeciesId === row.species_id ? (\n                        <>\n                          {/* scientific name */}\n                          <TableCell sx={{ whiteSpace: 'normal', wordWrap: 'break-word' }}>\n                            <TextField\n                              value={\n                              Array.isArray(tempEditingData.scientific_name)\n                                ? tempEditingData.scientific_name.join(\", \")\n                                : tempEditingData.scientific_name\n                              }\n                              onChange={(e) =>\n                                handleInputChange(\"scientific_name\", e.target.value)\n                              }\n                            />\n                          </TableCell>\n\n\n                          {/* decsription */}\n                          <TableCell sx={{ whiteSpace: 'normal', wordWrap: 'break-word' }}>\n                            <TextField\n                            value={boldText(tempEditingData.species_description)}\n                              onChange={(e) =>\n                                handleInputChange(\"species_description\", e.target.value)\n                              }\n                            />\n                          </TableCell>\n\n                          {/* alternative plants */}\n                          <TableCell sx={{ whiteSpace: 'normal', wordWrap: 'break-word' }}>\n                          <TextField\n                            onChange={(e) =>\n                              handleInputChange(\n                                  \"alternative_species\",\n                                  e.target.value.split(\", \")\n                                )\n                              }\n                            />\n                          </TableCell>\n\n                          {/* links */}\n                          <TableCell sx={{ whiteSpace: 'normal', wordWrap: 'break-word' }}>\n                          <TextField\n                            value={\n                              Array.isArray(tempEditingData.resource_links)\n                                ? tempEditingData.resource_links.join(\", \")\n                                : tempEditingData.resource_links\n                            }\n                            onChange={(e) =>\n                              handleInputChange(\n                                \"resource_links\",\n                                e.target.value.split(\", \")\n                              )\n                            }\n                            InputProps={{\n                              endAdornment: (\n                                <InputAdornment position=\"end\">\n                                  {Array.isArray(tempEditingData.resource_links) ? (\n                                    tempEditingData.resource_links.map((link, index) => (\n                                      <span key={index}>\n                                        <a\n                                          href={link}\n                                          target=\"_blank\"\n                                          rel=\"noopener noreferrer\"\n                                        >\n                                          {link}\n                                        </a>\n                                        <br />\n                                        <br />\n                                      </span>\n                                    ))\n                                  ) : (\n                                    <span>\n                                      <a\n                                          href={tempEditingData.resource_links}\n                                        target=\"_blank\"\n                                        rel=\"noopener noreferrer\"\n                                      >\n                                          {tempEditingData.resource_links}\n                                      </a>\n                                      <br />\n                                      <br />\n                                    </span>\n                                  )}\n                                </InputAdornment>\n                              ),\n                            }}\n                          />\n                          </TableCell>\n\n                          {/* region */}\n                          <TableCell sx={{ whiteSpace: 'normal', wordWrap: 'break-word' }}>\n                            <TextField\n                            value={tempEditingData.region_id.map((id) => regionMap[id]).join(\", \")}\n                              onChange={(e) =>\n                                handleInputChange(\n                                  \"region_code_name\",\n                                  e.target.value.split(\", \")\n                                )\n                              }\n                            />\n                          </TableCell>\n\n                          {/* edit/delete */}\n                          <TableCell>\n                            <Tooltip title=\"Edit\"\n                              onClick={() => startEdit(row.species_id, row)}>\n                              <IconButton>\n                                <EditIcon />\n                              </IconButton>\n                            </Tooltip>\n                            <Tooltip\n                              title=\"Delete\"\n                              onClick={() => handleDeleteRow(row.species_id, row)}>\n                              <IconButton>\n                                <DeleteIcon />\n                              </IconButton>\n                            </Tooltip>\n                          </TableCell>\n                        </>\n                      ) : (\n                        <>\n                            <TableCell sx={{ whiteSpace: 'normal', wordWrap: 'break-word' }}>\n                              {Array.isArray(row.scientific_name)\n                                ? row.scientific_name.join(\", \")\n                                : row.scientific_name}\n                            </TableCell>\n                            <TableCell sx={{ whiteSpace: 'normal', wordWrap: 'break-word' }} >{boldText(row.species_description)}</TableCell>\n                            <TableCell sx={{ whiteSpace: 'normal', wordWrap: 'break-word' }}>\n                              {Array.isArray(row.alternative_species)\n                                ? row.alternative_species.map((item) => item.scientific_name).join(\", \")\n                                : row.alternative_species}\n                          </TableCell>\n                          <TableCell sx={{ whiteSpace: 'normal', wordWrap: 'break-word' }}>\n                            {Array.isArray(row.resource_links) ? (\n                              row.resource_links.map((link, index) => (\n                                <span key={index}>\n                                  <a href={link} target=\"_blank\" rel=\"noopener noreferrer\">\n                                    {link}\n                                  </a>\n                                  <br />\n                                  <br />\n                                </span>\n                              ))\n                            ) : (\n                              <span>\n                                <a href={row.resource_links} target=\"_blank\" rel=\"noopener noreferrer\">\n                                  {row.resource_links}\n                                </a>\n                                <br />\n                                <br />\n                              </span>\n                            )}\n                          </TableCell>\n                            <TableCell sx={{ whiteSpace: 'normal', wordWrap: 'break-word' }}>\n                            {Array.isArray(row.region_id)\n                              ? row.region_id.map((id) => regionMap[id]).join(\", \")\n                              : regionMap[row.region_id]}                        \n                          </TableCell>\n                          <TableCell>\n                            <Tooltip title=\"Edit\"\n                                onClick={() => startEdit(row.species_id, row)}>\n                              <IconButton>\n                                <EditIcon />\n                              </IconButton>\n                            </Tooltip>\n                            <Tooltip\n                              title=\"Delete\"\n                                onClick={() => handleDeleteRow(row.species_id, row)}>\n                              <IconButton>\n                                <DeleteIcon />\n                              </IconButton>\n                            </Tooltip>\n                          </TableCell>\n                        </>\n                      )}\n                    </TableRow>\n                  ))\n              : displayData\n                  .map((row) => (\n                    <TableRow key={row.species_id}>\n                      {/* editing the row */}\n                      {editingSpeciesId === row.species_id ? (\n                        <>\n                          {/* scientific name */}\n                          <TableCell sx={{ whiteSpace: 'normal', wordWrap: 'break-word' }}>\n                            <TextField\n                              value={\n                                Array.isArray(tempEditingData.scientific_name)\n                                  ? tempEditingData.scientific_name.join(\", \")\n                                  : tempEditingData.scientific_name\n                              }\n                              onChange={(e) =>\n                                handleInputChange(\"scientific_name\", e.target.value)\n                              }\n                            />\n                          </TableCell>\n\n                          {/* decsription */}\n                          <TableCell sx={{ whiteSpace: 'normal', wordWrap: 'break-word' }}>\n                            <TextField\n                              value={boldText(tempEditingData.species_description)}\n                              onChange={(e) =>\n                                handleInputChange(\"species_description\", e.target.value)\n                              }\n                            />\n                          </TableCell>\n\n                          {/* alternative plants */}\n                          <TableCell sx={{ whiteSpace: 'normal', wordWrap: 'break-word' }}>\n                            <TextField\n                              onChange={(e) =>\n                                handleInputChange(\n                                  \"alternative_species\",\n                                  e.target.value.split(\", \")\n                                )\n                              }\n                            />\n                          </TableCell>\n\n                          {/* links */}\n                          <TableCell sx={{ whiteSpace: 'normal', wordWrap: 'break-word' }}>\n                            <TextField\n                              value={\n                                Array.isArray(tempEditingData.resource_links)\n                                  ? tempEditingData.resource_links.join(\", \")\n                                  : tempEditingData.resource_links\n                              }\n                              onChange={(e) =>\n                                handleInputChange(\n                                  \"resource_links\",\n                                  e.target.value.split(\", \")\n                                )\n                              }\n                              InputProps={{\n                                endAdornment: (\n                                  <InputAdornment position=\"end\">\n                                    {Array.isArray(tempEditingData.resource_links) ? (\n                                      tempEditingData.resource_links.map((link, index) => (\n                                        <span key={index}>\n                                          <a\n                                            href={link}\n                                            target=\"_blank\"\n                                            rel=\"noopener noreferrer\"\n                                          >\n                                            {link}\n                                          </a>\n                                          <br />\n                                          <br />\n                                        </span>\n                                      ))\n                                    ) : (\n                                      <span>\n                                        <a\n                                            href={tempEditingData.resource_links}\n                                          target=\"_blank\"\n                                          rel=\"noopener noreferrer\"\n                                        >\n                                            {tempEditingData.resource_links}\n                                        </a>\n                                        <br />\n                                        <br />\n                                      </span>\n                                    )}\n                                  </InputAdornment>\n                                ),\n                              }}\n                            />\n                          </TableCell>\n\n                          {/* region */}\n                          <TableCell sx={{ whiteSpace: 'normal', wordWrap: 'break-word' }}>\n                            <TextField\n                              value={tempEditingData.region_id.map((id) => regionMap[id]).join(\", \")}\n                              onChange={(e) =>\n                                handleInputChange(\n                                  \"region_code_name\",\n                                  e.target.value.split(\", \")\n                                )\n                              }\n                            />\n                          </TableCell>\n\n                          {/* edit/delete */}\n                          <TableCell>\n                            <Tooltip title=\"Edit\"\n                              onClick={() => startEdit(row.species_id, row)}>\n                              <IconButton>\n                                <EditIcon />\n                              </IconButton>\n                            </Tooltip>\n                            <Tooltip\n                              title=\"Delete\"\n                              onClick={() => handleDeleteRow(row.species_id, row)}>\n                              <IconButton>\n                                <DeleteIcon />\n                              </IconButton>\n                            </Tooltip>\n                          </TableCell>\n                        </>\n                      ) : (\n                          <>\n                            <TableCell sx={{ whiteSpace: 'normal', wordWrap: 'break-word' }}>\n                              {Array.isArray(row.scientific_name)\n                                ? row.scientific_name.join(\", \")\n                                : row.scientific_name}\n                            </TableCell>\n                            <TableCell>{boldText(row.species_description)}</TableCell>\n                            <TableCell sx={{ whiteSpace: 'normal', wordWrap: 'break-word' }}>\n                              {Array.isArray(row.alternative_species)\n                                ? row.alternative_species.map((item) => item.scientific_name).join(\", \")\n                                : row.alternative_species}\n                          </TableCell>\n                            <TableCell sx={{ whiteSpace: 'normal', wordWrap: 'break-word' }}>\n                              {Array.isArray(row.resource_links) ? (\n                                row.resource_links.map((link, index) => (\n                                  <span key={index}>\n                                    <a href={link} target=\"_blank\" rel=\"noopener noreferrer\">\n                                      {link}\n                                    </a>\n                                    <br />\n                                    <br />\n                                  </span>\n                                ))\n                              ) : (\n                                <span>\n                                  <a href={row.resource_links} target=\"_blank\" rel=\"noopener noreferrer\">\n                                    {row.resource_links}\n                                  </a>\n                                  <br />\n                                  <br />\n                                </span>\n                              )}\n                            </TableCell>\n\n                            <TableCell sx={{ whiteSpace: 'normal', wordWrap: 'break-word' }}>\n                              {Array.isArray(row.region_id)\n                                ? row.region_id.map((id) => regionMap[id]).join(\", \")\n                                : regionMap[row.region_id]}\n                          </TableCell>\n                          <TableCell>\n                            <Tooltip title=\"Edit\"\n                                onClick={() => startEdit(row.species_id, row)}>\n                              <IconButton>\n                                <EditIcon />\n                              </IconButton>\n                            </Tooltip>\n                            <Tooltip\n                              title=\"Delete\"\n                                onClick={() => handleDeleteRow(row.species_id, row)}>\n                              <IconButton>\n                                <DeleteIcon />\n                              </IconButton>\n                            </Tooltip>\n                          </TableCell>\n                        </>\n                      )}\n                    </TableRow>\n                  )))}\n          </TableBody>\n        </Table>\n      </div >\n\n      <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'flex-end', marginTop: '10px', marginBottom: '10px', marginLeft: \"78%\" }}>\n        <PaginationComponent\n          start={start}\n          end={end}\n          count={speciesCount}\n          page={page}\n          handlePreviousPage={handlePreviousPage}\n          handleNextPage={handleNextPage}\n          disabled={disabled}\n        />\n      </div >\n\n      <AddInvasiveSpeciesDialog\n        open={openAddSpeciesDialog}\n        handleClose={() => setOpenAddSpeciesDialog(false)}\n        handleAdd={handleAddSpecies}\n        data={displayData}\n        alternativeSpeciesData={allAlternativeSpecies}\n      />\n\n      <EditInvasiveSpeciesDialog\n        open={openEditSpeciesDialog}\n        tempData={tempEditingData}\n        handleInputChange={handleInputChange}\n        handleFinishEditingRow={handleFinishEditingRow}\n        handleSave={handleSave}\n        alternativeSpeciesData={allAlternativeSpecies}\n      />\n\n      <DeleteDialog\n        open={openDeleteConfirmation}\n        handleClose={() => setOpenDeleteConfirmation(false)}\n        handleDelete={handleConfirmDelete}\n      />\n    </div >\n  );\n}\n\nexport default InvasiveSpeciesPage;\n","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/Views/Pages/pl@ntNet.js",["213","214","215","216","217","218","219","220","221","222","223"],"import React, { useState, useCallback, useEffect, useRef } from 'react';\nimport axios from 'axios';\nimport { saveAs } from 'file-saver';\nimport { webscrapeBCInvasive, webscrapeONInvasive } from '../../functions/webscrape';\nimport { webscrapeWikipedia } from '../../functions/webscrapeWiki';\nimport { webscrapeInvasiveSpecies, flagedSpeciesToPlanetAPI, fullIntegrationOfFlaggingSpecies, dataPipelineForDB } from '../../functions/pipeline';\n\n// const FormData = require('form-data');\nimport { speciesDataToJSON } from '../../functions/speciesToJSON';\n\nfunction PlantNet() {\n    const [selectedLanguage, setSelectedLanguage] = useState('en');\n    const [selectedLocation, setSelectedLocation] = useState('ON');\n    const [selectedFile, setSelectedFile] = useState(null);\n    const [modelResult, setModelResult] = useState(undefined);\n    const [modelObjResult, setModelResultObj] = useState([]);\n    const [numImages, setNumImages] = useState(0);\n    const [isFileSaved, setIsFileSaved] = useState(false);\n    const formRef = useRef(null);\n\n    // Handle for submiting the form\n    const handleSubmit = (event) => {\n        event.preventDefault();\n\n        const formData = new FormData(formRef.current);\n        const formDataPlantNet = new FormData();\n        let acceptedImage = 0;\n\n        // Add all organ into one\n        for (let i = 0; i <= numImages; i++) {\n            const image = formData.get('images' + i.toString());\n            const organ = formData.get('organs' + i.toString());\n\n            if (image && image.name) {\n                formDataPlantNet.append('organs', organ);\n                formDataPlantNet.append('images', image);\n\n                console.log(\"organs: \", organ, \"images:\", image);\n                acceptedImage++;\n            }\n        }\n\n        // Submit form to Pl@ntNet API\n        const project = 'all';\n        const url = 'https://my-api.plantnet.org/v2/identify/' + project + `?api-key=${process.env.REACT_APP_PLANTNET_API_KEY}&include-related-images=true&lang=${selectedLanguage}`;\n        axios.post(url, formDataPlantNet, {\n            headers: {\n                'Content-Type': `multipart/form-data`\n            }\n        })\n            .then((response) => {\n                // Handle success, e.g., show a success message to the user.\n                console.log('File uploaded successfully: ', response.data);\n                setModelResultObj(response.data);\n                setModelResult(JSON.stringify(response.data, null, 2));\n            })\n            .catch((error) => {\n                const keyWord = \"not found\";\n                if (error.response.status === 404 && error.response.data.message.toString().includes(keyWord)) {\n                    setModelResult(error.response.data.message.toString());\n                }\n                console.error('Error uploading file:', error);\n                // Handle error, e.g., show an error message to the user.\n            });\n    }\n\n    const handleLanguageSelection = (event) => {\n        console.log(\"language: \", event.target.value)\n        setSelectedLanguage(event.target.value);\n    }\n\n    const handleLocationSelection = (event) => {\n        console.log(\"location: \", event.target.value)\n        setSelectedLocation(event.target.value);\n    }\n\n    // get top 3 results\n    const getSpeciesResultInfo = useCallback(async (results) => {\n        let speciesInfoArray = [];\n        let count = 0;\n\n        for (let i = 0; i < results.length; i++) {\n            if (count < 3) {\n                let res = results[i];\n                let commonName = res.species.commonNames;\n                let scientificName = res.species.scientificNameWithoutAuthor;\n                let score = res.score;\n                let info = await speciesDataToJSON(commonName, scientificName, score, selectedLocation);\n                speciesInfoArray.push(info);\n                count++;\n                console.log(speciesInfoArray.length);\n            } else {\n                break;\n            }\n        }\n        return speciesInfoArray;\n    }, [selectedLocation]);\n\n\n    useEffect(() => {\n        // mapInvasiveToAlternativeBC();\n        // mapInvasiveToAlternativeON();\n\n        // fullIntegrationOfFlaggingSpecies();\n        // draftFunction();\n\n        // getAlternativePlantsForDB(\"clematis_x_jackmanii\");\n\n        // dataPipelineForDB();\n\n        // TESTING WEBSCRAPE\n        // webscrapeWikipedia(\"perovskia_atriplicifolia\");\n        // webscrapeWikipedia(\"rose\");\n        // webscrapeWikipedia(\"Hemerocallis_fulva\");\n        // webscrapeWikipedia(\"clematis_x_jackmanii\");\n        // webscrapeWikipedia(\"bamboo\");\n\n        // const input = 'gypsophila_paniculata';\n\n        // const capitalizeWords = (str) => {\n        //     return str.split('_').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ');\n        // };\n\n        // const formattedString = capitalizeWords(input);\n        // console.log(formattedString); // Output: Gypsophila Paniculata\n\n        // const fetchData = async () => {\n        //     try {\n        //         if (!isFileSaved && modelObjResult && modelObjResult.results) {\n        //             const speciesInfoArray = await getSpeciesResultInfo(modelObjResult.results);\n        //             console.log(\"species info: \", speciesInfoArray);\n\n        //             if (speciesInfoArray.length === Math.min(modelObjResult.results.length, 3)) {\n        //                 const data = JSON.stringify(speciesInfoArray, null, 2);\n        //                 const blob = new Blob([data], { type: 'application/json' });\n\n        //                 const fileName = 'speciesData.json';\n\n        //                 saveAs(blob, fileName);\n        //                 setIsFileSaved(true);\n        //             }\n        //         }\n        //     } catch (error) {\n        //         console.log(\"error getting species info: \", error);\n        //     }\n        // };\n        // fetchData();\n    }, [isFileSaved, modelObjResult, getSpeciesResultInfo, selectedLocation]);\n\n\n    return (\n        <React.Fragment>\n            <p>Experiment on Pl@ntNet</p>\n            <h1>Image Upload</h1>\n            <div>\n                <select onChange={handleLanguageSelection}>\n                    <option value=\"en\">-- Choose a language --</option>\n                    <option value=\"en\">English</option>\n                    <option value=\"fr\">French</option>\n                    <option value=\"de\">German</option>\n                </select>\n\n                <select onChange={handleLocationSelection}>\n                    <option>-- Choose a Location --</option>\n                    <option>BC</option>\n                    <option>ON</option>\n                </select>\n            </div>\n\n            <div>\n                {numImages < 4 && <button onClick={() => { setNumImages(numImages + 1) }}>Add more organ</button>}\n            </div>\n\n            <form ref={formRef} onSubmit={handleSubmit}>\n                {[...Array(numImages).keys()].map((index) => (\n                    <div key={index}>\n                        <input type=\"file\" accept=\"image/*\" name={`images${index}`} />\n\n                        <select name={`organs${index}`}>\n                            <option value=\"auto\">-- Choose an organ --</option>\n                            <option value=\"flower\">Flower</option>\n                            <option value=\"fruit\">Fruit</option>\n                            <option value=\"leaf\">Leaf</option>\n                            <option value=\"bark\">Bark</option>\n                            <option value=\"auto\">Auto</option>\n                        </select>\n                    </div>\n                ))}\n                <button type=\"submit\">Submit</button>\n            </form>\n\n            <div style={{\n                display: 'flex',\n                flexDirection: 'column',\n                alignItems: 'center'\n            }}>\n                {selectedFile && <img src={URL.createObjectURL(selectedFile)} alt=\"\" style={{\n                    maxWidth: '500px',\n                    padding: '2%'\n                }} />}\n\n                {modelResult && (\n                    <pre style={{ textAlign: 'left' }}>{modelResult}</pre>\n                )}\n            </div>\n        </React.Fragment>\n    );\n};\n\nconst FormDataExport = typeof window.self === 'object' ? window.self.FormData : window.FormData;\n\nexport { FormDataExport, PlantNet };","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/Views/Pages/RegionsPage.js",["224","225","226","227","228","229"],"import React, { useState, useEffect } from \"react\";\nimport {\n    Autocomplete, Box, Tooltip, IconButton, Table, TableBody, TableCell, TableHead, TableRow, Button,\n    TextField, Typography, ThemeProvider\n} from \"@mui/material\";\nimport DeleteDialog from \"../../dialogs/ConfirmDeleteDialog\";\nimport AddRegionDialog from \"../../dialogs/AddRegionDialog\";\nimport Theme from './Theme';\nimport { Auth } from \"aws-amplify\";\n\n// components\nimport EditRegionDialog from \"../../dialogs/EditRegionsDialog\";\nimport PaginationComponent from '../../components/PaginationComponent';\nimport LocationFilterComponent from '../../components/LocationFilterComponent';\n\n// icons\nimport AddCircleOutlineIcon from '@mui/icons-material/AddCircleOutline';\nimport EditIcon from '@mui/icons-material/Edit';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport SearchIcon from '@mui/icons-material/Search';\nimport LocationOnIcon from '@mui/icons-material/LocationOn';\n\nimport {  capitalizeEachWord } from '../../functions/helperFunctions';\nimport axios from \"axios\";\n\n// displays regions\nfunction RegionsPage() {\n    const API_BASE_URL = process.env.REACT_APP_API_BASE_URL;\n\n    const [allRegions, setAllRegions] = useState([]); // array of all regions\n    const [regionCount, setRegionCount] = useState(0); // number of regions\n    const [data, setData] = useState([]);\n    const [displayData, setDisplayData] = useState([]);\n    const [tempData, setTempData] = useState({});\n    const [editingId, setEditingId] = useState(null);\n    const [openEditRegionDialog, setOpenEditRegionDialog] = useState(false);\n    const [openAddRegionDialog, setOpenAddRegionDialog] = useState(false);\n    const [searchInput, setSearchInput] = useState(\"\");\n    const [searchResults, setSearchResults] = useState(displayData.map((item) => ({\n        label: item.region_fullname,\n        value: item.region_fullname\n    })));\n    const [country, setCountry] = useState(\"\");\n    const [deleteId, setDeleteId] = useState(null);\n    const [openDeleteConfirmation, setOpenDeleteConfirmation] = useState(false);\n\n    const [currLastRegionId, setCurrLastRegionId] = useState(\"\"); // current last region\n    const [lastRegionIdHistory, setLastRegionIdHistory] = useState(new Set()); // history of last region ids seen for each page\n    const [shouldReset, setShouldReset] = useState(false);\n\n    const [user, setUser] = useState(\"\");\n\n    // gets current authorized user\n    const retrieveUser = async () => {\n        try {\n            const returnedUser = await Auth.currentAuthenticatedUser();\n            setUser(returnedUser);\n            console.log(\"current user: \", returnedUser);\n        } catch (e) {\n            console.log(\"error getting user: \", e);\n        }\n    }\n\n    // retriever user on and alternative species on load\n    useEffect(() => {\n        // console.log(\"retrieved user!!! + loading all regions\")\n        retrieveUser()\n        loadRegionsInBackground()\n        // console.log(\"finished loading regions\")\n    }, [])\n\n    // gets all alternative species in the database\n    const fetchAllRegions = async (lastRegionId = null) => {\n        try {\n            const response = await axios.get(`${API_BASE_URL}region`, {\n                params: {\n                    last_region_id: lastRegionId,\n                    rows_per_page: rowsPerPage\n                },\n                headers: {\n                    'x-api-key': process.env.REACT_APP_X_API_KEY\n                }\n            });\n\n            setAllRegions(prevRegions => [...prevRegions, ...response.data]);\n            setRegionCount(prevCount => prevCount + response.data.length)\n\n            // recursively gets regions if more exists\n            if (response.data.length === rowsPerPage) {\n                const newLastRegionId = response.data[response.data.length - 1].region_id;\n                await fetchAllRegions(newLastRegionId);\n            }\n        } catch (error) {\n            console.error(\"Error retrieving regions\", error);\n        }\n    };\n\n    const loadRegionsInBackground = () => {\n        fetchAllRegions();\n    };\n\n    const regionFullNames = allRegions.map(region => ({\n        label: region.region_fullname,\n        value: region.region_fullname\n    }));\n\n    const handleGetRegions = () => {\n        console.log(\"shouldReset?\", shouldReset)\n        console.log(\"region id:\", currLastRegionId);\n\n        axios\n            .get(`${API_BASE_URL}region`, {\n                params: {\n                    last_region_id: shouldReset ? null : currLastRegionId  // for pagination\n                },\n                headers: {\n                    'x-api-key': process.env.REACT_APP_X_API_KEY\n                }\n            })\n            .then((response) => {\n                console.log(\"Regions retrieved successfully\", response.data);\n\n                if (shouldReset) {\n                    setLastRegionIdHistory(new Set())\n                    setShouldReset(false);\n                }\n\n                setDisplayData(response.data);\n                setData(response.data);\n                setSearchResults(response.data.map((item) => ({ label: item.region_fullname, value: item.region_fullname })));\n\n                // update lastSpeciesId with the species_id of the last row displayed in the table\n                if (response.data.length > 0) {\n                    const newLastRegionId = response.data[response.data.length - 1].region_id;\n\n                    setCurrLastRegionId(newLastRegionId);\n                    setLastRegionIdHistory(history => new Set([...history, newLastRegionId]));\n                }\n            })\n            .catch((error) => {\n                console.error(\"Error retrieving region\", error);\n            });\n    };\n\n    const handleGetRegionsAfterSearch = () => {\n        const formattedSearchInput = capitalizeEachWord(searchInput);\n        console.log(\"search: \", formattedSearchInput)\n\n        axios\n            .get(`${API_BASE_URL}region`, {\n                params: {\n                    region_fullname: formattedSearchInput,\n                },\n                headers: {\n                    'x-api-key': process.env.REACT_APP_X_API_KEY\n                }\n            })\n            .then((response) => {\n                console.log(\"Regions retrieved successfully\", response.data);\n                setDisplayData(response.data);\n            })\n            .catch((error) => {\n                console.error(\"Error searching up region\", error);\n            });\n    };\n\n\n    const handleReset = () => {\n        console.log(\"reset data\");\n        setShouldReset(true);\n        setSearchInput(\"\");\n        handleGetRegions();\n    }\n\n    // filters display data based on user search input\n    useEffect(() => {\n        const filteredData = data.filter((item) =>\n            (searchInput === \"\" ||\n                (item.region_fullname.toLowerCase().includes(searchInput.toLowerCase()) ||\n                    item.region_code_name.toLowerCase().includes(searchInput.toLowerCase()))) &&\n            (country === \"\" || item.country_fullname.toLowerCase() === country.toLowerCase())\n        );\n\n        if (searchInput === \"\" && country === \"\") {\n            setDisplayData(data);\n        } else {\n            setDisplayData(filteredData);\n        }\n\n        // Update search results based on filtered data\n        const results = filteredData.map((item) => ({\n            label: item.region_fullname,\n            value: item.region_fullname,\n        }));\n        setSearchResults(results);\n    }, [searchInput, country, data]);\n\n\n    // edit region row\n    const startEdit = (region_id, rowData) => {\n        setEditingId(region_id);\n        setTempData(rowData);\n        setOpenEditRegionDialog(true);\n    };\n\n    // helper function after saving \n    const handleFinishEditingRow = () => {\n        setOpenEditRegionDialog(false);\n        setEditingId(null);\n    };\n\n    // saves edited row\n    const handleSave = (confirmed) => {\n        retrieveUser();\n        const jwtToken = user.signInUserSession.accessToken.jwtToken\n\n        const formattedData = {\n            ...tempData,\n            region_fullname: capitalizeEachWord(tempData.region_fullname),\n            region_code_name: tempData.region_code_name.toUpperCase(),\n            country_fullname: capitalizeEachWord(tempData.country_fullname)\n        }\n\n        if (confirmed) {\n            console.log(\"saved region data: \", tempData);\n            axios\n                .put(`${API_BASE_URL}region/${formattedData.region_id}`,\n                    formattedData,\n                    {\n                        headers: {\n                            'Authorization': `${jwtToken}`\n                        }\n                    })\n                .then((response) => {\n                    console.log(\"Region updated successfully\", response.data);\n                    setShouldReset(true); \n                    handleFinishEditingRow();\n                })\n                .catch((error) => {\n                    console.error(\"Error updating region\", error);\n                });\n        };\n    };\n\n    // add region\n    const handleAddRegion = (newRegionData) => {\n        retrieveUser();\n        const jwtToken = user.signInUserSession.accessToken.jwtToken\n\n        const formattedData = {\n            ...newRegionData,\n            region_fullname: capitalizeEachWord(newRegionData.region_fullname),\n            region_code_name: newRegionData.region_code_name.toUpperCase(),\n            country_fullname: capitalizeEachWord(newRegionData.country_fullname)\n        }\n\n        console.log(\"new region: \", formattedData)\n\n        // request to POST new regions to the database\n        axios\n            .post(API_BASE_URL + \"region\",\n                formattedData,\n                {\n                    headers: {\n                        'Authorization': `${jwtToken}`\n                    }\n                })\n            .then((response) => {\n                console.log(\"region added successfully\", response.data);\n                setShouldReset(true);\n                setOpenAddRegionDialog(false);\n            })\n            .catch((error) => {\n                console.error(\"error adding region\", error);\n            })\n    };\n\n    // execute handleGetRegions after shouldReset state update\n    useEffect(() => {\n        if (shouldReset) {\n            handleGetRegions();\n        }\n    }, [shouldReset]);\n\n    // delete row with Confirmation before deletion\n    const handleDeleteRow = (region_id) => {\n        setDeleteId(region_id);\n        setOpenDeleteConfirmation(true);\n    };\n\n    // Confirm delete\n    const handleConfirmDelete = () => {\n        retrieveUser();\n        const jwtToken = user.signInUserSession.accessToken.jwtToken\n\n        // console.log(\"region id to delete: \", deleteId);\n        if (deleteId) {\n            axios\n                .delete(`${API_BASE_URL}region/${deleteId}`, {\n                    headers: {\n                        'Authorization': `${jwtToken}`\n                    }\n                })\n                .then((response) => {\n                    setShouldReset(true);\n                    setOpenDeleteConfirmation(false);\n                    console.log(\"region deleted successfully\", response.data);\n                })\n                .catch((error) => {\n                    console.error(\"Error deleting region\", error);\n                })\n        } else {\n            setOpenDeleteConfirmation(false);\n        }\n    };\n\n    // Updates temporary row data when field inputs change\n    const handleInputChange = (field, value) => {\n\n        // only take in numbers and decimal or empty \n        const isValidInput = /^[+-]?\\d*(\\.\\d*)?$/.test(value);\n\n        if ((field === 'geographic_latitude' && !isValidInput) || (field === 'geographic_longitude' && !isValidInput)) {\n            alert('Invalid input. Please enter a numerical value.');\n        } else if (field === 'geographic_latitude') {\n                setTempData((prev) => ({ ...prev, geographic_coordinate: `${value},${prev.geographic_coordinate.split(',')[1]}` }));\n            } else if (field === 'geographic_longitude') {\n            setTempData((prev) => ({ ...prev, geographic_coordinate: `${prev.geographic_coordinate.split(',')[0]},${value}` }));\n        } else {\n            setTempData((prev) => ({ ...prev, [field]: value }));\n        }\n\n    };\n\n    // search region by full name or code name\n    const handleSearch = (searchInput) => {\n        if (searchInput === \"\") {\n            setDisplayData(data);\n        } else {\n            const terms = searchInput.toLowerCase().split(\" \");\n            const results = data.filter((item) => {\n                const regionFullNameMatch = terms.every((term) =>\n                    item.region_fullname.toLowerCase().includes(term)\n                );\n\n                const regionCodeMatch = terms.every((term) =>\n                    item.region_code_name.toLowerCase().includes(term)\n                );\n\n                return regionFullNameMatch || regionCodeMatch;\n            });\n            setDisplayData(results);\n        }\n    };\n\n    // search country\n    const handleCountrySearch = (countryInput) => {\n        if (countryInput === \"\") {\n            setDisplayData(data);\n        } else {\n            const results = data.filter(\n                (item) => item.country_fullname.toLowerCase() === countryInput\n            );\n            setDisplayData(results);\n        }\n    };\n\n    const rowsPerPageOptions = [10, 20, 50]; // user selects number of species to display\n    const [rowsPerPage, setRowsPerPage] = useState(rowsPerPageOptions[1]); // start with default 20 rows per page\n    const [page, setPage] = useState(0); // Start with page 0\n    const [disabled, setDisabled] = useState(false); // disabled next button or not\n\n    const start = page * rowsPerPage + 1;\n    const end = Math.min((page + 1) * rowsPerPage, (page * rowsPerPage) + displayData.length); // min of rowsPerPage or displayed data length\n\n    // updates page count\n    const handleNextPage = () => {\n        setPage(page + 1); // Increment the page by 1 on \"Next\" button click\n    };\n\n    // updates page count and history of species seen\n    const handlePreviousPage = () => {\n        if (lastRegionIdHistory.size > 1) {\n            const updatedIdHistory = new Set([...lastRegionIdHistory]);\n            updatedIdHistory.delete([...updatedIdHistory].pop());\n            setLastRegionIdHistory(updatedIdHistory);\n\n            // gets the previous species id\n            const prevSpeciesId = [...updatedIdHistory][[...updatedIdHistory].length - 2];\n            setCurrLastRegionId(prevSpeciesId);\n            setPage(page - 1);\n        }\n    };\n\n    // gets next/previous set of species on page change\n    useEffect(() => {\n        handleGetRegions(false);\n    }, [page]);\n\n\n    // disables the next button if there are no species left to query\n    useEffect(() => {\n        if (displayData.length === 0 || displayData.length < rowsPerPage) {\n            setDisabled(true);\n        } else {\n            setDisabled(false);\n        }\n    }, [displayData, rowsPerPage]);\n\n    return (\n        <div style={{ width: \"100%\", display: \"flex\", flexDirection: \"column\", alignItems: \"center\" }}>\n\n            {/* location and search bars*/}\n            <div style={{ display: \"flex\", justifyContent: \"center\", width: \"90%\" }}>\n                <Box style={{ flex: 1, marginRight: \"10px\" }}>\n                    <Autocomplete\n                        options={Array.from(new Set(displayData.map((region) => region.country_fullname)))}\n                        getOptionLabel={(option) => option}\n                        onInputChange={(e, newInputValue) => handleCountrySearch(newInputValue.toLowerCase())}\n                        renderInput={(params) => (\n                            <TextField\n                                {...params}\n                                label={\n                                    <div style={{ display: 'flex', alignItems: 'center' }}>\n                                        <LocationOnIcon sx={{ marginRight: '0.5rem' }} />\n                                        {\"Search by country\"}\n                                    </div>\n                                }\n                                value={country}\n                                onChange={(e) => {\n                                    setCountry(e.target.value.toLowerCase());\n                                }}\n                                style={{ marginTop: \"2rem\", marginBottom: \"1rem\" }}\n                            />\n                        )}\n                    />\n                </Box>\n\n                <Box style={{ flex: 2, marginLeft: \"10px\" }}>\n                    <Autocomplete\n                        options={regionFullNames}\n                        getOptionLabel={(option) => option.label}\n                        onInputChange={(e, newInputValue) => {\n                            setSearchInput(newInputValue)\n                            handleSearch(newInputValue)\n                        }}\n                        renderInput={(params) => (\n                            <TextField\n                                {...params}\n                                label={\n                                    <div style={{ display: 'flex', alignItems: 'center' }}>\n                                        <SearchIcon sx={{ marginRight: '0.5rem' }} />\n                                        Search region\n                                    </div>\n                                }\n                                value={searchInput}\n                                onChange={(e) => {\n                                    setSearchInput(e.target.value);\n                                }}\n                                style={{ marginTop: \"2rem\", marginBottom: \"1rem\" }}\n                            />\n                        )}\n                    />\n                </Box>\n\n                <ThemeProvider theme={Theme}>\n                    <Button variant=\"contained\" onClick={() => handleGetRegionsAfterSearch()} style={{ marginLeft: \"20px\", marginTop: \"27px\", width: \"10%\", height: \"53px\", alignItems: \"center\" }}>\n                        <SearchIcon sx={{ marginRight: '0.8rem' }} />Search\n                    </Button>\n                </ThemeProvider>\n            </div>\n\n            <div style={{ display: 'flex', justifyContent: 'center', marginTop: '20px' }}>\n                <ThemeProvider theme={Theme}>\n                    <Button variant=\"contained\" onClick={() => setOpenAddRegionDialog(true)} startIcon={<AddCircleOutlineIcon />}>\n                        Add Region\n                    </Button>\n                </ThemeProvider>\n            </div >\n\n            <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'flex-end', marginTop: '10px', marginLeft: \"70%\" }}>\n                {/* dropdown for selecting rows per page */}\n                <span style={{ marginRight: '10px' }}>Rows per page:</span>\n                <select value={rowsPerPage} onChange={(e) => setRowsPerPage(Number(e.target.value))}>\n                    {rowsPerPageOptions.map((option) => (\n                        <option key={option} value={option}>\n                            {option}\n                        </option>\n                    ))}\n                </select>\n\n                <PaginationComponent\n                    start={start}\n                    end={end}\n                    count={regionCount}\n                    page={page}\n                    handlePreviousPage={handlePreviousPage}\n                    handleNextPage={handleNextPage}\n                    disabled={disabled}\n                />\n            </div>\n\n\n            <div style={{ width: \"90%\", display: \"flex\", justifyContent: \"center\" }}>\n                <Table style={{ width: \"100%\", tableLayout: \"fixed\" }}>\n                    <TableHead>\n                        <TableRow>\n                            <TableCell style={{ width: \"10%\" }}>\n                                <Typography variant=\"subtitle1\" fontWeight=\"bold\">\n                                    Region\n                                </Typography>\n                            </TableCell>\n                            <TableCell style={{ width: \"10%\" }}>\n                                <Typography variant=\"subtitle1\" fontWeight=\"bold\">\n                                    Region Code\n                                </Typography>\n                            </TableCell>\n                            <TableCell style={{ width: \"10%\" }}>\n                                <Typography variant=\"subtitle1\" fontWeight=\"bold\">\n                                    Country\n                                </Typography>\n                            </TableCell>\n                            <TableCell style={{ width: \"15%\" }}>\n                                <Typography variant=\"subtitle1\" fontWeight=\"bold\">\n                                    Geographic Coordinates (latitude, longitude)\n                                </Typography>\n                            </TableCell>\n                            <TableCell style={{ width: \"5%\" }}>\n                                <Typography variant=\"subtitle1\" fontWeight=\"bold\">\n                                    Actions\n                                </Typography>\n                            </TableCell>\n                        </TableRow>\n                    </TableHead>\n\n                    <TableBody>\n                        {displayData &&\n                            (country !== \"\"\n                                ? displayData\n                                .filter((item) => item.country_fullname.toLowerCase() === country.toLowerCase())\n                                .sort((a, b) => a.region_fullname.localeCompare(b.region_fullname))\n                                    .map((row) => (\n                                        <TableRow key={row.region_code_name}>\n                                            {/* editing the row and no country search*/}\n                                            {editingId === row.region_id ? (\n                                                <>\n                                                    {/* region full name */}\n                                                    <TableCell>\n                                                        <TextField\n                                                            value={tempData.region_fullname}\n                                                            onChange={(e) =>\n                                                                handleInputChange(\"region_fullname\", e.target.value)\n                                                            }\n                                                        />\n                                                    </TableCell>\n\n                                                    {/* region code */}\n                                                    <TableCell>\n                                                        <TextField\n                                                            value={tempData.region_code_name}\n                                                            onChange={(e) =>\n                                                                handleInputChange(\"region_code_name\", e.target.value)\n                                                            }\n                                                        />\n                                                    </TableCell>\n\n                                                    {/* country */}\n                                                    <TableCell>\n                                                        <TextField\n                                                            value={tempData.country_fullname}\n                                                            onChange={(e) =>\n                                                                handleInputChange(\"country_fullname\", e.target.value)\n                                                            }\n                                                        />\n                                                    </TableCell>\n\n                                                    {/* coordinates */}\n                                                    <TableCell>\n                                                        <TextField\n                                                            value={tempData.geographic_coordinate}\n                                                            onChange={(e) =>\n                                                                handleInputChange(\"geographic_coordinate\", e.target.value)\n                                                            }\n                                                        />\n                                                    </TableCell>\n\n                                                    {/* edit/delete */}\n                                                    <TableCell>\n                                                        <Tooltip title=\"Edit\"\n                                                            onClick={() => startEdit(row.region_id, row)}>\n                                                            <IconButton>\n                                                                <EditIcon />\n                                                            </IconButton>\n                                                        </Tooltip>\n                                                        <Tooltip\n                                                            title=\"Delete\"\n                                                            onClick={() => handleDeleteRow(row.region_id, row)}>\n                                                            <IconButton>\n                                                                <DeleteIcon />\n                                                            </IconButton>\n                                                        </Tooltip>\n                                                    </TableCell>\n                                                </>\n                                            ) : (\n                                                    // not editing row and no country search\n                                                <>\n                                                        <TableCell>{row.region_fullname}</TableCell>\n                                                        <TableCell> {row.region_code_name} </TableCell>\n                                                        <TableCell>{row.country_fullname}</TableCell>\n                                                        <TableCell>{row.geographic_coordinate}</TableCell>\n                                                    <TableCell>\n                                                        <Tooltip title=\"Edit\"\n                                                                onClick={() => startEdit(row.region_id, row)}>\n                                                            <IconButton>\n                                                                <EditIcon />\n                                                            </IconButton>\n                                                        </Tooltip>\n                                                        <Tooltip\n                                                            title=\"Delete\"\n                                                                onClick={() => handleDeleteRow(row.region_id, row)}>\n                                                            <IconButton>\n                                                                <DeleteIcon />\n                                                            </IconButton>\n                                                        </Tooltip>\n                                                    </TableCell>\n                                                </>\n                                            )}\n                                        </TableRow>\n                                    ))\n                                : displayData\n                                .sort((a, b) => a.region_fullname.localeCompare(b.region_fullname))\n                                    .map((row) => (\n                                        <TableRow key={row.region_id}>\n                                            {/* editing the row and country */}\n                                            {editingId === row.region_id ? (\n                                                <>\n                                                    {/* region full name */}\n                                                    <TableCell>\n                                                        <TextField\n                                                            value={tempData.region_fullname}\n                                                            onChange={(e) =>\n                                                                handleInputChange(\"region_fullname\", e.target.value)\n                                                            }\n                                                        />\n                                                    </TableCell>\n\n                                                    {/* region code */}\n                                                    <TableCell>\n                                                        <TextField\n                                                            value={tempData.region_code_name}\n                                                            onChange={(e) =>\n                                                                handleInputChange(\"region_code_name\", e.target.value)\n                                                            }\n                                                        />\n                                                    </TableCell>\n\n                                                    {/* country */}\n                                                    <TableCell>\n                                                        <TextField\n                                                            value={tempData.country_fullname}\n                                                            onChange={(e) =>\n                                                                handleInputChange(\"country_fullname\", e.target.value)\n                                                            }\n                                                        />\n                                                    </TableCell>\n\n                                                    {/* coordinates */}\n                                                    <TableCell>\n                                                        <TextField\n                                                            value={tempData.geographic_coordinate}\n                                                            onChange={(e) =>\n                                                                handleInputChange(\"geographic_coordinate\", e.target.value)\n                                                            }\n                                                        />\n                                                    </TableCell>\n\n                                                    {/* edit/delete */}\n                                                    <TableCell>\n                                                        <Tooltip title=\"Edit\"\n                                                            onClick={() => startEdit(row.region_id, row)}>\n                                                            <IconButton>\n                                                                <EditIcon />\n                                                            </IconButton>\n                                                        </Tooltip>\n                                                        <Tooltip\n                                                            title=\"Delete\"\n                                                            onClick={() => handleDeleteRow(row.region_id, row)}>\n                                                            <IconButton>\n                                                                <DeleteIcon />\n                                                            </IconButton>\n                                                        </Tooltip>\n                                                    </TableCell>\n                                                </>\n                                            ) : (\n                                                    //  not editing the row and no country\n                                                <>\n\n                                                        <TableCell>{row.region_fullname}</TableCell>\n                                                        <TableCell> {row.region_code_name} </TableCell>\n                                                        <TableCell>{row.country_fullname}</TableCell>\n                                                        <TableCell>{row.geographic_coordinate}</TableCell>\n                                                    <TableCell>\n                                                        <Tooltip title=\"Edit\"\n                                                                onClick={() => startEdit(row.region_id, row)}>\n                                                            <IconButton>\n                                                                <EditIcon />\n                                                            </IconButton>\n                                                        </Tooltip>\n                                                        <Tooltip\n                                                            title=\"Delete\"\n                                                                onClick={() => handleDeleteRow(row.region_id, row)}>\n                                                            <IconButton>\n                                                                <DeleteIcon />\n                                                            </IconButton>\n                                                        </Tooltip>\n                                                    </TableCell>\n                                                </>\n                                            )}\n                                        </TableRow>\n                                    )))}\n                    </TableBody>\n                </Table>\n            </div>\n\n            <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'flex-end', marginTop: '10px', marginLeft: \"79%\" }}>\n                <PaginationComponent\n                    start={start}\n                    end={end}\n                    count={regionCount}\n                    page={page}\n                    handlePreviousPage={handlePreviousPage}\n                    handleNextPage={handleNextPage}\n                    disabled={disabled}\n                />\n            </div>\n\n            <AddRegionDialog\n                open={openAddRegionDialog}\n                handleClose={() => setOpenAddRegionDialog(false)}\n                handleAdd={handleAddRegion}\n                data={displayData}\n            />\n\n            <EditRegionDialog\n                open={openEditRegionDialog}\n                tempData={tempData}\n                handleInputChange={handleInputChange}\n                handleFinishEditingRow={handleFinishEditingRow}\n                handleSave={handleSave}\n            />\n\n            <DeleteDialog\n                open={openDeleteConfirmation}\n                handleClose={() => setOpenDeleteConfirmation(false)}\n                handleDelete={handleConfirmDelete}\n            />\n\n        </div >\n    );\n}\n\nexport default RegionsPage;","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/Views/Pages/downloadWebscrap.js",["230","231","232","233","234"],"import React, { useState, useCallback, useEffect, useRef } from 'react';\n\n// Import components\nimport { webscrapeInvasiveSpecies } from '../../functions/pipeline';\nimport { dataPipelineForDB } from '../../functions/pipeline';\nimport { getAlternativePlantsForDB } from '../../functions/alternativePlants';\n\n\nexport default function DownloadWebscrap() {\n    const saveToFile = (data, filename) => {\n        const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });\n        const link = document.createElement('a');\n        link.href = URL.createObjectURL(blob);\n        link.download = filename; // 'webscrapedInvasive.json';\n        link.click();\n        URL.revokeObjectURL(link.href);\n    };\n\n    useEffect(() => {\n        const getData = async () => {\n            const data = await dataPipelineForDB();\n            saveToFile(data.regions_tb, \"regions_tb.json\");\n            saveToFile(data.invasive_species_tb, \"invasive_species_tb.json\");\n            saveToFile(data.alternative_species_tb, \"alternative_species_tb.json\");\n            saveToFile(data.flaggedSpecies, \"flaggedSpecies.json\");\n            \n            console.log(\"Data ready!\");\n\n        }\n\n        getData();\n    }, []);\n\n    return (\n        <p>Webscrape and prapare a file.</p>\n    );\n}\n","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/Views/Pages/Theme.js",[],"/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/components/SearchComponent.js",["235"],"/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/components/LocationFilterComponent.js",[],"/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/components/PaginationComponent.js",[],"/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/functions/speciesToJSON.js",[],"/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/functions/alternativePlants.js",[],"/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/functions/helperFunctions.js",[],"/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/functions/pipeline.js",["236"],"import { webscrapeBCInvasive, webscrapeONInvasive } from \"./webscrape\";\nimport axios from 'axios';\nimport { mapInvasiveToAlternativeBC, mapInvasiveToAlternativeON, getAlternativePlantsForDB } from \"./alternativePlants\"\n\nconst webscrapeInvasiveSpecies = async () => {\n    const region = [];\n    const res = await Promise.all([webscrapeBCInvasive(), webscrapeONInvasive()]);\n\n    res.forEach((result) => {\n        if (result.BCInvasiveSpeciesPlants) {\n            region.push({\n                region_code_name: \"BC\",\n                region_fullname: \"british_columbia\",\n                country_fullname: \"canada\",\n                geographic_coordinate: \"(53.726669, -127.647621)\",\n                invasive_species_list: result.BCInvasiveSpeciesPlants\n            });\n        } else if (result.ONInvasiveSpeciesPlants) {\n            region.push({\n                region_code_name: \"ON\",\n                region_fullname: \"ontario\",\n                country_fullname: \"canada\",\n                geographic_coordinate: \"(50.000000, -85.000000)\",\n                invasive_species_list: result.ONInvasiveSpeciesPlants\n            });\n        }\n    });\n\n    // Map the alternative species in\n    await mapInvasiveToAlternative(region);\n\n    return region;\n}\n\n// returns list of scientific names of invasive BC species\nconst getInvasiveSpeciesScientificNamesBC = async () => {\n    let region = await webscrapeInvasiveSpecies();\n    return await getInvasiveSpeciesScientificNames(region[0]);\n};\n\n// returns list of scientific names of invasive ON species\nconst getInvasiveSpeciesScientificNamesON = async () => {\n    let region = await webscrapeInvasiveSpecies();\n    let res = await getInvasiveSpeciesScientificNames(region[1]);\n    let moreONInvasive = await mapInvasiveToAlternativeON();\n\n    const moreONKeys = Object.keys(moreONInvasive);\n\n    for (const key of moreONKeys) {\n        if (!res.includes(key)) {\n            res.push(key);\n        }\n    }\n\n    return res;\n};\n\n// helper function to get scientific names of invasive species\nconst getInvasiveSpeciesScientificNames = async (region) => {\n    const scientific_names = [];\n\n    for (const species of region.invasiveSpeciesList) {\n        if (species && species.scientificName) {\n            const formattedName = species.scientificName.toLowerCase().replace(/ /g, '_');\n            scientific_names.push(formattedName);\n        } else {\n            console.log(\"Scientific name not found for:\", species);\n        }\n    }\n    return scientific_names;\n};\n\n// helper function to get list of alternative species\nconst getListOfAlternativeSpecies = (speciesDataXRegion)=>{\n    const listAlternativeSpecies = new Set();\n    speciesDataXRegion.forEach((region)=>{\n        region.invasive_species_list.forEach((species)=>{\n            if(species.alternative_species.length > 0) \n                species.alternative_species.forEach(speciesItem => {\n                    listAlternativeSpecies.add(speciesItem);\n                });              \n        });\n    });\n\n    return Array.from(listAlternativeSpecies);\n}\n\n// checks if species is invasive given location\nconst isInvasive = async (scientificName, location) => {\n    scientificName = scientificName.toLowerCase().replace(/ /g, '_');\n    console.log(\"isInvasive: \", scientificName);\n\n    if (location === \"BC\") {\n        let invasiveListBC = await getInvasiveSpeciesScientificNamesBC();\n        console.log(\"BC invasive list: \", invasiveListBC);\n        return invasiveListBC.includes(scientificName);\n    } else if (location === \"ON\") {\n        let invasiveListON = await getInvasiveSpeciesScientificNamesON();\n        console.log(\"ON invasive list: \", invasiveListON);\n        return invasiveListON.includes(scientificName);\n    }\n};\n\n/**\n * \n * @param speciesList - list of species to check against PlantNet API require to follow Invasive Species data structure\n * @returns - list of species that are invalid and species that could not detect by PlantNet API asynchronously\n */\nconst flagedSpeciesToPlanetAPI = async (speciesList) => {\n    const speciesFlagged = [];\n\n    // Make request to Pl@ntNet API for list of species\n    const url = `https://my-api.plantnet.org/v2/species?api-key=${process.env.REACT_APP_PLANTNET_API_KEY}`;\n    await axios.get(url)\n        .then((response) => {\n            speciesList.map((species) => {\n                if(species.scientific_name.length > 0){\n\n                    // Check scientific name against Pl@ntNet API\n                    for(let i = 0; i < species.scientific_name.length; i++){\n                        if(!response.data.find(s => s.scientificNameWithoutAuthor.toLowerCase().includes(species.scientific_name[i].replace(/_/g, ' ').trim()))){\n                            speciesFlagged.push(species);\n                            break;\n                        }\n                    }\n                } else {\n                    speciesFlagged.push(species);\n                }\n            });\n        })\n        .catch((error) => {\n            console.error('Error requesting species list:', error);\n            // Handle error, e.g., show an error message to the user.\n        });\n\n    return speciesFlagged;\n}\n\n// Populate invasive species with its alternatives\nconst mapInvasiveToAlternative = async (speciesDataXRegion)=>{\n    // Get list of alternative  speices\n    const alternativeSpeciesList = await Promise.all([mapInvasiveToAlternativeBC(), mapInvasiveToAlternativeON()]);\n    speciesDataXRegion.forEach((region)=>{\n        const alternativeSpeciesList_ = (region.region_code_name === \"BC\") ? alternativeSpeciesList[0] : alternativeSpeciesList[1];\n        region.invasive_species_list.forEach((species)=>{\n            for(let i = 0; i < species.scientific_name.length; i++){\n                const modifiedSciName = species.scientific_name[i].toLowerCase().replace(/\\s+/g, '_').trim();\n                const alternative = alternativeSpeciesList_[modifiedSciName];\n\n                if(alternative){\n                    species.alternative_species = alternative;\n                    break;\n                }\n            }\n        });\n    });\n}\n\n// Full integration of flagging species\nconst fullIntegrationOfFlaggingSpecies = async (speciesData)=>{\n    const flaggedSpecies = [];\n    // const speciesData = await webscrapeInvasiveSpecies();\n\n    const flaggedRegions = [];\n    speciesData.forEach((region)=>{\n        flaggedRegions.push(flagedSpeciesToPlanetAPI(region.invasive_species_list));\n    });\n\n    const flagged = await Promise.all(flaggedRegions);\n    flagged.forEach((data) => {\n        flaggedSpecies.push(...data);\n    });\n\n    console.log(\"Flagged species:\", flaggedSpecies);\n\n    return flaggedSpecies;\n}\n\n// Return an array of records for alternative species\nconst getAllAlternativePlantsForDB = async (speciesDataXRegion) => {\n    try {\n        const listAlternativeSpecies = await getListOfAlternativeSpecies(speciesDataXRegion);\n        const requestCalls = [];\n\n        listAlternativeSpecies.forEach(async (alternativeSpecies) => {\n            requestCalls.push(getAlternativePlantsForDB(alternativeSpecies));\n        });\n\n        const listAlternativeSpeciesForDB = await Promise.all(requestCalls);\n\n        return listAlternativeSpeciesForDB;\n    } catch (error) {\n        console.log(error);\n    }\n\n    return [];\n}\n\nconst dataPipelineForDB = async () => {\n    const regions_tb = [];\n    const invasive_species_tb = [];\n    const alternative_species_tb = [];\n\n    // Get all data across region\n    const speciesDataXRegion = await webscrapeInvasiveSpecies();\n    const flaggedSpecies = await fullIntegrationOfFlaggingSpecies(speciesDataXRegion);\n\n    speciesDataXRegion.forEach((region) => {\n        const scienceName = region.invasive_species_list.map((species)=> species.scientific_name[0]);\n\n        regions_tb.push({\n            region_code_name: region.region_code_name,\n            region_fullname: region.region_fullname,\n            country_fullname: region.country_fullname,\n            geographic_coordinate: region.geographic_coordinate,\n            invasive_species_list: scienceName\n        });\n\n        invasive_species_tb.push(...region.invasive_species_list);\n    });\n\n    // Get all alternative species\n    const listAlternativeSpeciesForDB = await getAllAlternativePlantsForDB(speciesDataXRegion);\n    alternative_species_tb.push(...listAlternativeSpeciesForDB);\n\n    console.log(\"regions_tb: \", regions_tb);\n    console.log(\"invasive_species_tb: \", invasive_species_tb);\n    console.log(\"alternative_species_tb: \", alternative_species_tb);\n\n    // The flagged species should not be added, they need to be fixed first.\n    console.log(\"Flagged species: \", flaggedSpecies);\n\n    return {regions_tb, invasive_species_tb, alternative_species_tb, flaggedSpecies};\n}\n\nexport {\n    webscrapeInvasiveSpecies, flagedSpeciesToPlanetAPI,\n    getInvasiveSpeciesScientificNamesBC,\n    getInvasiveSpeciesScientificNamesON,\n    isInvasive,\n    fullIntegrationOfFlaggingSpecies,\n    dataPipelineForDB\n};","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/dialogs/AddRegionDialog.js",["237","238","239","240","241"],"import React, { useState } from \"react\";\nimport { Box, Button, Dialog, DialogActions, DialogContent, DialogTitle, TextField, FormControl, InputLabel, Select, MenuItem } from \"@mui/material\";\nimport SnackbarOnSuccess from \"../components/SnackbarComponent\";\nimport CustomAlert from \"../components/AlertComponent\";\nimport CustomWarning from \"../components/WarningComponent\";\n\n// dialog for adding a region\nconst AddRegionDialog = ({ open, handleClose, handleAdd, data }) => {\n    const initialRegionData = {\n        region_fullname: \"\",\n        region_code_name: \"\",\n        country_fullname: \"\",\n        geographic_coordinate: \"\"\n    };\n\n    const [showSnackbar, setShowSnackbar] = useState(false);\n    const [showAlert, setShowAlert] = useState(false);\n    const [showWarning, setShowWarning] = useState(false);\n    const [regionData, setRegionData] = useState(initialRegionData);\n    const [selectedCountry, setSelectedCountry] = useState(\"\");\n    const [errorMessage, setErrorMessage] = useState(\"\");\n\n    const handleInputChange = (field, value) => {\n        // checks that coordinates are of valid format (numbers)\n        if (field === \"geographic_latitude\" || field === \"geographic_longitude\") {\n            if (value === \"\" || !isNaN(value) || (value[0] === '-' && !isNaN(value.slice(1))) || !isNaN(value.replace(\".\", \"\"))) {\n                setRegionData((prev) => ({\n                    ...prev,\n                    geographic_coordinate: [\n                        field === \"geographic_latitude\" ? value : regionData.geographic_coordinate.split(', ')[0],\n                        field === \"geographic_longitude\" ? value : regionData.geographic_coordinate.split(', ')[1],\n                    ].join(', '), \n                }));\n                setErrorMessage(\"\");\n            } else {\n                setErrorMessage(\"Please enter a valid number.\");\n            }\n        } else {\n            setRegionData((prev) => ({ ...prev, [field]: value }));\n            if (field === \"country_fullname\") {\n                setSelectedCountry(value);\n            }\n        }\n    };\n\n    // make sure has all required fields \n    const handleConfirmAddRegion = () => {\n        const foundRegion = data.find((item) => item.region_fullname.toLowerCase() === regionData.region_fullname.toLowerCase());\n\n        if (regionData.region_fullname.trim() === \"\" || regionData.country_fullname.trim() === \"\" || regionData.region_code_name.trim() === \"\") {\n            setShowAlert(true);\n            return;\n        }\n        if (foundRegion) {\n            setShowWarning(true);\n        } else {\n            handleAddRegion();\n        }\n    };\n\n    const handleAddRegion = () => {\n        setShowSnackbar(true);\n        handleAdd(regionData);\n        handleCancel();\n    };\n\n    const handleCloseSnackbar = () => {\n        setShowSnackbar(false)\n    }\n\n    const handleCancel = () => {\n        setShowWarning(false);\n        setShowAlert(false);\n        setRegionData(initialRegionData);\n        setSelectedCountry(\"\");\n        handleClose();\n    };\n\n    return (\n        <div>\n            <Dialog open={showAlert} onClose={() => setShowAlert(false)}>\n                <CustomAlert text={\"region, region code, and country\"} onClose={() => setShowAlert(false)} />\n            </Dialog>\n\n            <Dialog open={showWarning} onClose={() => setShowWarning(false)}>\n                {regionData.region_fullname && (\n                    <div>\n                        <CustomWarning\n                            data={regionData.region_fullname}\n                            onClose={() => setShowWarning(false)}\n                            handleAdd={() => handleAddRegion()} />\n                    </div>\n                )}\n            </Dialog>\n\n            <Dialog open={open} onClose={handleCancel}>\n                <DialogTitle>Add a New Region</DialogTitle>\n                <DialogContent>\n                    <TextField\n                        fullWidth\n                        label=\"Region*\"\n                        value={regionData.region_fullname}\n                        onChange={(e) => handleInputChange(\"region_fullname\", e.target.value)}\n                        sx={{ width: \"100%\", marginTop: \"0.5rem\", marginBottom: \"1rem\" }}\n                    />\n\n                    <TextField\n                        fullWidth\n                        label=\"Region Code*\"\n                        value={regionData.region_code_name}\n                        onChange={(e) => handleInputChange(\"region_code_name\", e.target.value)}\n                        sx={{ width: \"100%\", marginBottom: \"1rem\" }}\n                    />\n\n                    <TextField\n                        fullWidth\n                        label=\"Country*\"\n                        value={regionData.country_fullname}\n                        onChange={(e) => handleInputChange(\"country_fullname\", e.target.value)}\n                        sx={{ width: \"100%\", marginBottom: \"1rem\" }}\n                    />\n\n                    <Box sx={{ display: \"flex\", flexDirection: \"row\", justifyContent: \"space-between\" }}>\n                        <TextField\n                            fullWidth\n                            label=\"Latitude\"\n                            value={regionData.geographic_coordinate.split(', ')[0]}\n                            onChange={(e) => handleInputChange(\"geographic_latitude\", e.target.value)}\n                            sx={{ width: \"100%\", marginRight: \"4px\" }}\n                        />\n\n                        <TextField\n                            fullWidth\n                            label=\"Longitude\"\n                            value={regionData.geographic_coordinate.split(', ')[1]}\n                            onChange={(e) => handleInputChange(\"geographic_longitude\", e.target.value)}\n                            sx={{ width: \"100%\", marginLeft: \"4px\" }}\n                        />\n                    </Box>\n                    {errorMessage && (\n                        <Box sx={{ color: \"red\", fontSize: \"0.8rem\" }}>\n                            {errorMessage}\n                        </Box>\n                    )}\n\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleCancel}>Cancel</Button>\n                    <Button onClick={handleConfirmAddRegion}>Submit</Button>\n                </DialogActions>\n            </Dialog >\n\n            <SnackbarOnSuccess open={showSnackbar} onClose={handleCloseSnackbar} text={\"Added successfully!\"} />\n\n        </div>\n    );\n};\n\nexport default AddRegionDialog;\n","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/dialogs/EditRegionsDialog.js",[],"/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/dialogs/ConfirmDeleteDialog.js",[],"/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/functions/webscrapeWiki.js",[],"/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/functions/webscrape.js",["242","243","244"],"import * as cheerio from \"cheerio\";\nimport axios from \"axios\";\nimport { jsonrepair } from \"jsonrepair\";\n// import { getDocument } from \"pdfjs-dist\";\n// import \"pdfjs-dist/build/pdf.worker.entry\"; // Attach pdfJsworker to window\n\n// List of website to links to invasive species website\nconst BC_INVASIVE_URL = \"https://bcinvasives.ca/take-action/identify/\";\nconst ON_INVASIVE_URL = \"https://www.ontarioinvasiveplants.ca/invasive-plants/species/\";\nconst ON_INVASIVE_URL_AQUATIC_PLANTS = \"https://www.invadingspecies.com/invaders/aquatic-plants/\";\nconst ON_INVASIVE_URL_TERRESTRIAL_PLANTS = \"https://www.invadingspecies.com/invaders/terrestrial-plants/\";\n\n/**\n *\n * This function only webscrape on the https://bcinvasives.ca/ and collect the following:\n *  - List of invasive species\n *  - Each species about section\n *  - How to identrify section\n */\nconst webscrapeBCInvasive = async () => {\n\t// Get the list of invasive species\n\tconst speciesList = await getListOfSpeciesFromBCInvasive(BC_INVASIVE_URL);\n\n  // Go to each subpage and webscrapee the about section and how to identify section\n  // .invansive-about\n  // .invasive-identify > .font-base\n  /** We might not need this **/\n//   Promise.all(\n//     speciesList.BCInvasiveSpeciesPlants.map(async (species, index) => {\n//       if (species.links.length > 0)\n//         axios\n//           .get(species.links[0])\n//           .then(async (response) => {\n//             const $ = await cheerio.load(response.data);\n\n//             // Get About section of the species\n//             let aboutSection = \"\";\n//             await $(\"div.invansive-about >p\").each((i, ele) => {\n//               aboutSection += $(ele).text() + \"\\n\";\n//             });\n\n//             // Get How to identify section of the species\n//             let howToIdentifySection = \"\";\n//             await $(\"div.invasive-identify div.font-base > p\").each(\n//               (i, ele) => {\n//                 howToIdentifySection += $(ele).text() + \"\\n\";\n//               }\n//             );\n\n//             speciesList.BCInvasiveSpeciesPlants[index].info.push({\n//               header: \"About\",\n//               description: aboutSection.trim(),\n//             });\n\n//             speciesList.BCInvasiveSpeciesPlants[index].info.push({\n//               header: \"How To Identify\",\n//               description: howToIdentifySection.trim(),\n//             });\n//           })\n//           .catch((err) => {\n//             console.log(err);\n//           });\n//     })\n//   );\n\n\treturn speciesList;\n};\n\n// Helper Function to get a list of invasive species\nconst getListOfSpeciesFromBCInvasive = async (url) => {\n  const output = {\n    BCInvasiveSpeciesPlants: [],\n  };\n\n\t// Scraping list of all species\n\tawait axios\n\t\t.get(url)\n\t\t.then(async (response) => {\n\t\t\tconst $ = await cheerio.load(response.data);\n\n\t\t\t// Get species links\n\t\t\tconst speciesLinks = {};\n\t\t\tawait $(\"header.invasive-header > a\").each((i, ele) => {\n\t\t\t\tconst link = $(ele).attr(\"href\");\n\t\t\t\tconst scienceName = $(ele).children(\"div\").text();\n\n\t\t\t\tspeciesLinks[scienceName] = link;\n\t\t\t});\n\n\t\t\t// Get species data summary\n\t\t\tconst regex =\n\t\t\t\t/window\\.__invasivesList\\.push\\(JSON\\.parse\\(\\'(.*?)\\'\\)\\);/;\n\t\t\tawait $('script:contains(\"window.__invasivesList.push\")').each(\n\t\t\t\t(i, ele) => {\n\t\t\t\t\tconst stringFormat = $(ele).text();\n\t\t\t\t\tconst match = stringFormat.match(regex);\n\n\t\t\t\t\tif (match && match[1]) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t// Repaire JSON formate before parse it.\n\t\t\t\t\t\t\tconst repairedJSON = jsonrepair(match[1]);\n\t\t\t\t\t\t\tconst paredJSON = JSON.parse(repairedJSON);\n\n\t\t\t\t\t\t\t// Add link to species\n\t\t\t\t\t\t\tparedJSON.link = speciesLinks[paredJSON.species];\n\n\t\t\t\t\t\t\t\n\n              if (paredJSON.animal_type === \"\") {\n\t\t\t\t// Fix scientific name if needed\n\t\t\t\tconst sciName = paredJSON.species.split('&').map(name => name.toLowerCase().replace(/ /g, '_').trim());\n\n                output.BCInvasiveSpeciesPlants.push({\n                  scientific_name: sciName,\n                  resource_links: [paredJSON.link.trim()],\n                  species_description: paredJSON.summary.trim(),\n                  alternative_species: [],\n\t\t\t\t  region_id: \"BC\"\n                });\n              }\n            } catch (error) {\n              console.log(error);\n              return;\n            }\n          }\n        }\n      );\n    })\n    .catch((err) => {\n      console.log(err);\n    });\n\n\treturn output;\n};\n\n/**\n *\n * This function only webscrape on the https://www.ontarioinvasiveplants.ca/ and collect the following:\n *  - List of invasive species\n *  - Each species about section\n *  - Link to PDFs ...\n */\n// const webscrapeONInvasive_ONInvasivePlantCouncil = async () => {\n// \t// Get the list of invasive species\n// \tconst speciesList = await getListOfSpeciesFromONInvasive(ON_INVASIVE_URL);\n\n// \t// Configuration on web scraping\n// \tconst scientificName_FontSize = 14;\n// \tconst torlerance = 1;\n// \tconst stringIndicatorForDocument = \"for more information\";\n// \tconst documentNameToLook = \"best management practices\";\n\n// \tawait Promise.all(\n// \t\tspeciesList.ONInvasiveSpeciesPlants.map(async (specie, index) => {\n// \t\t\t// Go to each subpage and webscrapee the about section and references on the species\n// \t\t\t// Get about section of the species and related documents\n// \t\t\tlet aboutSection = \"\";\n// \t\t\tconst relatedDocuments = [];\n// \t\t\tawait axios\n// \t\t\t\t.get(specie.link)\n// \t\t\t\t.then(async (response) => {\n// \t\t\t\t\tconst $ = await cheerio.load(response.data);\n\n// \t\t\t\t\t// web scraping data for about section and related documents\n// \t\t\t\t\tawait $(\"div.entry-content\")\n// \t\t\t\t\t\t.contents()\n// \t\t\t\t\t\t.each((i, ele) => {\n// \t\t\t\t\t\t\tif ($(ele).is(\"p\")) {\n// \t\t\t\t\t\t\t\t// Potential about section\n// \t\t\t\t\t\t\t\tconst pString = $(ele).text();\n\n// \t\t\t\t\t\t\t\t// Regx for this format to get scientific name in the middle\n// \t\t\t\t\t\t\t\tif (\n// \t\t\t\t\t\t\t\t\t!pString.toLowerCase().includes(stringIndicatorForDocument) &&\n// \t\t\t\t\t\t\t\t\t!pString.toLowerCase().includes(\"download\")\n// \t\t\t\t\t\t\t\t) {\n// \t\t\t\t\t\t\t\t\taboutSection += $(ele).text();\n// \t\t\t\t\t\t\t\t}\n// \t\t\t\t\t\t\t} else if ($(ele).is(\"ul\")) {\n// \t\t\t\t\t\t\t\t// Potential block for list of related about section\n// \t\t\t\t\t\t\t\t$(ele)\n// \t\t\t\t\t\t\t\t\t.children(\"li\")\n// \t\t\t\t\t\t\t\t\t.each((i, ele) => {\n// \t\t\t\t\t\t\t\t\t\taboutSection += \"\\n* \" + $(ele).text();\n// \t\t\t\t\t\t\t\t\t});\n// \t\t\t\t\t\t\t} else if ($(ele).is(\"div\")) {\n// \t\t\t\t\t\t\t\t// Potential block for PDF\n// \t\t\t\t\t\t\t\t$(ele)\n// \t\t\t\t\t\t\t\t\t.children(\"a\")\n// \t\t\t\t\t\t\t\t\t.each((i, ele) => {\n// \t\t\t\t\t\t\t\t\t\tif (!$(ele).text().toLowerCase().includes(\"download\")) {\n// \t\t\t\t\t\t\t\t\t\t\trelatedDocuments.push({\n// \t\t\t\t\t\t\t\t\t\t\t\ttitle: $(ele).text(),\n// \t\t\t\t\t\t\t\t\t\t\t\tlink: $(ele).attr(\"href\"),\n// \t\t\t\t\t\t\t\t\t\t\t});\n// \t\t\t\t\t\t\t\t\t\t}\n// \t\t\t\t\t\t\t\t\t});\n// \t\t\t\t\t\t\t}\n// \t\t\t\t\t\t});\n// \t\t\t\t})\n// \t\t\t\t.catch((err) => {\n// \t\t\t\t\tconsole.log(err);\n// \t\t\t\t});\n\n// \t\t\t// web scraping data for scientific name and common name based on front size\n// \t\t\tlet scienceName = \"\";\n// \t\t\tif (relatedDocuments.length !== 0) {\n// \t\t\t\t// Select the right document\n// \t\t\t\tlet pdfURL = undefined;\n// \t\t\t\trelatedDocuments.forEach((ele) => {\n// \t\t\t\t\tif (ele.title.toLowerCase().includes(documentNameToLook)) {\n// \t\t\t\t\t\tpdfURL = ele.link;\n// \t\t\t\t\t}\n// \t\t\t\t});\n\n// \t\t\t\t// Just use the first one if no PDF is found.\n// \t\t\t\tif (pdfURL === undefined) {\n// \t\t\t\t\tpdfURL = relatedDocuments[0].link;\n// \t\t\t\t}\n\n// \t\t\t\t// Request PDF document\n// \t\t\t\tawait axios\n// \t\t\t\t\t.get(pdfURL, { responseType: \"arraybuffer\" })\n// \t\t\t\t\t.then(async (response) => {\n// \t\t\t\t\t\tconst pdf = await getDocument({ data: response.data }).promise;\n// \t\t\t\t\t\tconst firstPage = await pdf.getPage(1);\n// \t\t\t\t\t\tconst content = await firstPage.getTextContent();\n\n// \t\t\t\t\t\tcontent.items.forEach((res, index) => {\n// \t\t\t\t\t\t\tif (\n// \t\t\t\t\t\t\t\tscientificName_FontSize - torlerance <= res.height &&\n// \t\t\t\t\t\t\t\tres.height <= scientificName_FontSize + torlerance\n// \t\t\t\t\t\t\t) {\n// \t\t\t\t\t\t\t\t// Assume species name uses the Binomial nomenclature which the common naming convention.\n// \t\t\t\t\t\t\t\tconst potentialScientificName = res.str\n// \t\t\t\t\t\t\t\t\t.trim()\n// \t\t\t\t\t\t\t\t\t.replace(/\\(|\\)/g, \"\");\n// \t\t\t\t\t\t\t\tif (potentialScientificName.split(\" \").length === 2) {\n// \t\t\t\t\t\t\t\t\tscienceName = potentialScientificName;\n// \t\t\t\t\t\t\t\t}\n// \t\t\t\t\t\t\t}\n// \t\t\t\t\t\t});\n// \t\t\t\t\t})\n// \t\t\t\t\t.catch((err) => {\n// \t\t\t\t\t\tconsole.log(err);\n// \t\t\t\t\t});\n// \t\t\t}\n\n// \t\t\t// Assign data to global variables\n// \t\t\tspeciesList.ONInvasiveSpeciesPlants[index].aboutSection = aboutSection;\n// \t\t\tif (relatedDocuments)\n// \t\t\t\tspeciesList.ONInvasiveSpeciesPlants[index].relatedDocuments =\n// \t\t\t\t\trelatedDocuments;\n// \t\t\tif (scienceName !== \"\") {\n// \t\t\t\tconst parsedScienceName = scienceName.trim().replace(/\\(|\\)/g, \"\");\n// \t\t\t\tspeciesList.ONInvasiveSpeciesPlants[index].species = parsedScienceName;\n// \t\t\t}\n// \t\t})\n// \t);\n\n// \t// Grabing other data\n// \t// Library to get data from wiki: https://github.com/Requarks/wiki\n\n// \tconsole.log(speciesList);\n// };\n\n// Helper Function to get a list of invasive species\n// const getListOfSpeciesFromONInvasive_ONInvasivePlantCouncil = async (url) => {\n//   const output = {\n//     ONInvasiveSpeciesPlants: [],\n//   };\n\n// \t// Scraping list of all species\n// \tawait axios\n// \t\t.get(url)\n// \t\t.then(async (response) => {\n// \t\t\tconst $ = await cheerio.load(response.data);\n\n// \t\t\t// Get species links\n// \t\t\tawait $(\"div.entry-content li > a\").each((i, ele) => {\n// \t\t\t\tconst link = $(ele).attr(\"href\");\n// \t\t\t\tconst commonName = $(ele).text();\n// \t\t\t\toutput.ONInvasiveSpeciesPlants.push({\n// \t\t\t\t\tname: commonName,\n// \t\t\t\t\tlink: link,\n// \t\t\t\t});\n// \t\t\t});\n// \t\t})\n// \t\t.catch((err) => {\n// \t\t\tconsole.log(err);\n// \t\t});\n\n// \treturn output;\n// };\n\n/**\n *\n * This function only webscrap on the https://www.ontarioinvasiveplants.ca/ and collect the following:\n *  - List of invasive species\n *  - Each species about section\n *  - Link to PDFs ...\n */\nconst webscrapeONInvasive = async () => {\n\tconst speciesList = {\n\t\tONInvasiveSpeciesPlants: [],\n\t};\n\tawait getListOfSpeciesFromONInvasive(speciesList, ON_INVASIVE_URL_AQUATIC_PLANTS);\n\tawait getListOfSpeciesFromONInvasive(speciesList, ON_INVASIVE_URL_TERRESTRIAL_PLANTS);\n\n\t// Go to each subpage and webscrape the about section and how to identify section\n\t// .invasive-about\n\t// .invasive-identify > .font-base\n\tawait Promise.all(speciesList.ONInvasiveSpeciesPlants.map(async (specie, index) => {\n\t\tif(specie.resource_links.length > 0) {\n\t\t\ttry {\n\t\t\t\tconst response = await axios.get(specie.resource_links[0]);\n\t\t\t\tconst $ = await cheerio.load(response.data);\n\n\t\t\t\tconst scienceName = $(\"div.header-content span\").text();\n\n\t\t\t\t// Fix scientific name if needed\n\t\t\t\tconst sciName = scienceName.split('&').map(name => name.toLowerCase().replace(/ /g, '_').trim());\n\n\t\t\t\t// Grab other sections\t\t\t\t\n\t\t\t\tconst sectionList = $(\"div.et_pb_text_inner\");\n\t\t\n\t\t\t\tlet backgroundInfo = \"\";\n\t\t\t\tlet impactOf = \"\";\n\n\t\t\t\t// Searching for background info and impact of the species\n\t\t\t\tsectionList.each((i, ele) => {\n\t\t\t\t\tconst header = $(ele).children(\"h2\").text();\n\n\t\t\t\t\tif(header.toLowerCase().includes(\"background\")){\n\t\t\t\t\t\tbackgroundInfo = $(ele).text();\n\t\t\t\t\t} else if(header.toLowerCase().includes(\"impacts of\")){\n\t\t\t\t\t\timpactOf = $(ele).text();\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\t// Load data into speciesList\n\t\t\t\tspeciesList.ONInvasiveSpeciesPlants[index].scientific_name = sciName;\n\t\t\t\tspeciesList.ONInvasiveSpeciesPlants[index].species_description = (impactOf !== \"\") ? impactOf : backgroundInfo;\n\t\t\t} catch (err) {\n\t\t\t\tconsole.log(err);\n\t\t\t}\n\t\t}\n\t}));\n\n\treturn speciesList;\n};\n\n\nconst getListOfSpeciesFromONInvasive = async (output, url) => {\n  // Scraping list of all species\n  await axios\n    .get(url)\n    .then(async (response) => {\n      const $ = await cheerio.load(response.data);\n\n\t\t// Get species links\n\t\tawait $('div[data-id=\"pt-cv-page-1\"] > div').each((i, ele) => {\n\t\t\t// There are a list of child of div\n\t\t\t// Each child has div > div a h3\n\n\t\t\tconst child = $(ele).children(\"div\");\n\t\t\tconst link = $(child).children(\"a\").attr(\"href\");\n\n\t\t\toutput.ONInvasiveSpeciesPlants.push({\n\t\t\t\tscientific_name: undefined,\n\t\t\t\tresource_links: [link.trim()],\n\t\t\t\tspecies_description: undefined,\n\t\t\t\talternative_species: [],\n\t\t\t\tregion_id: \"ON\"\n\t\t\t});\n      });\n    })\n    .catch((err) => {\n      console.log(err);\n    });\n};\n\nexport { webscrapeBCInvasive, webscrapeONInvasive};","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/functions/RegionMap.js",[],"/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/components/AlertComponent.js",[],"/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/components/SnackbarComponent.js",[],"/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/components/WarningComponent.js",[],"/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/dialogs/AddInvasiveSpeciesDialog.js",[],"/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/dialogs/EditInvasiveSpeciesDialog.js",[],"/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/dialogs/AddAlternativeSpeciesDialog.js",[],"/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/dialogs/EditAlternativeSpeciesDialog.js",["245","246"],"import { useState, useEffect } from 'react';\nimport { Box, Dialog, DialogContent, TextField, Button, DialogActions, DialogTitle, Typography } from '@mui/material';\nimport SnackbarOnSuccess from '../components/SnackbarComponent';\nimport CustomAlert from '../components/AlertComponent';\nimport DeleteDialog from '../dialogs/ConfirmDeleteDialog';\nimport { Auth } from \"aws-amplify\";\nimport axios from \"axios\";\n\n// dialog for editing an alternative species\nconst EditAlternativeSpeciesDialog = ({ open, tempData, handleInputChange, handleFinishEditingRow, handleSave }) => {\n    const API_BASE_URL = process.env.REACT_APP_API_BASE_URL;\n    const S3_BASE_URL = process.env.REACT_APP_S3_BASE_URL;\n\n    const [showSaveConfirmation, setShowSaveConfirmation] = useState(false);\n    const [user, setUser] = useState(\"\");\n\n    // gets current authorized user\n    const retrieveUser = async () => {\n        try {\n            const returnedUser = await Auth.currentAuthenticatedUser();\n            setUser(returnedUser);\n        } catch (e) {\n            console.log(\"error getting user: \", e);\n        }\n    }\n\n    // retriever user on load\n    useEffect(() => {\n        retrieveUser()\n    }, [])\n\n    const handleClose = (event, reason) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n        setShowSaveConfirmation(false);\n    };\n\n    // hanldes user uploaded image files\n    const handleImageUpload = async (e) => {\n        const files = e.target.files;\n\n        if (files) {\n            let s3Keys = tempData.s3_keys ? [...tempData.s3_keys] : [];\n\n            try {\n                for (let i = 0; i < files.length; i++) {\n                    // GET request to getS3SignedURL endpoint\n                    const signedURLResponse = await axios\n                        .get(`${API_BASE_URL}/getS3SignedURL`, {\n                            params: {\n                                contentType: files[i].type,\n                                filename: files[i].name + Date.now() // Date makes the key unique\n                            },\n                            headers: {\n                                'x-api-key': process.env.REACT_APP_X_API_KEY\n                            }\n                        });\n\n                    if (!signedURLResponse.data.uploadURL) {\n                        continue;\n                    }\n\n                    const signedURLData = signedURLResponse.data;\n                    console.log(\"signed url data: \", signedURLData)\n\n                    // use the obtained signed URL to upload the image\n                    await axios.put(signedURLData.uploadURL, files[i])\n\n                    // Image uploaded successfully, add its s3 key to the list\n                    if (signedURLData.key) {\n                        s3Keys.push(signedURLData.key);\n                    }\n                }\n\n                handleInputChange('s3_keys', s3Keys);\n\n            } catch (error) {\n                console.error('Error uploading images:', error);\n            }\n        }\n    };\n\n    const [showWarning, setShowWarning] = useState(false);\n    const [deleteImg, setDeleteImg] = useState(null);\n\n    const handleImageDelete = (img, index) => {\n        setShowWarning(true);\n        setDeleteImg(img);\n    };\n\n\n    const handleConfirmDeleteImage = () => {\n        console.log(\"img to delete: \", deleteImg)\n        setShowWarning(false)\n\n        // remove the image from the database\n        if (deleteImg) {\n            retrieveUser();\n            const jwtToken = user.signInUserSession.accessToken.jwtToken;\n\n            axios\n                .delete(`${API_BASE_URL}plantsImages/${deleteImg.image_id}`, {\n                    headers: {\n                        'Authorization': `${jwtToken}`\n                    }\n                })\n                .then((response) => {\n                    // Filter out the deleted image from tempData.images\n                    const updatedImages = tempData.images.filter(\n                        (img) => img.image_id !== deleteImg.image_id\n                    );\n                    console.log(\"updatedImages: \", updatedImages);\n                    handleInputChange(\"images\", updatedImages);\n                    handleInputChange(\"image_links\", updatedImages.map((image) => image.image_url));\n                    handleInputChange(\"s3_keys\", updatedImages.map((image) => image.s3_key));\n                    console.log(\"images deleted successfully\", response.data);\n                })\n                .catch((error) => {\n                    console.error(\"Error deleting image\", error);\n                }).finally(() => {\n                    // Reset states\n                    setDeleteImg(null);\n                    setShowWarning(false);\n                });\n        } else {\n            setShowWarning(false);\n        }\n    }\n\n\n    const [showAlert, setShowAlert] = useState(false);\n    const handleConfirmAddAlternativeSpecies = () => {\n        if (!tempData.scientific_name || tempData.scientific_name.length === 0) {\n            setShowAlert(true);\n            return false;\n        }\n        setShowSaveConfirmation(true);\n        return true\n    };\n\n    return (\n        <div>\n            <Dialog open={open} onClose={handleFinishEditingRow} maxWidth=\"sm\" fullWidth>\n                {/* scientific name as title */}\n                < DialogTitle style={{ display: \"flex\", alignItems: \"center\", backgroundColor: \"#c8dbe6\", height: \"60px\" }\n                }>\n                    <Typography\n                        variant=\"h5\"\n                        component=\"div\"\n                        style={{ fontStyle: \"italic\" }}\n                    >\n                        {Array.isArray(tempData.scientific_name) ? tempData.scientific_name.join(', ') : tempData.scientific_name}\n                    </Typography>\n                </DialogTitle >\n\n                <DialogContent style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\n                    <TextField\n                        label=\"Scientific Name(s) (separate by commas)\"\n                        value={Array.isArray(tempData.scientific_name) ? tempData.scientific_name.join(', ') : tempData.scientific_name}\n                        onChange={(e) => handleInputChange(\"scientific_name\", e.target.value)}\n                        sx={{ width: \"100%\", marginTop: \"1rem\", marginBottom: \"1rem\" }}\n                    />\n\n                    <TextField\n                        label=\"Common Name(s) (separate by commas)\"\n                        value={\n                            Array.isArray(tempData.common_name)\n                                ? tempData.common_name.join(\", \")\n                                : tempData.common_name\n                        }\n                        onChange={(e) => handleInputChange(\"common_name\", e.target.value)}\n                        sx={{ width: \"100%\", marginTop: \"1rem\", marginBottom: \"1rem\" }}\n                    />\n\n                    <TextField\n                        label=\"Description\"\n                        multiline\n                        rows={6}\n                        value={tempData.species_description}\n                        onChange={(e) => handleInputChange(\"species_description\", e.target.value)}\n                        sx={{ width: \"100%\", marginBottom: \"1rem\" }}\n                    />\n\n                    <TextField\n                        label=\"Resource links (separate by commas)\"\n                        value={\n                            Array.isArray(tempData.resource_links)\n                                ? tempData.resource_links.join(\", \")\n                                : tempData.resource_links\n                        } \n                        onChange={(e) =>\n                            handleInputChange(\"resource_links\", e.target.value.split(\", \"))\n                        }\n                        sx={{\n                            width: \"100%\", marginBottom: \"1rem\"\n                        }}\n                    />\n\n\n                    <TextField\n                        multiline\n                        label=\"Image links (separate by commas)\"\n                        // value={\n                        //     Array.isArray(tempData.image_links)\n                        //         ? tempData.image_links.join(\", \")\n                        //         : tempData.image_links\n                        // }\n                        onChange={(e) => {\n                            handleInputChange(\"image_links\", e.target.value.split(\", \"))\n                        }\n                        }\n                        sx={{ width: \"100%\", marginBottom: \"1rem\" }}\n                    />\n\n                    <Box sx={{ width: '100%', textAlign: 'left', marginBottom: '2rem' }}>\n                        <Typography variant=\"body1\" sx={{ width: '100%' }}>\n                            Upload Images:\n                        </Typography> \n                        <input\n                            type=\"file\"\n                            multiple\n                            onChange={handleImageUpload}\n                            sx={{ width: '100%' }}\n                        />\n                    </Box>\n\n                    <Box sx={{ width: '100%', textAlign: 'left' }}>\n                        {/* {console.log(\"tempdata in images:\", tempData)} */}\n                        {Array.isArray(tempData.images) &&\n                            tempData.images.map((img, index) => (\n                                <div key={img.image_id} sx={{ width: '90%', marginBottom: \"2rem\", textAlign: \"left\" }}>\n                                    {/* Display image if image_url exists */}\n                                    {img.image_url && (\n                                        <img\n                                            src={img.image_url}\n                                            alt={`image-${index}`}\n                                            style={{ maxWidth: '60%', height: 'auto' }}\n                                        />\n                                    )}\n\n                                    {/* Display image from S3 bucket if s3_key exists */}\n                                    {img.s3_key && (\n                                        <div>\n                                            <img\n                                                src={`${S3_BASE_URL}${img.s3_key}`}\n                                                alt={`image-${index}`}\n                                                style={{ maxWidth: '60%', height: 'auto' }}\n                                            />\n                                        </div>\n                                    )}\n\n\n                                    {/* Delete button for each image */}\n                                    <button onClick={() => handleImageDelete(img, index)}>Delete</button>\n                                </div>\n                            ))}\n                    </Box>\n\n                </DialogContent>\n\n                <Dialog open={showAlert} onClose={() => setShowAlert(false)}   >\n                    <CustomAlert text={\"scientific name\"} onClose={() => setShowAlert(false)} />\n                </Dialog>\n\n                <DeleteDialog\n                    open={showWarning}\n                    handleClose={() => setShowWarning(false)}\n                    handleDelete={handleConfirmDeleteImage}\n                />\n\n                <DialogActions>\n                    <Button onClick={handleFinishEditingRow}>Cancel</Button>\n                    <Button\n                        onClick={() => {\n                            handleSave(handleConfirmAddAlternativeSpecies());\n                        }}\n                    >Save</Button>\n                </DialogActions>\n            </Dialog >\n\n            <SnackbarOnSuccess open={showSaveConfirmation} onClose={handleClose} text={\"Saved successfully!\"} />\n\n        </div >\n    );\n};\n\nexport default EditAlternativeSpeciesDialog;\n",{"ruleId":"247","replacedBy":"248"},{"ruleId":"249","replacedBy":"250"},{"ruleId":"251","severity":1,"message":"252","line":18,"column":6,"nodeType":"253","endLine":18,"endColumn":8,"suggestions":"254"},{"ruleId":"255","severity":1,"message":"256","line":1,"column":10,"nodeType":"257","messageId":"258","endLine":1,"endColumn":24},{"ruleId":"255","severity":1,"message":"259","line":16,"column":9,"nodeType":"257","messageId":"258","endLine":16,"endColumn":16},{"ruleId":"251","severity":1,"message":"260","line":142,"column":8,"nodeType":"253","endLine":142,"endColumn":10,"suggestions":"261"},{"ruleId":"262","severity":1,"message":"263","line":274,"column":77,"nodeType":"264","messageId":"265","endLine":274,"endColumn":79},{"ruleId":"266","severity":1,"message":"267","line":282,"column":21,"nodeType":"268","messageId":"269","endLine":282,"endColumn":87},{"ruleId":"270","severity":1,"message":"271","line":454,"column":54,"nodeType":"272","endLine":454,"endColumn":143},{"ruleId":"255","severity":1,"message":"273","line":56,"column":13,"nodeType":"257","messageId":"258","endLine":56,"endColumn":24},{"ruleId":"274","severity":1,"message":"275","line":70,"column":5,"nodeType":"276","messageId":"277","endLine":70,"endColumn":49},{"ruleId":"255","severity":1,"message":"278","line":71,"column":11,"nodeType":"257","messageId":"258","endLine":71,"endColumn":15},{"ruleId":"255","severity":1,"message":"279","line":4,"column":22,"nodeType":"257","messageId":"258","endLine":4,"endColumn":32},{"ruleId":"255","severity":1,"message":"280","line":91,"column":73,"nodeType":"257","messageId":"258","endLine":91,"endColumn":91},{"ruleId":"255","severity":1,"message":"281","line":105,"column":11,"nodeType":"257","messageId":"258","endLine":105,"endColumn":32},{"ruleId":"255","severity":1,"message":"282","line":131,"column":11,"nodeType":"257","messageId":"258","endLine":131,"endColumn":21},{"ruleId":"255","severity":1,"message":"283","line":146,"column":12,"nodeType":"257","messageId":"258","endLine":146,"endColumn":22},{"ruleId":"255","severity":1,"message":"284","line":146,"column":24,"nodeType":"257","messageId":"258","endLine":146,"endColumn":37},{"ruleId":"255","severity":1,"message":"285","line":194,"column":11,"nodeType":"257","messageId":"258","endLine":194,"endColumn":25},{"ruleId":"255","severity":1,"message":"286","line":40,"column":10,"nodeType":"257","messageId":"258","endLine":40,"endColumn":34},{"ruleId":"251","severity":1,"message":"287","line":74,"column":6,"nodeType":"253","endLine":74,"endColumn":8,"suggestions":"288"},{"ruleId":"251","severity":1,"message":"289","line":240,"column":6,"nodeType":"253","endLine":240,"endColumn":18,"suggestions":"290"},{"ruleId":"251","severity":1,"message":"291","line":510,"column":6,"nodeType":"253","endLine":510,"endColumn":19,"suggestions":"292"},{"ruleId":"251","severity":1,"message":"293","line":535,"column":6,"nodeType":"253","endLine":535,"endColumn":38,"suggestions":"294"},{"ruleId":"251","severity":1,"message":"291","line":565,"column":6,"nodeType":"253","endLine":565,"endColumn":12,"suggestions":"295"},{"ruleId":"255","severity":1,"message":"296","line":41,"column":10,"nodeType":"257","messageId":"258","endLine":41,"endColumn":26},{"ruleId":"255","severity":1,"message":"297","line":49,"column":21,"nodeType":"257","messageId":"258","endLine":49,"endColumn":32},{"ruleId":"251","severity":1,"message":"298","line":97,"column":6,"nodeType":"253","endLine":97,"endColumn":8,"suggestions":"299"},{"ruleId":"251","severity":1,"message":"289","line":290,"column":6,"nodeType":"253","endLine":290,"endColumn":18,"suggestions":"300"},{"ruleId":"255","severity":1,"message":"301","line":353,"column":9,"nodeType":"257","messageId":"258","endLine":353,"endColumn":20},{"ruleId":"255","severity":1,"message":"302","line":408,"column":11,"nodeType":"257","messageId":"258","endLine":408,"endColumn":33},{"ruleId":"251","severity":1,"message":"303","line":538,"column":6,"nodeType":"253","endLine":538,"endColumn":19,"suggestions":"304"},{"ruleId":"251","severity":1,"message":"293","line":603,"column":6,"nodeType":"253","endLine":603,"endColumn":38,"suggestions":"305"},{"ruleId":"251","severity":1,"message":"303","line":609,"column":6,"nodeType":"253","endLine":609,"endColumn":19,"suggestions":"306"},{"ruleId":"251","severity":1,"message":"303","line":633,"column":6,"nodeType":"253","endLine":633,"endColumn":12,"suggestions":"307"},{"ruleId":"308","severity":1,"message":"309","line":752,"column":32,"nodeType":"310","messageId":"311","endLine":752,"endColumn":34},{"ruleId":"255","severity":1,"message":"312","line":3,"column":10,"nodeType":"257","messageId":"258","endLine":3,"endColumn":16},{"ruleId":"255","severity":1,"message":"313","line":4,"column":10,"nodeType":"257","messageId":"258","endLine":4,"endColumn":29},{"ruleId":"255","severity":1,"message":"314","line":4,"column":31,"nodeType":"257","messageId":"258","endLine":4,"endColumn":50},{"ruleId":"255","severity":1,"message":"315","line":5,"column":10,"nodeType":"257","messageId":"258","endLine":5,"endColumn":28},{"ruleId":"255","severity":1,"message":"316","line":6,"column":10,"nodeType":"257","messageId":"258","endLine":6,"endColumn":34},{"ruleId":"255","severity":1,"message":"317","line":6,"column":36,"nodeType":"257","messageId":"258","endLine":6,"endColumn":60},{"ruleId":"255","severity":1,"message":"318","line":6,"column":62,"nodeType":"257","messageId":"258","endLine":6,"endColumn":94},{"ruleId":"255","severity":1,"message":"319","line":6,"column":96,"nodeType":"257","messageId":"258","endLine":6,"endColumn":113},{"ruleId":"255","severity":1,"message":"320","line":14,"column":26,"nodeType":"257","messageId":"258","endLine":14,"endColumn":41},{"ruleId":"255","severity":1,"message":"321","line":18,"column":25,"nodeType":"257","messageId":"258","endLine":18,"endColumn":39},{"ruleId":"255","severity":1,"message":"322","line":39,"column":17,"nodeType":"257","messageId":"258","endLine":39,"endColumn":30},{"ruleId":"255","severity":1,"message":"323","line":14,"column":8,"nodeType":"257","messageId":"258","endLine":14,"endColumn":31},{"ruleId":"255","severity":1,"message":"324","line":39,"column":12,"nodeType":"257","messageId":"258","endLine":39,"endColumn":25},{"ruleId":"251","severity":1,"message":"325","line":70,"column":8,"nodeType":"253","endLine":70,"endColumn":10,"suggestions":"326"},{"ruleId":"255","severity":1,"message":"301","line":168,"column":11,"nodeType":"257","messageId":"258","endLine":168,"endColumn":22},{"ruleId":"251","severity":1,"message":"327","line":283,"column":8,"nodeType":"253","endLine":283,"endColumn":21,"suggestions":"328"},{"ruleId":"251","severity":1,"message":"327","line":398,"column":8,"nodeType":"253","endLine":398,"endColumn":14,"suggestions":"329"},{"ruleId":"255","severity":1,"message":"330","line":1,"column":17,"nodeType":"257","messageId":"258","endLine":1,"endColumn":25},{"ruleId":"255","severity":1,"message":"331","line":1,"column":27,"nodeType":"257","messageId":"258","endLine":1,"endColumn":38},{"ruleId":"255","severity":1,"message":"332","line":1,"column":51,"nodeType":"257","messageId":"258","endLine":1,"endColumn":57},{"ruleId":"255","severity":1,"message":"316","line":4,"column":10,"nodeType":"257","messageId":"258","endLine":4,"endColumn":34},{"ruleId":"255","severity":1,"message":"333","line":6,"column":10,"nodeType":"257","messageId":"258","endLine":6,"endColumn":35},{"ruleId":"255","severity":1,"message":"334","line":1,"column":29,"nodeType":"257","messageId":"258","endLine":1,"endColumn":35},{"ruleId":"308","severity":1,"message":"335","line":116,"column":39,"nodeType":"310","messageId":"311","endLine":116,"endColumn":41},{"ruleId":"255","severity":1,"message":"336","line":2,"column":85,"nodeType":"257","messageId":"258","endLine":2,"endColumn":96},{"ruleId":"255","severity":1,"message":"337","line":2,"column":98,"nodeType":"257","messageId":"258","endLine":2,"endColumn":108},{"ruleId":"255","severity":1,"message":"338","line":2,"column":110,"nodeType":"257","messageId":"258","endLine":2,"endColumn":116},{"ruleId":"255","severity":1,"message":"339","line":2,"column":118,"nodeType":"257","messageId":"258","endLine":2,"endColumn":126},{"ruleId":"255","severity":1,"message":"340","line":20,"column":12,"nodeType":"257","messageId":"258","endLine":20,"endColumn":27},{"ruleId":"255","severity":1,"message":"341","line":9,"column":7,"nodeType":"257","messageId":"258","endLine":9,"endColumn":22},{"ruleId":"342","severity":1,"message":"343","line":92,"column":50,"nodeType":"344","messageId":"345","endLine":92,"endColumn":51,"suggestions":"346"},{"ruleId":"342","severity":1,"message":"343","line":92,"column":57,"nodeType":"344","messageId":"345","endLine":92,"endColumn":58,"suggestions":"347"},{"ruleId":"348","severity":1,"message":"349","line":235,"column":41,"nodeType":"272","endLine":239,"endColumn":43},{"ruleId":"348","severity":1,"message":"349","line":245,"column":45,"nodeType":"272","endLine":249,"endColumn":47},"no-native-reassign",["350"],"no-negated-in-lhs",["351"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setAuthListener'. Either include it or remove the dependency array.","ArrayExpression",["352"],"no-unused-vars","'createMuiTheme' is defined but never used.","Identifier","unusedVar","'Amplify' is defined but never used.","React Hook useEffect has a missing dependency: 'updateLoginState'. Either include it or remove the dependency array.",["353"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-throw-literal","Expected an error object to be thrown.","ThrowStatement","object","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'menuEnabled' is assigned a value but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","'list' is assigned a value but never used.","'withStyles' is defined but never used.","'showSideMenuButton' is assigned a value but never used.","'handleProfileMenuOpen' is assigned a value but never used.","'renderMenu' is assigned a value but never used.","'activeMenu' is assigned a value but never used.","'setActiveMenu' is assigned a value but never used.","'handleSideMenu' is assigned a value but never used.","'searchBarDropdownResults' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetchAllAlternativeSpecies'. Either include it or remove the dependency array.",["354"],"React Hook useEffect has missing dependencies: 'API_BASE_URL', 'currLastSpeciesId', and 'rowsPerPage'. Either include them or remove the dependency array.",["355"],"React Hook useEffect has a missing dependency: 'handleGetAlternativeSpecies'. Either include it or remove the dependency array.",["356"],"React Hook useEffect has a missing dependency: 'calculateStartAndEnd'. Either include it or remove the dependency array.",["357"],["358"],"'searchBarResults' is assigned a value but never used.","'setRegionId' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'loadSpeciesInBackground'. Either include it or remove the dependency array.",["359"],["360"],"'handleReset' is assigned a value but never used.","'splitByCommaWithSpaces' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'handleGetInvasiveSpecies'. Either include it or remove the dependency array.",["361"],["362"],["363"],["364"],"array-callback-return","Array.prototype.filter() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'saveAs' is defined but never used.","'webscrapeBCInvasive' is defined but never used.","'webscrapeONInvasive' is defined but never used.","'webscrapeWikipedia' is defined but never used.","'webscrapeInvasiveSpecies' is defined but never used.","'flagedSpeciesToPlanetAPI' is defined but never used.","'fullIntegrationOfFlaggingSpecies' is defined but never used.","'dataPipelineForDB' is defined but never used.","'setSelectedFile' is assigned a value but never used.","'setIsFileSaved' is assigned a value but never used.","'acceptedImage' is assigned a value but never used.","'LocationFilterComponent' is defined but never used.","'searchResults' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'loadRegionsInBackground'. Either include it or remove the dependency array.",["365"],"React Hook useEffect has a missing dependency: 'handleGetRegions'. Either include it or remove the dependency array.",["366"],["367"],"'useState' is defined but never used.","'useCallback' is defined but never used.","'useRef' is defined but never used.","'getAlternativePlantsForDB' is defined but never used.","'Button' is defined but never used.","Array.prototype.map() expects a return value from arrow function.","'FormControl' is defined but never used.","'InputLabel' is defined but never used.","'Select' is defined but never used.","'MenuItem' is defined but never used.","'selectedCountry' is assigned a value but never used.","'ON_INVASIVE_URL' is assigned a value but never used.","no-useless-escape","Unnecessary escape character: \\'.","Literal","unnecessaryEscape",["368","369"],["370","371"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","no-global-assign","no-unsafe-negation",{"desc":"372","fix":"373"},{"desc":"374","fix":"375"},{"desc":"376","fix":"377"},{"desc":"378","fix":"379"},{"desc":"380","fix":"381"},{"desc":"382","fix":"383"},{"desc":"384","fix":"385"},{"desc":"386","fix":"387"},{"desc":"378","fix":"388"},{"desc":"389","fix":"390"},{"desc":"391","fix":"392"},{"desc":"393","fix":"394"},{"desc":"395","fix":"396"},{"desc":"397","fix":"398"},{"desc":"399","fix":"400"},{"desc":"401","fix":"402"},{"messageId":"403","fix":"404","desc":"405"},{"messageId":"406","fix":"407","desc":"408"},{"messageId":"403","fix":"409","desc":"405"},{"messageId":"406","fix":"410","desc":"408"},"Update the dependencies array to be: [setAuthListener]",{"range":"411","text":"412"},"Update the dependencies array to be: [updateLoginState]",{"range":"413","text":"414"},"Update the dependencies array to be: [fetchAllAlternativeSpecies]",{"range":"415","text":"416"},"Update the dependencies array to be: [API_BASE_URL, currLastSpeciesId, rowsPerPage, shouldSave]",{"range":"417","text":"418"},"Update the dependencies array to be: [handleGetAlternativeSpecies, shouldReset]",{"range":"419","text":"420"},"Update the dependencies array to be: [rowsPerPage, page, displayData, calculateStartAndEnd]",{"range":"421","text":"422"},"Update the dependencies array to be: [handleGetAlternativeSpecies, page]",{"range":"423","text":"424"},"Update the dependencies array to be: [loadSpeciesInBackground]",{"range":"425","text":"426"},{"range":"427","text":"418"},"Update the dependencies array to be: [handleGetInvasiveSpecies, shouldReset]",{"range":"428","text":"429"},"Update the dependencies array to be: [page, rowsPerPage, displayData, calculateStartAndEnd]",{"range":"430","text":"431"},"Update the dependencies array to be: [handleGetInvasiveSpecies, rowsPerPage]",{"range":"432","text":"433"},"Update the dependencies array to be: [handleGetInvasiveSpecies, page]",{"range":"434","text":"435"},"Update the dependencies array to be: [loadRegionsInBackground]",{"range":"436","text":"437"},"Update the dependencies array to be: [handleGetRegions, shouldReset]",{"range":"438","text":"439"},"Update the dependencies array to be: [handleGetRegions, page]",{"range":"440","text":"441"},"removeEscape",{"range":"442","text":"443"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"444","text":"445"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"446","text":"443"},{"range":"447","text":"445"},[687,689],"[setAuthListener]",[5028,5030],"[updateLoginState]",[3877,3879],"[fetchAllAlternativeSpecies]",[10217,10229],"[API_BASE_URL, currLastSpeciesId, rowsPerPage, shouldSave]",[19396,19409],"[handleGetAlternativeSpecies, shouldReset]",[20144,20176],"[rowsPerPage, page, displayData, calculateStartAndEnd]",[21077,21083],"[handleGetAlternativeSpecies, page]",[4172,4174],"[loadSpeciesInBackground]",[10483,10495],[18006,18019],"[handleGetInvasiveSpecies, shouldReset]",[20009,20041],"[page, rowsPerPage, displayData, calculateStartAndEnd]",[20186,20199],"[handleGetInvasiveSpecies, rowsPerPage]",[20993,20999],"[handleGetInvasiveSpecies, page]",[2990,2992],"[loadRegionsInBackground]",[10338,10351],"[handleGetRegions, shouldReset]",[14757,14763],"[handleGetRegions, page]",[3175,3176],"",[3175,3175],"\\",[3182,3183],[3182,3182]]
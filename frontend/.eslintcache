[{"/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/index.js":"1","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/App.js":"2","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/reportWebVitals.js":"3","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/Reducers/index.js":"4","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/themes.js":"5","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/Actions/loginActions.js":"6","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/components/Authentication/Login_material.js":"7","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/Views/PageContainer/PageContainer.js":"8","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/Reducers/appStateReducer.js":"9","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/Reducers/loginReducer.js":"10","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/components/Authentication/TextFieldStartAdornment.js":"11","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/Actions/menuActions.js":"12","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/components/Navbar/Navbar.js":"13","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/Views/Pages/error404.js":"14","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/Views/Pages/RegionsPage.js":"15","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/Views/Pages/InvasiveSpeciesPage.js":"16","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/Views/Pages/AlternativeSpeciesPage.js":"17","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/Views/Pages/pl@ntNet.js":"18","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/Views/Pages/downloadWebscrap.js":"19","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/Views/Pages/Theme.js":"20","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/dialogs/ConfirmDeleteDialog.js":"21","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/dialogs/AddRegionDialog.js":"22","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/dialogs/AddAlternativeSpeciesDialog.js":"23","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/dialogs/EditAlternativeSpeciesDialog.js":"24","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/functions/pipeline.js":"25","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/functions/webscrape.js":"26","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/functions/alternativePlants.js":"27","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/functions/speciesToJSON.js":"28","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/functions/helperFunctions.js":"29","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/functions/webscrapeWiki.js":"30","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/components/SearchComponent.js":"31","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/components/PaginationComponent.js":"32","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/functions/RegionMap.js":"33","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/components/AlertComponent.js":"34","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/components/SnackbarComponent.js":"35","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/components/WarningComponent.js":"36","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/dialogs/EditInvasiveSpeciesDialog.js":"37","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/dialogs/AddInvasiveSpeciesDialog.js":"38","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/components/LocationFilterComponent.js":"39","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/dialogs/EditRegionsDialog.js":"40"},{"size":1431,"mtime":1700778164766,"results":"41","hashOfConfig":"42"},{"size":2481,"mtime":1701979725077,"results":"43","hashOfConfig":"42"},{"size":362,"mtime":1700244664963,"results":"44","hashOfConfig":"42"},{"size":232,"mtime":1700244664930,"results":"45","hashOfConfig":"42"},{"size":457,"mtime":1700244664966,"results":"46","hashOfConfig":"42"},{"size":295,"mtime":1700244664927,"results":"47","hashOfConfig":"42"},{"size":41541,"mtime":1701473893648,"results":"48","hashOfConfig":"42"},{"size":4449,"mtime":1701979725077,"results":"49","hashOfConfig":"42"},{"size":385,"mtime":1700244664929,"results":"50","hashOfConfig":"42"},{"size":385,"mtime":1700244664930,"results":"51","hashOfConfig":"42"},{"size":1498,"mtime":1700244664951,"results":"52","hashOfConfig":"42"},{"size":303,"mtime":1700244664927,"results":"53","hashOfConfig":"42"},{"size":10769,"mtime":1701979725081,"results":"54","hashOfConfig":"42"},{"size":1655,"mtime":1701979725080,"results":"55","hashOfConfig":"42"},{"size":36269,"mtime":1702065115892,"results":"56","hashOfConfig":"42"},{"size":42746,"mtime":1702065110647,"results":"57","hashOfConfig":"42"},{"size":37992,"mtime":1702064815846,"results":"58","hashOfConfig":"42"},{"size":8391,"mtime":1701209831617,"results":"59","hashOfConfig":"42"},{"size":1288,"mtime":1701128260740,"results":"60","hashOfConfig":"42"},{"size":460,"mtime":1701474389550,"results":"61","hashOfConfig":"42"},{"size":1151,"mtime":1701979725085,"results":"62","hashOfConfig":"42"},{"size":6551,"mtime":1701979725085,"results":"63","hashOfConfig":"42"},{"size":7586,"mtime":1701979725084,"results":"64","hashOfConfig":"42"},{"size":12560,"mtime":1701979725087,"results":"65","hashOfConfig":"42"},{"size":8988,"mtime":1700244664961,"results":"66","hashOfConfig":"42"},{"size":12217,"mtime":1700778164765,"results":"67","hashOfConfig":"42"},{"size":9986,"mtime":1701979725089,"results":"68","hashOfConfig":"42"},{"size":1561,"mtime":1701979725090,"results":"69","hashOfConfig":"42"},{"size":1318,"mtime":1701979725089,"results":"70","hashOfConfig":"42"},{"size":4870,"mtime":1701209831630,"results":"71","hashOfConfig":"42"},{"size":1428,"mtime":1701979725082,"results":"72","hashOfConfig":"42"},{"size":1023,"mtime":1701997433765,"results":"73","hashOfConfig":"42"},{"size":921,"mtime":1701997433766,"results":"74","hashOfConfig":"42"},{"size":809,"mtime":1700244664950,"results":"75","hashOfConfig":"42"},{"size":477,"mtime":1701979725083,"results":"76","hashOfConfig":"42"},{"size":1185,"mtime":1701979725083,"results":"77","hashOfConfig":"42"},{"size":8158,"mtime":1701979725087,"results":"78","hashOfConfig":"42"},{"size":9723,"mtime":1701979725085,"results":"79","hashOfConfig":"42"},{"size":1141,"mtime":1701979725081,"results":"80","hashOfConfig":"42"},{"size":5216,"mtime":1701979725088,"results":"81","hashOfConfig":"42"},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"112zn08",{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"96","messages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"98","messages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"104","messages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"108","messages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"110","messages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112"},{"filePath":"113","messages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"115","messages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"117","messages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"119","messages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"121","messages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"123","messages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"125","messages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"127","messages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"129","messages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"131","messages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"133","messages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"135","messages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"137","messages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"139","messages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"141","messages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"143","messages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"145","messages":"146","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"147","messages":"148","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"149","messages":"150","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"151","messages":"152","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"153","messages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"155","messages":"156","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"157","messages":"158","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"159","messages":"160","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"161","messages":"162","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/index.js",[],"/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/App.js",["163"],"/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/reportWebVitals.js",[],"/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/Reducers/index.js",[],"/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/themes.js",["164"],"/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/Actions/loginActions.js",[],"/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/components/Authentication/Login_material.js",["165","166","167","168","169"],"/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/Views/PageContainer/PageContainer.js",["170","171","172"],"/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/Reducers/appStateReducer.js",[],"/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/Reducers/loginReducer.js",[],"/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/components/Authentication/TextFieldStartAdornment.js",["173"],"/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/Actions/menuActions.js",[],"/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/components/Navbar/Navbar.js",["174","175","176","177","178","179"],"/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/Views/Pages/error404.js",[],"/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/Views/Pages/RegionsPage.js",["180","181","182","183","184"],"import React, { useState, useEffect } from \"react\";\nimport {\n    Autocomplete, Box, Tooltip, IconButton, Table, TableBody, TableCell, TableHead, TableRow, Button,\n    TextField, Typography, ThemeProvider\n} from \"@mui/material\";\nimport DeleteDialog from \"../../dialogs/ConfirmDeleteDialog\";\nimport AddRegionDialog from \"../../dialogs/AddRegionDialog\";\nimport Theme from './Theme';\nimport { Auth } from \"aws-amplify\";\n\n// components\nimport EditRegionDialog from \"../../dialogs/EditRegionsDialog\";\nimport PaginationComponent from '../../components/PaginationComponent';\nimport SearchComponent from '../../components/SearchComponent';\n\n// icons\nimport AddCircleOutlineIcon from '@mui/icons-material/AddCircleOutline';\nimport EditIcon from '@mui/icons-material/Edit';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport SearchIcon from '@mui/icons-material/Search';\nimport LocationOnIcon from '@mui/icons-material/LocationOn';\n\nimport {  capitalizeEachWord } from '../../functions/helperFunctions';\nimport axios from \"axios\";\n\n// displays regions\nfunction RegionsPage() {\n    const API_BASE_URL = process.env.REACT_APP_API_BASE_URL;\n\n    const [allRegions, setAllRegions] = useState([]); // array of all regions\n    const [allRegionNames, setAllRegionNames] = useState([]); // array of all region names\n    const [regionCount, setRegionCount] = useState(0); // number of regions\n    const [country, setCountry] = useState(\"\"); // current country\n    const [data, setData] = useState([]); // original data\n    const [displayData, setDisplayData] = useState([]); // data displayed in the table\n    const [editingRegionId, setEditingRegionId] = useState(null);// region_id of the row being edited\n    const [tempData, setTempData] = useState({}); // temp data of the region being edited\n    const [openEditRegionDialog, setOpenEditRegionDialog] = useState(false); // state of the editing an region dialog\n    const [openAddRegionDialog, setOpenAddRegionDialog] = useState(false); // state of the adding a new region dialog\n    const [searchInput, setSearchInput] = useState(\"\"); // input of the region search bar\n    const [deleteId, setDeleteId] = useState(null); // region_id of the row being deleted\n    const [openDeleteConfirmation, setOpenDeleteConfirmation] = useState(false); // state of the delete confirmation dialog\n\n    const [currOffset, setCurrOffset] = useState(0); // current index of the first region on a page\n    const [shouldReset, setShouldReset] = useState(false); // state of should reset \n    const [shouldSave, setShouldSave] = useState(false); // state of should save \n\n    // Pagination states\n    const rowsPerPageOptions = [10, 20, 50]; // user selects number of regions to display\n    const [rowsPerPage, setRowsPerPage] = useState(rowsPerPageOptions[1]); // start with default 20 rows per page\n    const [page, setPage] = useState(0); // Start with page 0\n    const [disableNextButton, setDisableNextButton] = useState(false); // disabled next button or not\n    const [start, setStart] = useState(0); // starting index of regions\n    const [end, setEnd] = useState(0); // end index of regions\n\n    const [user, setUser] = useState(\"\");\n\n    // Retrieves user and regions on load\n    useEffect(() => {\n        retrieveUser()\n        fetchAllRegions();\n    }, [])\n\n\n    // Gets current authorized user\n    const retrieveUser = async () => {\n        try {\n            const returnedUser = await Auth.currentAuthenticatedUser();\n            setUser(returnedUser);\n            console.log(\"current user: \", returnedUser);\n        } catch (e) {\n            console.log(\"error getting user: \", e);\n        }\n    }\n\n    // Fetches all regions (recursively) in the database\n    const fetchAllRegions = async (currOffset = null) => {\n        try {\n            const response = await axios.get(`${API_BASE_URL}region`, {\n                params: {\n                    curr_offset: currOffset,\n                    rows_per_page: rowsPerPage\n                },\n                headers: {\n                    'x-api-key': process.env.REACT_APP_X_API_KEY\n                }\n            });\n\n            setAllRegions(prevRegions => [...prevRegions, ...response.data.regions]);\n            setRegionCount(prevCount => prevCount + response.data.regions.length)\n\n            // Recursively gets regions\n            if (response.data.regions.length === rowsPerPage) {\n                const nextOffset = response.data.nextOffset;\n                await fetchAllRegions(nextOffset);\n            }\n        } catch (error) {\n            console.error(\"Error retrieving regions\", error);\n        }\n    };\n\n    // Updates search bar dropdown when regions are added or deleted\n    useEffect(() => {\n        const updatedRegionFullNames = allRegions.map(region => ({\n            label: region.region_fullname,\n            value: region.region_fullname\n        }));\n\n        setAllRegionNames(updatedRegionFullNames);\n    }, [allRegions]);\n\n\n    // Fetches rowsPerPage number of regions (pagination)\n    const handleGetRegions = () => {\n        axios\n            .get(`${API_BASE_URL}region`, {\n                params: {\n                    curr_offset: shouldReset ? null : currOffset,\n                    rows_per_page: rowsPerPage  // default 20\n                },\n                headers: {\n                    'x-api-key': process.env.REACT_APP_X_API_KEY\n                }\n            })\n            .then((response) => {\n                console.log(\"Regions retrieved successfully\", response.data.regions);\n\n                // Resets pagination details\n                // This will clear the last region id history and display the first page\n                if (shouldReset) {\n                    setCurrOffset(0);\n                    setPage(0);\n                    setStart(0);\n                    setEnd(0);\n                    setShouldReset(false);\n                }\n\n                setDisplayData(response.data.regions);\n                setData(response.data.regions);\n                setCurrOffset(response.data.nextOffset);\n            })\n            .catch((error) => {\n                console.error(\"Error retrieving region\", error);\n            });\n    };\n\n    // Maintains history of last region_id and currLastRegionId so that on GET, \n    // the current page is maintained instead of starting from page 1\n    const handleGetRegionsAfterSave = () => {\n        setCurrOffset(curr => curr - rowsPerPage);\n        setShouldSave(true) // useEffect listens for this state to change and will GET regions when True\n    };\n\n    // Request to GET region (same page) after editing a row to see the updated data when shouldSave state changes\n    useEffect(() => {\n        if (shouldSave) {\n            axios\n                .get(`${API_BASE_URL}region`, {\n                    params: {\n                        curr_offset: currOffset ? currOffset : null, // default first page\n                        rows_per_page: rowsPerPage  // default 20\n                    },\n                    headers: {\n                        'x-api-key': process.env.REACT_APP_X_API_KEY\n                    }\n                })\n                .then((response) => {\n                    const formattedData = response.data.regions.map(item => {\n                        return {\n                            ...item,\n                            region_fullname: capitalizeEachWord(item.region_fullname),\n                            region_code_name: item.region_code_name.toUpperCase(),\n                            country_fullname: capitalizeEachWord(item.country_fullname)\n                        };\n                    });\n\n                    console.log(\"retrieved region data:\", formattedData);\n                    setDisplayData(formattedData);\n                    setCurrOffset(response.data.nextOffset);\n                })\n                .catch((error) => {\n                    console.error(\"Error getting regions\", error);\n                })\n                .finally(() => {\n                    setShouldSave(false);\n                });\n        }\n    }, [shouldSave]);\n\n    // Fetches the regions that matches user search\n    const handleGetRegionsAfterSearch = () => {\n        const formattedSearchInput = capitalizeEachWord(searchInput);\n        console.log(\"formatted search input: \", formattedSearchInput);\n\n        axios\n            .get(`${API_BASE_URL}region`, {\n                params: {\n                    region_fullname: formattedSearchInput,\n                },\n                headers: {\n                    'x-api-key': process.env.REACT_APP_X_API_KEY\n                }\n            })\n            .then((response) => {\n                console.log(\"Regions retrieved successfully\", response.data.regions);\n                setDisplayData(response.data.regions);\n            })\n            .catch((error) => {\n                console.error(\"Error searching up region\", error);\n            });\n    };\n\n    // Updates editing states when editing a region\n    const startEdit = (region_id, rowData) => {\n        setEditingRegionId(region_id);\n        setTempData(rowData);\n        setOpenEditRegionDialog(true);\n    };\n\n    // Updates states after editing a region and saving \n    const handleFinishEditingRow = () => {\n        setOpenEditRegionDialog(false);\n        setEditingRegionId(null);\n    };\n\n    // Updates changes to the database on save\n    const handleSave = (confirmed) => {\n        retrieveUser();\n        const jwtToken = user.signInUserSession.accessToken.jwtToken\n\n        const formattedData = {\n            ...tempData,\n            region_fullname: capitalizeEachWord(tempData.region_fullname),\n            region_code_name: tempData.region_code_name.toUpperCase(),\n            country_fullname: capitalizeEachWord(tempData.country_fullname)\n        }\n\n        if (confirmed) {\n            axios\n                .put(`${API_BASE_URL}region/${formattedData.region_id}`,\n                    formattedData,\n                    {\n                        headers: {\n                            'Authorization': `${jwtToken}`\n                        }\n                    })\n                .then((response) => {\n                    console.log(\"Region updated successfully\", response.data.regions);\n                    if (start > rowsPerPage) {\n                        handleGetRegionsAfterSave();\n                    } else {\n                        setShouldReset(true);\n                    }\n                    handleFinishEditingRow();\n                })\n                .catch((error) => {\n                    console.error(\"Error updating region\", error);\n                });\n        };\n    };\n\n    // Opens confirmation dialog before deletion\n    const handleDeleteRow = (region_id) => {\n        setDeleteId(region_id);\n        setOpenDeleteConfirmation(true);\n    };\n\n    // Deletes region from the table\n    const handleConfirmDelete = () => {\n        retrieveUser();\n        const jwtToken = user.signInUserSession.accessToken.jwtToken\n\n        console.log(\"region id to delete: \", deleteId);\n        if (deleteId) {\n            axios\n                .delete(`${API_BASE_URL}region/${deleteId}`, {\n                    headers: {\n                        'Authorization': `${jwtToken}`\n                    }\n                })\n                .then((response) => {\n                    setRegionCount(prevCount => prevCount - 1)\n                    setAllRegions(prevRegions => prevRegions.filter(region => region.region_id !== deleteId));\n                    setShouldReset(true);\n                    setOpenDeleteConfirmation(false);\n                    console.log(\"region deleted successfully\", response.data);\n                })\n                .catch((error) => {\n                    console.error(\"Error deleting region\", error);\n                })\n        } else {\n            setOpenDeleteConfirmation(false);\n        }\n    };\n\n    // Adds a new region\n    const handleAddRegion = (newRegionData) => {\n        retrieveUser();\n        const jwtToken = user.signInUserSession.accessToken.jwtToken\n\n        const formattedData = {\n            ...newRegionData,\n            region_fullname: capitalizeEachWord(newRegionData.region_fullname),\n            region_code_name: newRegionData.region_code_name.toUpperCase(),\n            country_fullname: capitalizeEachWord(newRegionData.country_fullname)\n        }\n\n        console.log(\"new region: \", formattedData)\n\n        // Request to POST new regions to the database\n        axios\n            .post(API_BASE_URL + \"region\",\n                formattedData,\n                {\n                    headers: {\n                        'Authorization': `${jwtToken}`\n                    }\n                })\n            .then((response) => {\n                console.log(\"region added successfully\", response.data);\n                const updatedData = response.data.map(item => {\n                    return {\n                        ...item,\n                        scientific_name: item.scientific_name\n                    };\n                });\n                console.log(\"updated data\", updatedData);\n\n                setAllRegions(prevRegions => [...prevRegions, ...updatedData]);\n                setRegionCount(prevCount => prevCount + 1);\n                setShouldReset(true);\n                setOpenAddRegionDialog(false);\n            })\n            .catch((error) => {\n                console.error(\"error adding region\", error);\n            })\n    };\n\n    // Call to handleGetRegions if shouldReset state is True\n    useEffect(() => {\n        if (shouldReset) {\n            handleGetRegions();\n        }\n    }, [shouldReset]);\n\n    // Updates temporary row data when field inputs change\n    const handleInputChange = (field, value) => {\n\n        // Regex for checking if input is a number, number with decimals, or empty \n        const isValidInput = /^[+-]?\\d*(\\.\\d*)?$/.test(value);\n\n        if ((field === 'geographic_latitude' && !isValidInput) || (field === 'geographic_longitude' && !isValidInput)) {\n            alert('Invalid input. Please enter a numerical value.');\n        } else if (field === 'geographic_latitude') {\n                setTempData((prev) => ({ ...prev, geographic_coordinate: `${value},${prev.geographic_coordinate.split(',')[1]}` }));\n            } else if (field === 'geographic_longitude') {\n            setTempData((prev) => ({ ...prev, geographic_coordinate: `${prev.geographic_coordinate.split(',')[0]},${value}` }));\n        } else {\n            setTempData((prev) => ({ ...prev, [field]: value }));\n        }\n\n    };\n\n    // Displays original data when search input is empty\n    const handleSearch = (searchInput) => {\n        if (searchInput === \"\") {\n            setDisplayData(data);\n        }\n    };\n\n    // Filters display data based on country\n    const handleCountrySearch = (countryInput) => {\n        if (countryInput === \"\") {\n            setDisplayData(data);\n        } else {\n            const results = data.filter(\n                (item) => item.country_fullname.toLowerCase() === countryInput\n            );\n            setDisplayData(results);\n        }\n    };\n\n    // Calculates start and end regions indices of the current page of displayed data\n    const calculateStartAndEnd = () => {\n        const newStart = page * rowsPerPage + 1;\n        const newEnd = Math.min((page + 1) * rowsPerPage, (page * rowsPerPage) + displayData.length);\n        setStart(newStart);\n        setEnd(newEnd);\n    };\n\n    // Call to calculate indices\n    useEffect(() => {\n        calculateStartAndEnd();\n    }, [rowsPerPage, page, displayData]);\n\n\n    // Resets if rowsPerPage changes \n    useEffect(() => {\n        setShouldReset(true);\n    }, [rowsPerPage]);\n\n    // Call to get next/previous rowsPerPage number of regions on page change\n    useEffect(() => {\n        handleGetRegions();\n    }, [page]);\n\n    // Increments the page count by 1 \n    const handleNextPage = () => {\n        setPage(page + 1); \n    };\n\n    // Decrements page count by 1 and removes last id in seen regions history \n    const handlePreviousPage = () => {\n        setCurrOffset(curr => curr - rowsPerPage * 2);\n        setPage(page - 1);\n    };\n\n    // Disables the next button if there are no regions left to query\n    useEffect(() => {\n        if (displayData.length === 0 || displayData.length < rowsPerPage) {\n            setDisableNextButton(true);\n        } else {\n            setDisableNextButton(false);\n        }\n    }, [displayData, rowsPerPage]);\n\n    return (\n        <div style={{ width: \"100%\", display: \"flex\", flexDirection: \"column\", alignItems: \"center\" }}>\n\n            {/* location and search bars*/}\n            <div style={{ display: \"flex\", justifyContent: \"center\", width: \"90%\" }}>\n                <Box style={{ flex: 1, marginRight: \"10px\" }}>\n                    <Autocomplete\n                        options={Array.from(new Set(displayData.map((region) => region.country_fullname)))}\n                        getOptionLabel={(option) => option}\n                        onInputChange={(e, newInputValue) => handleCountrySearch(newInputValue.toLowerCase())}\n                        renderInput={(params) => (\n                            <TextField\n                                {...params}\n                                label={\n                                    <div style={{ display: 'flex', alignItems: 'center' }}>\n                                        <LocationOnIcon sx={{ marginRight: '0.5rem' }} />\n                                        {\"Search by country\"}\n                                    </div>\n                                }\n                                value={country}\n                                onChange={(e) => {\n                                    setCountry(e.target.value.toLowerCase());\n                                }}\n                                style={{ marginTop: \"2rem\", marginBottom: \"1rem\" }}\n                            />\n                        )}\n                    />\n                </Box>\n                <SearchComponent\n                    text={\"Search regions\"}\n                    handleSearch={handleSearch}\n                    searchResults={allRegionNames}\n                    searchTerm={searchInput}\n                    setSearchTerm={setSearchInput}\n                />\n\n                <ThemeProvider theme={Theme}>\n                    <Button variant=\"contained\" onClick={() => handleGetRegionsAfterSearch()} style={{ marginLeft: \"20px\", marginTop: \"27px\", width: \"10%\", height: \"53px\", alignItems: \"center\" }}>\n                        <SearchIcon sx={{ marginRight: '0.8rem' }} />Search\n                    </Button>\n                </ThemeProvider>\n            </div>\n\n            <div style={{ display: 'flex', justifyContent: 'center', marginTop: '20px' }}>\n                <ThemeProvider theme={Theme}>\n                    <Button variant=\"contained\" onClick={() => setOpenAddRegionDialog(true)} startIcon={<AddCircleOutlineIcon />}>\n                        Add Region\n                    </Button>\n                </ThemeProvider>\n            </div >\n\n            <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'flex-end', marginTop: '10px', marginLeft: \"70%\" }}>\n                {/* dropdown for selecting rows per page */}\n                <span style={{ marginRight: '10px' }}>Rows per page:</span>\n                <select value={rowsPerPage} onChange={(e) => setRowsPerPage(Number(e.target.value))}>\n                    {rowsPerPageOptions.map((option) => (\n                        <option key={option} value={option}>\n                            {option}\n                        </option>\n                    ))}\n                </select>\n\n                <PaginationComponent\n                    start={start}\n                    end={end}\n                    count={regionCount}\n                    page={page}\n                    handlePreviousPage={handlePreviousPage}\n                    handleNextPage={handleNextPage}\n                    disabled={disableNextButton}\n                />\n            </div>\n\n\n            <div style={{ width: \"90%\", display: \"flex\", justifyContent: \"center\" }}>\n                <Table style={{ width: \"100%\", tableLayout: \"fixed\" }}>\n                    <TableHead>\n                        <TableRow>\n                            <TableCell style={{ width: \"10%\" }}>\n                                <Typography variant=\"subtitle1\" fontWeight=\"bold\">\n                                    Region\n                                </Typography>\n                            </TableCell>\n                            <TableCell style={{ width: \"10%\" }}>\n                                <Typography variant=\"subtitle1\" fontWeight=\"bold\">\n                                    Region Code\n                                </Typography>\n                            </TableCell>\n                            <TableCell style={{ width: \"10%\" }}>\n                                <Typography variant=\"subtitle1\" fontWeight=\"bold\">\n                                    Country\n                                </Typography>\n                            </TableCell>\n                            <TableCell style={{ width: \"15%\" }}>\n                                <Typography variant=\"subtitle1\" fontWeight=\"bold\">\n                                    Geographic Coordinates (latitude, longitude)\n                                </Typography>\n                            </TableCell>\n                            <TableCell style={{ width: \"5%\" }}>\n                                <Typography variant=\"subtitle1\" fontWeight=\"bold\">\n                                    Actions\n                                </Typography>\n                            </TableCell>\n                        </TableRow>\n                    </TableHead>\n\n                    <TableBody>\n                        {displayData &&\n                            (country !== \"\"\n                                ? displayData\n                                .filter((item) => item.country_fullname.toLowerCase() === country.toLowerCase())\n                                // .sort((a, b) => a.region_fullname.localeCompare(b.region_fullname))\n                                    .map((row) => (\n                                        <TableRow key={row.region_code_name}>\n                                            {/* editing the row and no country search*/}\n                                            {editingRegionId === row.region_id ? (\n                                                <>\n                                                    {/* region full name */}\n                                                    <TableCell>\n                                                        <TextField\n                                                            value={tempData.region_fullname}\n                                                            onChange={(e) =>\n                                                                handleInputChange(\"region_fullname\", e.target.value)\n                                                            }\n                                                        />\n                                                    </TableCell>\n\n                                                    {/* region code */}\n                                                    <TableCell>\n                                                        <TextField\n                                                            value={tempData.region_code_name}\n                                                            onChange={(e) =>\n                                                                handleInputChange(\"region_code_name\", e.target.value)\n                                                            }\n                                                        />\n                                                    </TableCell>\n\n                                                    {/* country */}\n                                                    <TableCell>\n                                                        <TextField\n                                                            value={tempData.country_fullname}\n                                                            onChange={(e) =>\n                                                                handleInputChange(\"country_fullname\", e.target.value)\n                                                            }\n                                                        />\n                                                    </TableCell>\n\n                                                    {/* coordinates */}\n                                                    <TableCell>\n                                                        <TextField\n                                                            value={tempData.geographic_coordinate}\n                                                            onChange={(e) =>\n                                                                handleInputChange(\"geographic_coordinate\", e.target.value)\n                                                            }\n                                                        />\n                                                    </TableCell>\n\n                                                    {/* edit/delete */}\n                                                    <TableCell>\n                                                        <Tooltip title=\"Edit\"\n                                                            onClick={() => startEdit(row.region_id, row)}>\n                                                            <IconButton>\n                                                                <EditIcon />\n                                                            </IconButton>\n                                                        </Tooltip>\n                                                        <Tooltip\n                                                            title=\"Delete\"\n                                                            onClick={() => handleDeleteRow(row.region_id, row)}>\n                                                            <IconButton>\n                                                                <DeleteIcon />\n                                                            </IconButton>\n                                                        </Tooltip>\n                                                    </TableCell>\n                                                </>\n                                            ) : (\n                                                    // not editing row and no country search\n                                                <>\n                                                        <TableCell>{row.region_fullname}</TableCell>\n                                                        <TableCell> {row.region_code_name} </TableCell>\n                                                        <TableCell>{row.country_fullname}</TableCell>\n                                                        <TableCell>{row.geographic_coordinate}</TableCell>\n                                                    <TableCell>\n                                                        <Tooltip title=\"Edit\"\n                                                                onClick={() => startEdit(row.region_id, row)}>\n                                                            <IconButton>\n                                                                <EditIcon />\n                                                            </IconButton>\n                                                        </Tooltip>\n                                                        <Tooltip\n                                                            title=\"Delete\"\n                                                                onClick={() => handleDeleteRow(row.region_id, row)}>\n                                                            <IconButton>\n                                                                <DeleteIcon />\n                                                            </IconButton>\n                                                        </Tooltip>\n                                                    </TableCell>\n                                                </>\n                                            )}\n                                        </TableRow>\n                                    ))\n                                : displayData\n                                // .sort((a, b) => a.region_fullname.localeCompare(b.region_fullname))\n                                    .map((row) => (\n                                        <TableRow key={row.region_id}>\n                                            {/* editing the row and country */}\n                                            {editingRegionId === row.region_id ? (\n                                                <>\n                                                    {/* region full name */}\n                                                    <TableCell>\n                                                        <TextField\n                                                            value={tempData.region_fullname}\n                                                            onChange={(e) =>\n                                                                handleInputChange(\"region_fullname\", e.target.value)\n                                                            }\n                                                        />\n                                                    </TableCell>\n\n                                                    {/* region code */}\n                                                    <TableCell>\n                                                        <TextField\n                                                            value={tempData.region_code_name}\n                                                            onChange={(e) =>\n                                                                handleInputChange(\"region_code_name\", e.target.value)\n                                                            }\n                                                        />\n                                                    </TableCell>\n\n                                                    {/* country */}\n                                                    <TableCell>\n                                                        <TextField\n                                                            value={tempData.country_fullname}\n                                                            onChange={(e) =>\n                                                                handleInputChange(\"country_fullname\", e.target.value)\n                                                            }\n                                                        />\n                                                    </TableCell>\n\n                                                    {/* coordinates */}\n                                                    <TableCell>\n                                                        <TextField\n                                                            value={tempData.geographic_coordinate}\n                                                            onChange={(e) =>\n                                                                handleInputChange(\"geographic_coordinate\", e.target.value)\n                                                            }\n                                                        />\n                                                    </TableCell>\n\n                                                    {/* edit/delete */}\n                                                    <TableCell>\n                                                        <Tooltip title=\"Edit\"\n                                                            onClick={() => startEdit(row.region_id, row)}>\n                                                            <IconButton>\n                                                                <EditIcon />\n                                                            </IconButton>\n                                                        </Tooltip>\n                                                        <Tooltip\n                                                            title=\"Delete\"\n                                                            onClick={() => handleDeleteRow(row.region_id, row)}>\n                                                            <IconButton>\n                                                                <DeleteIcon />\n                                                            </IconButton>\n                                                        </Tooltip>\n                                                    </TableCell>\n                                                </>\n                                            ) : (\n                                                    //  not editing the row and no country\n                                                <>\n\n                                                        <TableCell>{row.region_fullname}</TableCell>\n                                                        <TableCell> {row.region_code_name} </TableCell>\n                                                        <TableCell>{row.country_fullname}</TableCell>\n                                                        <TableCell>{row.geographic_coordinate}</TableCell>\n                                                    <TableCell>\n                                                        <Tooltip title=\"Edit\"\n                                                                onClick={() => startEdit(row.region_id, row)}>\n                                                            <IconButton>\n                                                                <EditIcon />\n                                                            </IconButton>\n                                                        </Tooltip>\n                                                        <Tooltip\n                                                            title=\"Delete\"\n                                                                onClick={() => handleDeleteRow(row.region_id, row)}>\n                                                            <IconButton>\n                                                                <DeleteIcon />\n                                                            </IconButton>\n                                                        </Tooltip>\n                                                    </TableCell>\n                                                </>\n                                            )}\n                                        </TableRow>\n                                    )))}\n                    </TableBody>\n                </Table>\n            </div>\n\n            <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'flex-end', marginTop: '10px', marginLeft: \"79%\" }}>\n                <PaginationComponent\n                    start={start}\n                    end={end}\n                    count={regionCount}\n                    page={page}\n                    handlePreviousPage={handlePreviousPage}\n                    handleNextPage={handleNextPage}\n                    disabled={disableNextButton}\n                />\n            </div>\n\n            <AddRegionDialog\n                open={openAddRegionDialog}\n                handleClose={() => setOpenAddRegionDialog(false)}\n                handleAdd={handleAddRegion}\n                data={displayData}\n            />\n\n            <EditRegionDialog\n                open={openEditRegionDialog}\n                tempData={tempData}\n                handleInputChange={handleInputChange}\n                handleFinishEditingRow={handleFinishEditingRow}\n                handleSave={handleSave}\n            />\n\n            <DeleteDialog\n                open={openDeleteConfirmation}\n                handleClose={() => setOpenDeleteConfirmation(false)}\n                handleDelete={handleConfirmDelete}\n            />\n\n        </div >\n    );\n}\n\nexport default RegionsPage;","/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/Views/Pages/InvasiveSpeciesPage.js",["185","186","187","188","189","190","191"],"/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/Views/Pages/AlternativeSpeciesPage.js",["192","193","194","195","196","197"],"/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/Views/Pages/pl@ntNet.js",["198","199","200","201","202","203","204","205","206","207","208"],"/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/Views/Pages/downloadWebscrap.js",["209","210","211","212","213"],"/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/Views/Pages/Theme.js",[],"/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/dialogs/ConfirmDeleteDialog.js",[],"/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/dialogs/AddRegionDialog.js",["214","215","216","217","218"],"/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/dialogs/AddAlternativeSpeciesDialog.js",[],"/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/dialogs/EditAlternativeSpeciesDialog.js",[],"/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/functions/pipeline.js",["219"],"/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/functions/webscrape.js",["220","221","222"],"/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/functions/alternativePlants.js",[],"/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/functions/speciesToJSON.js",[],"/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/functions/helperFunctions.js",[],"/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/functions/webscrapeWiki.js",[],"/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/components/SearchComponent.js",["223"],"/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/components/PaginationComponent.js",[],"/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/functions/RegionMap.js",[],"/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/components/AlertComponent.js",[],"/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/components/SnackbarComponent.js",[],"/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/components/WarningComponent.js",[],"/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/dialogs/EditInvasiveSpeciesDialog.js",[],"/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/dialogs/AddInvasiveSpeciesDialog.js",[],"/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/components/LocationFilterComponent.js",[],"/Users/juliayou/Desktop/UBC CIC/InvasivePlants/frontend/src/dialogs/EditRegionsDialog.js",[],{"ruleId":"224","severity":1,"message":"225","line":18,"column":6,"nodeType":"226","endLine":18,"endColumn":8,"suggestions":"227"},{"ruleId":"228","severity":1,"message":"229","line":1,"column":10,"nodeType":"230","messageId":"231","endLine":1,"endColumn":24},{"ruleId":"228","severity":1,"message":"232","line":16,"column":9,"nodeType":"230","messageId":"231","endLine":16,"endColumn":16},{"ruleId":"224","severity":1,"message":"233","line":142,"column":8,"nodeType":"226","endLine":142,"endColumn":10,"suggestions":"234"},{"ruleId":"235","severity":1,"message":"236","line":274,"column":77,"nodeType":"237","messageId":"238","endLine":274,"endColumn":79},{"ruleId":"239","severity":1,"message":"240","line":282,"column":21,"nodeType":"241","messageId":"242","endLine":282,"endColumn":87},{"ruleId":"243","severity":1,"message":"244","line":454,"column":54,"nodeType":"245","endLine":454,"endColumn":143},{"ruleId":"228","severity":1,"message":"246","line":56,"column":13,"nodeType":"230","messageId":"231","endLine":56,"endColumn":24},{"ruleId":"247","severity":1,"message":"248","line":70,"column":5,"nodeType":"249","messageId":"250","endLine":70,"endColumn":49},{"ruleId":"228","severity":1,"message":"251","line":71,"column":11,"nodeType":"230","messageId":"231","endLine":71,"endColumn":15},{"ruleId":"228","severity":1,"message":"252","line":4,"column":22,"nodeType":"230","messageId":"231","endLine":4,"endColumn":32},{"ruleId":"228","severity":1,"message":"253","line":91,"column":73,"nodeType":"230","messageId":"231","endLine":91,"endColumn":91},{"ruleId":"228","severity":1,"message":"254","line":105,"column":11,"nodeType":"230","messageId":"231","endLine":105,"endColumn":32},{"ruleId":"228","severity":1,"message":"255","line":131,"column":11,"nodeType":"230","messageId":"231","endLine":131,"endColumn":21},{"ruleId":"228","severity":1,"message":"256","line":156,"column":12,"nodeType":"230","messageId":"231","endLine":156,"endColumn":22},{"ruleId":"228","severity":1,"message":"257","line":156,"column":24,"nodeType":"230","messageId":"231","endLine":156,"endColumn":37},{"ruleId":"228","severity":1,"message":"258","line":204,"column":11,"nodeType":"230","messageId":"231","endLine":204,"endColumn":25},{"ruleId":"224","severity":1,"message":"259","line":62,"column":8,"nodeType":"226","endLine":62,"endColumn":10,"suggestions":"260"},{"ruleId":"224","severity":1,"message":"261","line":188,"column":8,"nodeType":"226","endLine":188,"endColumn":20,"suggestions":"262"},{"ruleId":"224","severity":1,"message":"263","line":344,"column":8,"nodeType":"226","endLine":344,"endColumn":21,"suggestions":"264"},{"ruleId":"224","severity":1,"message":"265","line":394,"column":8,"nodeType":"226","endLine":394,"endColumn":40,"suggestions":"266"},{"ruleId":"224","severity":1,"message":"263","line":405,"column":8,"nodeType":"226","endLine":405,"endColumn":14,"suggestions":"267"},{"ruleId":"228","severity":1,"message":"268","line":45,"column":20,"nodeType":"230","messageId":"231","endLine":45,"endColumn":31},{"ruleId":"224","severity":1,"message":"269","line":67,"column":6,"nodeType":"226","endLine":67,"endColumn":8,"suggestions":"270"},{"ruleId":"224","severity":1,"message":"261","line":266,"column":6,"nodeType":"226","endLine":266,"endColumn":18,"suggestions":"271"},{"ruleId":"224","severity":1,"message":"272","line":471,"column":6,"nodeType":"226","endLine":471,"endColumn":19,"suggestions":"273"},{"ruleId":"224","severity":1,"message":"265","line":518,"column":6,"nodeType":"226","endLine":518,"endColumn":38,"suggestions":"274"},{"ruleId":"224","severity":1,"message":"272","line":528,"column":6,"nodeType":"226","endLine":528,"endColumn":12,"suggestions":"275"},{"ruleId":"276","severity":1,"message":"277","line":654,"column":32,"nodeType":"278","messageId":"279","endLine":654,"endColumn":34},{"ruleId":"224","severity":1,"message":"280","line":61,"column":6,"nodeType":"226","endLine":61,"endColumn":8,"suggestions":"281"},{"ruleId":"224","severity":1,"message":"261","line":218,"column":6,"nodeType":"226","endLine":218,"endColumn":18,"suggestions":"282"},{"ruleId":"224","severity":1,"message":"283","line":492,"column":6,"nodeType":"226","endLine":492,"endColumn":19,"suggestions":"284"},{"ruleId":"224","severity":1,"message":"265","line":517,"column":6,"nodeType":"226","endLine":517,"endColumn":38,"suggestions":"285"},{"ruleId":"224","severity":1,"message":"283","line":528,"column":6,"nodeType":"226","endLine":528,"endColumn":12,"suggestions":"286"},{"ruleId":"243","severity":1,"message":"244","line":776,"column":39,"nodeType":"245","endLine":779,"endColumn":41},{"ruleId":"228","severity":1,"message":"287","line":3,"column":10,"nodeType":"230","messageId":"231","endLine":3,"endColumn":16},{"ruleId":"228","severity":1,"message":"288","line":4,"column":10,"nodeType":"230","messageId":"231","endLine":4,"endColumn":29},{"ruleId":"228","severity":1,"message":"289","line":4,"column":31,"nodeType":"230","messageId":"231","endLine":4,"endColumn":50},{"ruleId":"228","severity":1,"message":"290","line":5,"column":10,"nodeType":"230","messageId":"231","endLine":5,"endColumn":28},{"ruleId":"228","severity":1,"message":"291","line":6,"column":10,"nodeType":"230","messageId":"231","endLine":6,"endColumn":34},{"ruleId":"228","severity":1,"message":"292","line":6,"column":36,"nodeType":"230","messageId":"231","endLine":6,"endColumn":60},{"ruleId":"228","severity":1,"message":"293","line":6,"column":62,"nodeType":"230","messageId":"231","endLine":6,"endColumn":94},{"ruleId":"228","severity":1,"message":"294","line":6,"column":96,"nodeType":"230","messageId":"231","endLine":6,"endColumn":113},{"ruleId":"228","severity":1,"message":"295","line":14,"column":26,"nodeType":"230","messageId":"231","endLine":14,"endColumn":41},{"ruleId":"228","severity":1,"message":"296","line":18,"column":25,"nodeType":"230","messageId":"231","endLine":18,"endColumn":39},{"ruleId":"228","severity":1,"message":"297","line":39,"column":17,"nodeType":"230","messageId":"231","endLine":39,"endColumn":30},{"ruleId":"228","severity":1,"message":"298","line":1,"column":17,"nodeType":"230","messageId":"231","endLine":1,"endColumn":25},{"ruleId":"228","severity":1,"message":"299","line":1,"column":27,"nodeType":"230","messageId":"231","endLine":1,"endColumn":38},{"ruleId":"228","severity":1,"message":"300","line":1,"column":51,"nodeType":"230","messageId":"231","endLine":1,"endColumn":57},{"ruleId":"228","severity":1,"message":"291","line":4,"column":10,"nodeType":"230","messageId":"231","endLine":4,"endColumn":34},{"ruleId":"228","severity":1,"message":"301","line":6,"column":10,"nodeType":"230","messageId":"231","endLine":6,"endColumn":35},{"ruleId":"228","severity":1,"message":"302","line":2,"column":85,"nodeType":"230","messageId":"231","endLine":2,"endColumn":96},{"ruleId":"228","severity":1,"message":"303","line":2,"column":98,"nodeType":"230","messageId":"231","endLine":2,"endColumn":108},{"ruleId":"228","severity":1,"message":"304","line":2,"column":110,"nodeType":"230","messageId":"231","endLine":2,"endColumn":116},{"ruleId":"228","severity":1,"message":"305","line":2,"column":118,"nodeType":"230","messageId":"231","endLine":2,"endColumn":126},{"ruleId":"228","severity":1,"message":"306","line":20,"column":12,"nodeType":"230","messageId":"231","endLine":20,"endColumn":27},{"ruleId":"276","severity":1,"message":"307","line":116,"column":39,"nodeType":"278","messageId":"279","endLine":116,"endColumn":41},{"ruleId":"228","severity":1,"message":"308","line":9,"column":7,"nodeType":"230","messageId":"231","endLine":9,"endColumn":22},{"ruleId":"309","severity":1,"message":"310","line":92,"column":50,"nodeType":"311","messageId":"312","endLine":92,"endColumn":51,"suggestions":"313"},{"ruleId":"309","severity":1,"message":"310","line":92,"column":57,"nodeType":"311","messageId":"312","endLine":92,"endColumn":58,"suggestions":"314"},{"ruleId":"228","severity":1,"message":"315","line":1,"column":29,"nodeType":"230","messageId":"231","endLine":1,"endColumn":35},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setAuthListener'. Either include it or remove the dependency array.","ArrayExpression",["316"],"no-unused-vars","'createMuiTheme' is defined but never used.","Identifier","unusedVar","'Amplify' is defined but never used.","React Hook useEffect has a missing dependency: 'updateLoginState'. Either include it or remove the dependency array.",["317"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-throw-literal","Expected an error object to be thrown.","ThrowStatement","object","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'menuEnabled' is assigned a value but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","'list' is assigned a value but never used.","'withStyles' is defined but never used.","'showSideMenuButton' is assigned a value but never used.","'handleProfileMenuOpen' is assigned a value but never used.","'renderMenu' is assigned a value but never used.","'activeMenu' is assigned a value but never used.","'setActiveMenu' is assigned a value but never used.","'handleSideMenu' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetchAllRegions'. Either include it or remove the dependency array.",["318"],"React Hook useEffect has missing dependencies: 'API_BASE_URL', 'currOffset', and 'rowsPerPage'. Either include them or remove the dependency array.",["319"],"React Hook useEffect has a missing dependency: 'handleGetRegions'. Either include it or remove the dependency array.",["320"],"React Hook useEffect has a missing dependency: 'calculateStartAndEnd'. Either include it or remove the dependency array.",["321"],["322"],"'setRegionId' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'fetchAllAlternativeSpecies' and 'fetchAllInvasiveSpecies'. Either include them or remove the dependency array.",["323"],["324"],"React Hook useEffect has a missing dependency: 'handleGetInvasiveSpecies'. Either include it or remove the dependency array.",["325"],["326"],["327"],"array-callback-return","Array.prototype.filter() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has a missing dependency: 'fetchAllAlternativeSpecies'. Either include it or remove the dependency array.",["328"],["329"],"React Hook useEffect has a missing dependency: 'handleGetAlternativeSpecies'. Either include it or remove the dependency array.",["330"],["331"],["332"],"'saveAs' is defined but never used.","'webscrapeBCInvasive' is defined but never used.","'webscrapeONInvasive' is defined but never used.","'webscrapeWikipedia' is defined but never used.","'webscrapeInvasiveSpecies' is defined but never used.","'flagedSpeciesToPlanetAPI' is defined but never used.","'fullIntegrationOfFlaggingSpecies' is defined but never used.","'dataPipelineForDB' is defined but never used.","'setSelectedFile' is assigned a value but never used.","'setIsFileSaved' is assigned a value but never used.","'acceptedImage' is assigned a value but never used.","'useState' is defined but never used.","'useCallback' is defined but never used.","'useRef' is defined but never used.","'getAlternativePlantsForDB' is defined but never used.","'FormControl' is defined but never used.","'InputLabel' is defined but never used.","'Select' is defined but never used.","'MenuItem' is defined but never used.","'selectedCountry' is assigned a value but never used.","Array.prototype.map() expects a return value from arrow function.","'ON_INVASIVE_URL' is assigned a value but never used.","no-useless-escape","Unnecessary escape character: \\'.","Literal","unnecessaryEscape",["333","334"],["335","336"],"'Button' is defined but never used.",{"desc":"337","fix":"338"},{"desc":"339","fix":"340"},{"desc":"341","fix":"342"},{"desc":"343","fix":"344"},{"desc":"345","fix":"346"},{"desc":"347","fix":"348"},{"desc":"349","fix":"350"},{"desc":"351","fix":"352"},{"desc":"343","fix":"353"},{"desc":"354","fix":"355"},{"desc":"356","fix":"357"},{"desc":"358","fix":"359"},{"desc":"360","fix":"361"},{"desc":"343","fix":"362"},{"desc":"363","fix":"364"},{"desc":"347","fix":"365"},{"desc":"366","fix":"367"},{"messageId":"368","fix":"369","desc":"370"},{"messageId":"371","fix":"372","desc":"373"},{"messageId":"368","fix":"374","desc":"370"},{"messageId":"371","fix":"375","desc":"373"},"Update the dependencies array to be: [setAuthListener]",{"range":"376","text":"377"},"Update the dependencies array to be: [updateLoginState]",{"range":"378","text":"379"},"Update the dependencies array to be: [fetchAllRegions]",{"range":"380","text":"381"},"Update the dependencies array to be: [API_BASE_URL, currOffset, rowsPerPage, shouldSave]",{"range":"382","text":"383"},"Update the dependencies array to be: [handleGetRegions, shouldReset]",{"range":"384","text":"385"},"Update the dependencies array to be: [rowsPerPage, page, displayData, calculateStartAndEnd]",{"range":"386","text":"387"},"Update the dependencies array to be: [handleGetRegions, page]",{"range":"388","text":"389"},"Update the dependencies array to be: [fetchAllAlternativeSpecies, fetchAllInvasiveSpecies]",{"range":"390","text":"391"},{"range":"392","text":"383"},"Update the dependencies array to be: [handleGetInvasiveSpecies, shouldReset]",{"range":"393","text":"394"},"Update the dependencies array to be: [page, rowsPerPage, displayData, calculateStartAndEnd]",{"range":"395","text":"396"},"Update the dependencies array to be: [handleGetInvasiveSpecies, page]",{"range":"397","text":"398"},"Update the dependencies array to be: [fetchAllAlternativeSpecies]",{"range":"399","text":"400"},{"range":"401","text":"383"},"Update the dependencies array to be: [handleGetAlternativeSpecies, shouldReset]",{"range":"402","text":"403"},{"range":"404","text":"387"},"Update the dependencies array to be: [handleGetAlternativeSpecies, page]",{"range":"405","text":"406"},"removeEscape",{"range":"407","text":"408"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"409","text":"410"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"411","text":"408"},{"range":"412","text":"410"},[687,689],"[setAuthListener]",[5028,5030],"[updateLoginState]",[3289,3291],"[fetchAllRegions]",[8051,8063],"[API_BASE_URL, currOffset, rowsPerPage, shouldSave]",[13596,13609],"[handleGetRegions, shouldReset]",[15530,15562],"[rowsPerPage, page, displayData, calculateStartAndEnd]",[15816,15822],"[handleGetRegions, page]",[3870,3872],"[fetchAllAlternativeSpecies, fetchAllInvasiveSpecies]",[10286,10298],[16945,16958],"[handleGetInvasiveSpecies, shouldReset]",[18414,18446],"[page, rowsPerPage, displayData, calculateStartAndEnd]",[18687,18693],"[handleGetInvasiveSpecies, page]",[3470,3472],"[fetchAllAlternativeSpecies]",[9041,9053],[18744,18757],"[handleGetAlternativeSpecies, shouldReset]",[19504,19536],[19781,19787],"[handleGetAlternativeSpecies, page]",[3175,3176],"",[3175,3175],"\\",[3182,3183],[3182,3182]]